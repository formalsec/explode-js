open EslBase.Syntax.Result

exception Out_of_time

type options =
  { filename : Fpath.t
  ; workspace : Fpath.t
  ; time_limit : float
  }

let options filename workspace time_limit = { filename; workspace; time_limit }

let run_with_timeout limit f =
  let set_timer limit =
    ignore
    @@ Unix.setitimer Unix.ITIMER_REAL
         Unix.{ it_value = limit; it_interval = 0.01 }
  in
  let unset () =
    ignore
    @@ Unix.setitimer Unix.ITIMER_REAL Unix.{ it_value = 0.; it_interval = 0. }
  in
  set_timer limit;
  Sys.set_signal Sys.sigalrm (Sys.Signal_handle (fun _ -> raise Out_of_time));
  let f () = try `Ok (f ()) with Out_of_time -> `Timeout in
  Fun.protect f ~finally:unset

let run ({ filename = test; workspace; time_limit } : options) =
  let* _ = Bos.OS.Dir.create workspace in
  let workspace = Fpath.(workspace // rem_ext (base test)) in
  let work () =
    let n =
      Cmd_symbolic.main { filename = test; entry_func = "main"; workspace } ()
    in
    if n <> 0 then n else Cmd_replay.main { filename = test; workspace } ()
  in
  Ok
    ( match run_with_timeout time_limit work with
    | `Ok n -> n
    | `Timeout ->
      Format.printf "Reached time_limit@.";
      1 )

let main opts =
  match run opts with
  | Ok n -> n
  | Error (`Msg msg) ->
    Format.eprintf "error: %s@." msg;
    Cmdliner.Cmd.Exit.some_error
