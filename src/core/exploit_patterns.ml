(* TODO: Declarative pattern definition *)
let exec_patterns =
  [ (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr (value (Str "`touch success`")) ) )
  ; (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr
          (value (Str "''; touch success #")) ) )
  ]

let eval_patterns =
  [ (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr
          (value (Str ";console.log('success')//")) ) )
  ; (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr
          (value (Str "(function(){console.log('success')})()")) ) )
  ; (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr
          (value (Str "{__proto__:(function(){console.log('success')})()}")) ) )
  ; (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr
          (value (Str ".toString && console.log('success')//")) ) )
  ]

let readFile_patterns =
  [ (fun sink_expr ->
      Smtml.Expr.(
        binop Ty_str String_contains sink_expr (value (Str "./exploited")) ) )
  ]

let apply pc = function
  | `Abort _ | `Assert_failure _ | `Failure _ -> [ pc ]
  | `Exec_failure v ->
    List.map (fun f -> Smtml.Expr.Set.add (f v) pc) exec_patterns
  | `Eval_failure v ->
    List.map (fun f -> Smtml.Expr.Set.add (f v) pc) eval_patterns
  | `ReadFile_failure v ->
    List.map (fun f -> Smtml.Expr.Set.add (f v) pc) readFile_patterns
