Test symbolic argv:
  $ explode-js exploit test_sink_argv.js
  â”œâ”€â”€ Symbolic execution output:
  "":83050.2-83050.20: Assert failure:
   Stmt: assert (hd params)
   Expr: false
  â”œâ”€â”€ Symbolic execution stats: clock: 0.327740s | solver: 0.005069s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 1 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/1] Using test case: _results/test_sink_argv/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ– Status: No side effect

Test eval and Function explode:
  $ explode-js exploit test_sink_eval.js
  â”œâ”€â”€ Symbolic execution output:
  Eval failure: source
  â”œâ”€â”€ Symbolic execution stats: clock: 0.287398s | solver: 0.003793s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 3 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/3] Using test case: _results/test_sink_eval/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success ("success" in stdout)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [2/3] Using test case: _results/test_sink_eval/test-suite/witness-1.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success ("success" in stdout)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [3/3] Using test case: _results/test_sink_eval/test-suite/witness-2.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success ("success" in stdout)

  $ explode-js exploit test_sink_Function.js
  â”œâ”€â”€ Symbolic execution output:
  Eval failure: body
  â”œâ”€â”€ Symbolic execution stats: clock: 0.275853s | solver: 0.003931s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 3 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/3] Using test case: _results/test_sink_Function/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ– Status: No side effect
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [2/3] Using test case: _results/test_sink_Function/test-suite/witness-1.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ– Status: No side effect
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [3/3] Using test case: _results/test_sink_Function/test-suite/witness-2.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ– Status: No side effect

Test exec explode:
  $ explode-js exploit test_sink_exec.js
  â”œâ”€â”€ Symbolic execution output:
  Exec failure: (str.++ ("git fetch ", remote))
  â”œâ”€â”€ Symbolic execution stats: clock: 0.302932s | solver: 0.001789s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 1 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/1] Using test case: _results/test_sink_exec/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success (created file "./success")

Test readFile explode
  $ explode-js exploit test_sink_fs.js
  â”œâ”€â”€ Symbolic execution output:
  ReadFile failure: source
  â”œâ”€â”€ Symbolic execution stats: clock: 0.287122s | solver: 0.001429s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 1 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/1] Using test case: _results/test_sink_fs/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success (undesired file access occurred)

Test polluted explode:
  $ explode-js exploit test_pollution_1.js
  â”œâ”€â”€ Symbolic execution output:
  â”œâ”€â”€ Symbolic execution stats: clock: 0.273803s | solver: 0.000000s
  â””â”€â”€ âœ” No issues detected.

  $ explode-js exploit test_pollution_2.js
  â”œâ”€â”€ Symbolic execution output:
  Abort: "Prototype pollution detected!"
  â”œâ”€â”€ Symbolic execution stats: clock: 0.498865s | solver: 0.164556s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 1 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/1] Using test case: _results/test_pollution_2/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success ("polluted" in stdout)

  $ explode-js exploit test_pollution_3.js
  â”œâ”€â”€ Symbolic execution output:
  Abort: "Prototype pollution detected!"
  â”œâ”€â”€ Symbolic execution stats: clock: 0.405372s | solver: 0.055982s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 1 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/1] Using test case: _results/test_pollution_3/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 0
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success ("polluted" in stdout)

  $ explode-js exploit test_pollution_4.js
  â”œâ”€â”€ Symbolic execution output:
  Abort: "Uncaught Error: I pollute."
  â”œâ”€â”€ Symbolic execution stats: clock: 0.929543s | solver: 0.550604s
  â”œâ”€â”€ âš  Detected 1 issue(s)!
  â”‚   â”œâ”€â”€ â†º Replaying 1 test case(s)
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ [1/1] Using test case: _results/test_pollution_4/test-suite/witness-0.json
  â”‚   â”‚   â”‚   â”œâ”€â”€ Node exited with 1
  â”‚   â”‚   â”‚   â””â”€â”€ âœ” Status: Success (threw Error("I pollute."))
